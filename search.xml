<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>git安装并与远程仓库关联相关配置</title>
      <link href="/archives/a10ce796.html"/>
      <url>/archives/a10ce796.html</url>
      
        <content type="html"><![CDATA[<p>git是当前最流行的版本控制系统，下面简单记录一下git的安装及其与远程仓库的关联。</p><h4 id="git安装"><a href="#git安装" class="headerlink" title="git安装"></a>git安装</h4><ol><li>打开<a href="https://git-scm.com/" target="_blank" rel="noopener">git官网</a>，下载对应的安装包。</li><li>双击运行安装包，安装过程中可以直接选择默认配置，一路next下去。<br>安装过程相对简单，在此不再赘述。可以参考<a href="https://blog.csdn.net/wyg1973017714/article/details/105217864" target="_blank" rel="noopener">这篇文章</a></li></ol><h4 id="git与远程仓库关联"><a href="#git与远程仓库关联" class="headerlink" title="git与远程仓库关联"></a>git与远程仓库关联</h4><p><strong>1.用户配置</strong><br>git安装完之后，初次运行git前需要进行用户设置。<br>首先要配置的是个人用户名和电子邮箱地址。每次git提交时都会引用这两条信息，说明是谁提交了更新，所以会随着更新内容一起被永久纳入历史记录。</p><pre class="line-numbers language-bash"><code class="language-bash">   $ <span class="token function">git</span> config --global user.name <span class="token string">"John Doe"</span>   $ <span class="token function">git</span> config --global user.email johndoe@example.com<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>可以通过 <code>git config --list</code> 查看配置信息。</p><p><strong>2.生成ssh公钥并添加到github或者码云仓库</strong><br>github或者码云都提供了基于ssh协议的git服务，在使用ssh协议访问远程仓库之前，需要先配置好账户/仓库的ssh公钥。<br>使用以下命令生成sshkey：</p><pre class="line-numbers language-bash"><code class="language-bash">   ssh-keygen -t rsa -C <span class="token string">"xxxxx@xxxxx.com"</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>按照提示完成三次回车，即可生成ssh key。通过查看 <code>~/.ssh/id_rsa.pub</code> 文件内容，可以获取刚刚生成的公钥。<br><img src="/medias/loading.gif" data-original="https://img2020.cnblogs.com/blog/2091839/202007/2091839-20200710191729867-477207511.png" alt="生成公钥"></p><p>复制生成后的ssh key，进入github或者码云，找到setting（设置）-&gt; ssh Key(ssh 公钥)，添加生成的公钥即可。</p><p>添加完成后，在终端中输入</p><pre class="line-numbers language-bash"><code class="language-bash">   <span class="token function">ssh</span> -T git@gitee.com<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>首次使用需要确认并添加主机到本机SSH可信列表。若返回 Hi XXX! You’ve successfully authenticated, but Gitee.com does not provide shell access. 内容，则证明添加成功。<br><img src="/medias/loading.gif" data-original="https://img2020.cnblogs.com/blog/2091839/202007/2091839-20200710192438928-30407008.png" alt="添加成功"></p><p>添加成功之后就可以对远程仓库进行操作了。</p>]]></content>
      
      
      <categories>
          
          <category> 开发配置 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git安装与配置 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>切换npm源的几种方法</title>
      <link href="/archives/2ed0d9ea.html"/>
      <url>/archives/2ed0d9ea.html</url>
      
        <content type="html"><![CDATA[<p>我们在使用官方提供的npm源安装各种依赖包的时候，下载速度会很慢，通常需要更换npm源。<br>我们可以在终端中输入命令 <code>npm config list</code> 来查看 npm 源地址，默认地址为</p><pre class="line-numbers language-bash"><code class="language-bash">metrics-registry <span class="token operator">=</span> <span class="token string">"https://registry.npmjs.org/"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>国内常用的npm源地址为淘宝镜像：<code>https://registry.npm.taobao.org/</code></p><h4 id="方式一：使用命令直接更换"><a href="#方式一：使用命令直接更换" class="headerlink" title="方式一：使用命令直接更换"></a>方式一：使用命令直接更换</h4><p>在终端输入以下命令，即可设置npm源地址为淘宝镜像。</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token keyword">set</span> registry https://registry.npm.taobao.org/<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这时使用 <code>npm config list</code> 查看 npm 源地址就变为</p><p><img src="/medias/loading.gif" data-original="https://img2020.cnblogs.com/blog/2091839/202007/2091839-20200708210659983-431597029.png" alt="更改后的npm源"></p><blockquote><p>删除方式为：<code>npm config rm registry</code></p></blockquote><h4 id="方式二：使用nrm管理npm源"><a href="#方式二：使用nrm管理npm源" class="headerlink" title="方式二：使用nrm管理npm源"></a>方式二：使用nrm管理npm源</h4><p>nrm是用来专门管理npm源地址的工具，我们使用nrm可以很方便的切换npm源地址。</p><ol><li><p>全局安装nrm</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> nrm -g --save <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>nrm有默认配置，使用 <code>nrm ls</code> 查看，带 * 即为当前源地址<br><img src="/medias/loading.gif" data-original="https://img2020.cnblogs.com/blog/2091839/202007/2091839-20200708211747319-354816353.png" alt="nrm查看配置项"></p></li><li><p>nrm切换淘宝镜像</p><pre class="line-numbers language-bash"><code class="language-bash">nrm use taobao<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>使用nrm添加镜像地址</p><pre class="line-numbers language-bash"><code class="language-bash">nrm add r_name r_url <span class="token comment" spellcheck="true"># r_name 为镜像名字，r_url 为镜像地址</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>删除nrm镜像</p><pre class="line-numbers language-bash"><code class="language-bash">nrm del r_name<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>测试镜像速度</p><pre class="line-numbers language-bash"><code class="language-bash">nrm <span class="token function">test</span> r_name<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><p>参考文章：<br><a href="https://www.cnblogs.com/Sky-Raining/p/10313600.html" target="_blank" rel="noopener">https://www.cnblogs.com/Sky-Raining/p/10313600.html</a><br><a href="https://www.cnblogs.com/wangmeijian/p/7072053.html" target="_blank" rel="noopener">https://www.cnblogs.com/wangmeijian/p/7072053.html</a></p>]]></content>
      
      
      <categories>
          
          <category> 开发配置 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> npm源切换 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue使用elementUI form表单label样式修改</title>
      <link href="/archives/9ec12ab3.html"/>
      <url>/archives/9ec12ab3.html</url>
      
        <content type="html"><![CDATA[<h4 id="1-删除style标签中的-scoped-属性"><a href="#1-删除style标签中的-scoped-属性" class="headerlink" title="1.删除style标签中的 scoped 属性"></a>1.删除style标签中的 <code>scoped</code> 属性</h4><pre class="line-numbers language-html"><code class="language-html">   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>lang<span class="token punctuation">"</span></span> <span class="token attr-name">scoped</span><span class="token punctuation">></span></span><span class="token style language-css">      <span class="token number">...</span>   </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="2-在对应el-form-item的label属性中加入class样式"><a href="#2-在对应el-form-item的label属性中加入class样式" class="headerlink" title="2.在对应el-form-item的label属性中加入class样式"></a>2.在对应el-form-item的label属性中加入class样式</h4><pre class="line-numbers language-html"><code class="language-html">   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-form-item</span> <span class="token attr-name">label</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>用户名<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>item<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-input</span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ruleForm.username<span class="token punctuation">"</span></span> <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>请输入用户名<span class="token punctuation">"</span></span> <span class="token attr-name">maxlength</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>10<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-input</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-form-item</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="3-审查元素，找到label对应的class"><a href="#3-审查元素，找到label对应的class" class="headerlink" title="3.审查元素，找到label对应的class"></a>3.审查元素，找到label对应的class</h4><p>如：<code>.el-form-item__label</code> 添加如下样式代码</p><pre class="line-numbers language-css"><code class="language-css"><span class="token selector"><span class="token class">.item</span> <span class="token class">.el-form-item__label</span></span><span class="token punctuation">{</span>    <span class="token property">color</span><span class="token punctuation">:</span> wheat<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>参考文章：<a href="https://blog.csdn.net/qq_40209717/article/details/103413486" target="_blank" rel="noopener">https://blog.csdn.net/qq_40209717/article/details/103413486</a></p>]]></content>
      
      
      <categories>
          
          <category> vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> elementUI样式修改 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vuex学习笔记</title>
      <link href="/archives/ddd07bd6.html"/>
      <url>/archives/ddd07bd6.html</url>
      
        <content type="html"><![CDATA[<h3 id="Vuex概述"><a href="#Vuex概述" class="headerlink" title="Vuex概述"></a>Vuex概述</h3><p>Vuex 是适用于在 Vue项目开发时使用的状态管理工具。如果在一个项目开发中频繁使用组件传参的方式来同步 data 中的值，一旦项目变得庞大，管理和维护这些值将是相当麻烦的。为此，Vue 为这些被多个组件频繁使用的值提供了一个统一的管理工具——Vuex。在具有 Vuex 的 Vue项目中，我们只需要这些值定义在 Vuex 中，即可在整个 Vue 项目的组建中使用这些值。</p><p>使用 vuex 管理数据的好处：</p><ul><li>能够在 Vuex 中集中管理共享的数据，便于开发和后期进行维护</li><li>能够高效的实现组件之间的数据共享，提高开发效率</li><li>存储在 vuex 中的数据是响应式的，当数据发生改变时，页面中的数据也会同步更新</li></ul><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><p>使用 VueCli构建项目时，可以直接勾选 Vuex ，这样 VueCli 就会直接将Vue创建。如果没有选中 Vuex 也可以手动安装</p><pre class="line-numbers language-html"><code class="language-html">npm install vuex --save<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后在项目的根目录下新增一个 store 文件夹， 在该文件夹下创建 <code>index.js</code> 文件。此时的项目结构应该是：</p><pre><code>│  App.vue│  main.js│├─assets│      logo.png│├─components│      HelloWorld.vue│├─router│      index.js│└─store       index.js</code></pre><h4 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h4><blockquote><p>使用 vue/cli 初始化项目的时候会直接将 vuex 相关的挂载好</p></blockquote><ul><li><p>初始化 store 下的 <code>index.js</code> 中的内容</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token keyword">import</span> Vuex <span class="token keyword">from</span> <span class="token string">'vuex'</span><span class="token comment" spellcheck="true">//挂载Vuex</span>Vue<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>Vuex<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//创建VueX对象</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">new</span> <span class="token class-name">Vuex<span class="token punctuation">.</span>Store</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    state<span class="token punctuation">:</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//存放的键值对就是所要管理的状态</span>        name<span class="token punctuation">:</span><span class="token string">'helloVueX'</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>将 store 挂载到当前项目的 Vue 实例中，打开 main.js</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token keyword">import</span> App <span class="token keyword">from</span> <span class="token string">'./App'</span><span class="token keyword">import</span> router <span class="token keyword">from</span> <span class="token string">'./router'</span><span class="token keyword">import</span> store <span class="token keyword">from</span> <span class="token string">'./store'</span>Vue<span class="token punctuation">.</span>config<span class="token punctuation">.</span>productionTip <span class="token operator">=</span> <span class="token boolean">false</span><span class="token comment" spellcheck="true">/* eslint-disable no-new */</span><span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  el<span class="token punctuation">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span>  router<span class="token punctuation">,</span>  store<span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">//store:store 和router一样，将我们创建的Vuex实例挂载到这个vue实例中</span>  render<span class="token punctuation">:</span> h <span class="token operator">=</span><span class="token operator">></span> <span class="token function">h</span><span class="token punctuation">(</span>App<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>在组件中使用 Vuex。</p><pre class="line-numbers language-vue"><code class="language-vue"><template>    <div id='app'>        name:        <h1>{{ $store.state.name }}</h1>    </div></template><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>或者要在组件方法中使用</p><pre class="line-numbers language-vue"><code class="language-vue">methods:{    add(){      console.log(this.$store.state.name)    }},<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><blockquote><p>注意：不能直接修改 state 中的值</p></blockquote><h3 id="Vuex-中的核心内容"><a href="#Vuex-中的核心内容" class="headerlink" title="Vuex 中的核心内容"></a>Vuex 中的核心内容</h3><p>在 Vuex 对象中，有以下核心属性：</p><ul><li><code>state</code>  存放状态</li><li><code>mutations</code>  用来操作 state 成员</li><li><code>getters</code>  加工 state 成员给外界</li><li><code>actions</code>  异步操作</li><li><code>modules</code>  模块化状态管理</li></ul><p><img src="/medias/loading.gif" data-original="https://gitee.com/aurorapic/BlogPic/raw/master/img/20200614221333.png" alt="Vuex流程图"></p><p>首先， Vue 组件如果调用某个 Vuex 的方法过程中需要<strong>向后端请求</strong>时 或者 说出现<strong>异步操作</strong>时，需要 <code>dispatch</code> Vuex 中的 <code>actions</code> 的方法，以保证数据的同步。可以说，<code>actions</code> 的存在就是为了让 <code>mutations</code> 中的方法能在异步操作中起作用。</p><p>如果<strong>没有异步操作</strong>，那么我们就可以直接在组件内提交状态中的 <code>mutations</code> 中，使用自己编写的方法来达成对 <code>state</code> 的操作。最后被修改的 <code>state</code> 中的成员会被渲染到组件的原位置当中去。</p><blockquote><p>不建议在组件中直接对 <code>state</code> 中的成员进行操作，这是因为如果直接修改的话不能被 VueDevtools 监控到。</p></blockquote><h4 id="State"><a href="#State" class="headerlink" title="State"></a>State</h4><p>state 提供唯一的公共数据源，所有共享的数据都要统一放到 store 中的 state 中存储。</p><p><strong>在组件中访问State的方式：</strong></p><ul><li><code>this.$store.state</code> 全局数据名称  如：<code>this.$store.state.count</code></li><li>先按需导入 <code>mapState</code> 函数： <code>import { mapState } from &#39;vuex&#39;</code> ；然后数据映射为计算属性： <code>computed:{ ...mapState([&#39;全局数据名称&#39;]) }</code></li></ul><h4 id="Mutations"><a href="#Mutations" class="headerlink" title="Mutations"></a>Mutations</h4><p><code>mutations</code>是操作<code>state</code>数据的方法的集合，比如对该数据的修改、增加、删除等等。</p><p><strong>Mutations 使用方法</strong></p><p><code>mutations</code>方法都有默认的形参：(<strong>[state]</strong> <strong>[,payload]</strong>)</p><ul><li><code>state</code>是当前<code>VueX</code>对象中的<code>state</code>。必填</li><li><code>payload</code>是该方法在被调用时传递参数使用的。选填</li></ul><p>在 store 文件夹下的 index.js 中添加以下内容：</p><pre class="line-numbers language-js"><code class="language-js">mutations<span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token function">add</span><span class="token punctuation">(</span>state<span class="token punctuation">,</span>step<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//第一个形参永远都是state也就是$state对象</span>        <span class="token comment" spellcheck="true">//第二个形参是调用add时传递的参数</span>        state<span class="token punctuation">.</span>count<span class="token operator">+</span><span class="token operator">=</span>step<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后在组件中，我们需要调用 commit 方法调用 mutations中的事件</p><pre class="line-numbers language-vue"><code class="language-vue"><button @click="Add">+1</button>methods:{  Add(){    //使用commit函数调用mutations中的对应函数，    //第一个参数就是我们要调用的mutations中的函数名    //第二个参数就是传递给add函数的参数    this.$store.commit('add',10)  }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>按需导入 mutations</strong></p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">import</span> <span class="token punctuation">{</span> mapMutations <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'vuex'</span>methods<span class="token punctuation">:</span><span class="token punctuation">{</span>  <span class="token operator">...</span><span class="token function">mapMutations</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'add'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="Mutation-传值"><a href="#Mutation-传值" class="headerlink" title="Mutation 传值"></a>Mutation 传值</h4><p>在实际生产过程中，会遇到需要在提交某个 <code>mutations</code> 时携带一些参数给方法使用。</p><p>提交单个值时： </p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">this</span><span class="token punctuation">.</span>$store<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token string">'edit'</span><span class="token punctuation">,</span><span class="token number">15</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>当需要提交多个参数的时候，推荐把他们放在一个对象中来提交。</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">this</span><span class="token punctuation">.</span>$store<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token string">'edit'</span><span class="token punctuation">,</span><span class="token punctuation">{</span>age<span class="token punctuation">:</span><span class="token number">15</span><span class="token punctuation">,</span>sex<span class="token punctuation">:</span><span class="token string">'男'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>接收挂载的参数：</p><pre class="line-numbers language-js"><code class="language-js"><span class="token function">edit</span><span class="token punctuation">(</span>state<span class="token punctuation">,</span>payload<span class="token punctuation">)</span><span class="token punctuation">{</span>      state<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">'jack'</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>payload<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 15或{age:15,sex:'男'}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>另一种提交方式</strong></p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">this</span><span class="token punctuation">.</span>$store<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    type<span class="token punctuation">:</span><span class="token string">'edit'</span><span class="token punctuation">,</span>    payload<span class="token punctuation">:</span><span class="token punctuation">{</span>        age<span class="token punctuation">:</span><span class="token number">15</span><span class="token punctuation">,</span>        sex<span class="token punctuation">:</span><span class="token string">'男'</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>增删state中的成员</strong></p><p>为了配合Vue的响应式数据，我们在 <code>Mutations</code>的方法中，应当使用 <code>Vue</code> 提供的方法来进行操作。</p><ul><li><p><code>Vue.set</code>为某个对象设置成员的值，如果不存在就新增</p><p>例如对 <code>state</code> 对象中添加一个 age 成员</p><pre class="line-numbers language-vue"><code class="language-vue">Vue.set(state,"age",15)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p><code>Vue.delete</code> 删除成员</p><p>将刚刚添加的 age 成员删除</p><pre class="line-numbers language-vue"><code class="language-vue">Vue.delete(state,'age')<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><h4 id="Getters"><a href="#Getters" class="headerlink" title="Getters"></a>Getters</h4><p>可以对 state 中的成员加工后传递给外界，本身并不改变 state 中的数据</p><p>Getters中的方法有两个默认参数：</p><ul><li>state 当前VueX对象中的状态对象</li><li>getters 当前 getters 对象，用于将 getters 下的其他getter拿来用</li></ul><pre class="line-numbers language-js"><code class="language-js">getters<span class="token punctuation">:</span><span class="token punctuation">{</span>    <span class="token function">nameInfo</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"姓名:"</span><span class="token operator">+</span>state<span class="token punctuation">.</span>name    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token function">fullInfo</span><span class="token punctuation">(</span>state<span class="token punctuation">,</span>getters<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> getters<span class="token punctuation">.</span>nameInfo<span class="token operator">+</span><span class="token string">'年龄:'</span><span class="token operator">+</span>state<span class="token punctuation">.</span>age    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>组件中调用,使用插值表达式直接调用</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">this</span><span class="token punctuation">.</span>$store<span class="token punctuation">.</span>getters<span class="token punctuation">.</span>fullInfo<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>也可以按需导入 mapGetters 并映射为计算属性</strong></p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">import</span> <span class="token punctuation">{</span> mapGetters <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'vuex'</span>computed<span class="token punctuation">:</span><span class="token punctuation">{</span>  <span class="token operator">...</span><span class="token function">mapGetters</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'fullInfo'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="Actions"><a href="#Actions" class="headerlink" title="Actions"></a>Actions</h4><p>由于直接在 <code>mutations</code> 方法中进行异步操作，将会引起数据失效。所以提供了 <code>Actions</code> 来专门进行异步操作，然后提交 <code>mutations</code> 方法</p><p><code>Actions</code>中的方法有两个默认参数:</p><ul><li><code>context</code> 上下文(相当于箭头函数中的this)对象</li><li><code>payload</code> 挂载参数</li></ul><p>例如，两秒钟之后执行 edit 方法。</p><p>由于 <code>setTimeout</code>是异步操作，所以需要使用 <code>actions</code> </p><pre class="line-numbers language-js"><code class="language-js">actions<span class="token punctuation">:</span><span class="token punctuation">{</span>    <span class="token function">aEdit</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span>payload<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>            context<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token string">'edit'</span><span class="token punctuation">,</span>payload<span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token number">2000</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在组件中调用</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">this</span><span class="token punctuation">.</span>$store<span class="token punctuation">.</span><span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token string">'aEdit'</span><span class="token punctuation">,</span><span class="token punctuation">{</span>age<span class="token punctuation">:</span><span class="token number">15</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>按需导入 mapActions</strong></p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">import</span> <span class="token punctuation">{</span> mapActions <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'vuex'</span>methods<span class="token punctuation">:</span><span class="token punctuation">{</span>  <span class="token operator">...</span><span class="token function">mapMutations</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'aEdit'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="Models"><a href="#Models" class="headerlink" title="Models"></a>Models</h4><p>当项目庞大，状态非常多时，可以采用模块化管理模式。Vuex 允许我们将 store 分割成<strong>模块（module）</strong>。每个模块拥有自己的 <code>state、mutation、action、getter</code>、甚至是嵌套子模块——从上至下进行同样方式的分割。</p><pre class="line-numbers language-js"><code class="language-js">models<span class="token punctuation">:</span><span class="token punctuation">{</span>    a<span class="token punctuation">:</span><span class="token punctuation">{</span>        state<span class="token punctuation">:</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>        getters<span class="token punctuation">:</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token operator">...</span><span class="token punctuation">.</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>组件内调用模块a的状态：</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">this</span><span class="token punctuation">.</span>$store<span class="token punctuation">.</span>state<span class="token punctuation">.</span>a<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>而提交或者<code>dispatch</code>某个方法和以前一样,会自动执行所有模块内的对应<code>type</code>的方法：</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">this</span><span class="token punctuation">.</span>$store<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token string">'editKey'</span><span class="token punctuation">)</span><span class="token keyword">this</span><span class="token punctuation">.</span>$store<span class="token punctuation">.</span><span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token string">'aEditKey'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vuex </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>面试经验教训（6.12）</title>
      <link href="/archives/105f7dfa.html"/>
      <url>/archives/105f7dfa.html</url>
      
        <content type="html"><![CDATA[<p>今天进行了我人生中的第二次面试，说来这个面试真是一言难尽。。。昨天hr打电话说选个时间进行面试，我选择了今天下午。。。当时不觉得什么，后来想想，就隔一天的时间，时间是不是有点紧了。。关键是，我其实心里没有底，也根本没有准备好，然后只有一天的时间，只能硬着头皮上了，这两天就疯狂看面试题，看完之后脑子一片浆糊。。。这是这次面试前的失误：<strong>主要不是间隔的时间短，而是根本没有准备好就去面试。。</strong></p><p>一谈到面试，我就紧张，然后约好两点，两点过去好久了，也没有打电话来面试，我就觉得是不是就放弃面试我了。。快到三点的时候，面试官加我微信，说之前有事情没有打电话，于是就约三点面试。面试一开始，面试官让我做个自我介绍，把我一下给搞蒙了，我以为是直接就问问题（我忘记了上次面试有没有自我介绍，也根本没有准备自我介绍的说辞。。）。最后没办法，说了一下学校和专业和面试的岗位，就完了。。可能面试官也没想到我直接就这么说就结束了，也愣了一下。。。这是第二个失误：<strong>自我介绍</strong> ，也算是第一个失误吧，根本没准备好。。</p><p>自我介绍之后，开始问具体技术。首先是 vue 的知识，因为最近一直在做，基础的话感觉不是太难，但为什么现在只记得一个组件间传值答得还可以。。。vue 框架肯定是在工作后必须会使用的，虽然经过了两个多月的学习有了一定的理解，但是细节的理解还是不到位。</p><p>然后就是基础的 css ，我觉得布局这方面我学的还不错了，这两天也看了css布局的面试题，但是，这个回答的确实不是很好。其中一个问题是： 怎么排列出一个三行三列的布局，我竟然没理解是啥？又问了一遍面试官又给了一个具体的场景（九宫格样式），然后大概知道什么意思，我先说的是使用float布局，给每个盒子33.3%的宽度可以实现，我觉得还有另外的实现方式，就是使用flex布局，但是我没有说明白。。。。js方面，问了闭包，是啥，正看到了这个面试题，就把概念回答了，面试官问，具体什么作用或者是在什么情况下使用，我，，不知道啊。。。。我知道闭包很重要，也复习到了，但是没有真正理解。还有就是原型和原型链，也复习到了，也感觉会呀，但怎么就是说不明白。。。。问了一些网络基础问题，本来这块是挺薄弱的，但这两天又看了，竟然答得还行吧。。。。最后，面试官问完了，让我问他，我就问了技术栈和我如果入职能做什么。其实反问环节也没有准备，面完之后我才想到还有其他可以问的。。。</p><p>最后总结吧，整个面试过程就像我现在写这篇总结一样，明明需要总结的东西就在脑子里，但就是<strong>表达不明白</strong>，归根结底可能还是<strong>没有学好，没有准备好</strong>。怎么地七月份也得出去实习，这次面试权当做是试水了吧，暴露出来的问题还是挺多的，好好复习，好好准备面试，准备好自我介绍和反问问题。加油吧！</p>]]></content>
      
      
      <categories>
          
          <category> 面试 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>前端面试注意事项和面试题解析</title>
      <link href="/archives/d227b726.html"/>
      <url>/archives/d227b726.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>(四)详情页面开发</title>
      <link href="/archives/bd82df2a.html"/>
      <url>/archives/bd82df2a.html</url>
      
        <content type="html"><![CDATA[<h3 id="动态路由和banner布局"><a href="#动态路由和banner布局" class="headerlink" title="动态路由和banner布局"></a>动态路由和banner布局</h3><h4 id="router-link"><a href="#router-link" class="headerlink" title="router-link:"></a>router-link:</h4><p>router-link标签会默认渲染成 a 标签，可以为他添加 tag 属性，意为渲染成 tag 属性值的DOM元素。</p><pre class="line-numbers language-html"><code class="language-html">// 此时 router-link 标签不会被渲染为a标签，而是会被渲染为 li 标签<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>router-link</span> <span class="token attr-name">tag</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>li<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>router-link</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="动态路由配置"><a href="#动态路由配置" class="headerlink" title="动态路由配置"></a>动态路由配置</h4><p>打开router文件加下的index.js文件，配置动态路由规则如下：</p><pre class="line-numbers language-js"><code class="language-js"><span class="token punctuation">{</span>    path<span class="token punctuation">:</span> <span class="token string">'/detail/:id'</span><span class="token punctuation">,</span>    name<span class="token punctuation">:</span> <span class="token string">'Detail'</span><span class="token punctuation">,</span>    component<span class="token punctuation">:</span> Detail  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>&#39;/detail/:id&#39;</code> 表示前面的路径必须是detail，后面的路径由参数 id 决定。</p><h4 id="banner-布局"><a href="#banner-布局" class="headerlink" title="banner 布局"></a>banner 布局</h4><pre class="line-numbers language-stylus"><code class="language-stylus"><span class="token comment" spellcheck="true">// 为放banner的盒子添加一下css配置。防止图片加载的时候发生抖动</span><span class="token selector">.banner</span>  <span class="token property-declaration"><span class="token property">overflow</span><span class="token punctuation">:</span> hidden</span>  <span class="token property-declaration"><span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">0</span></span>  <span class="token property-declaration"><span class="token property">padding-bottom</span><span class="token punctuation">:</span> <span class="token number">55%</span>  </span><span class="token comment" spellcheck="true">// 图片的宽高比例</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>设置背景渐变</strong></p><pre class="line-numbers language-css"><code class="language-css">background <span class="token function">linear-gradient</span><span class="token punctuation">(</span>to bottom, <span class="token function">rgba</span><span class="token punctuation">(</span><span class="token number">0</span>, <span class="token number">0</span>, <span class="token number">0</span>, <span class="token number">0</span><span class="token punctuation">)</span>, <span class="token function">rgba</span><span class="token punctuation">(</span><span class="token number">0</span>, <span class="token number">0</span>, <span class="token number">0</span>, <span class="token number">.8</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> vue开发去哪儿网 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>(三)城市选择页面开发</title>
      <link href="/archives/411b050c.html"/>
      <url>/archives/411b050c.html</url>
      
        <content type="html"><![CDATA[<h3 id="路由配置"><a href="#路由配置" class="headerlink" title="路由配置"></a>路由配置</h3><h4 id="基本配置"><a href="#基本配置" class="headerlink" title="基本配置"></a>基本配置</h4><p>首先需要新建city文件夹，并且新建 City.vue 主页面及其子组件等。</p><p>然后需要在 router/index.js 文件夹下配置路由规则，确定城市详情页面的跳转位置，首先需要引入相关的组件，然后配置 路由规则如下：</p><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 引入组件</span><span class="token keyword">import</span> City <span class="token keyword">from</span> <span class="token string">'@pages/city/City'</span><span class="token comment" spellcheck="true">// 为该组件配置路由规则</span><span class="token punctuation">{</span>    path<span class="token punctuation">:</span> <span class="token string">'/city'</span><span class="token punctuation">,</span>    name<span class="token punctuation">:</span> <span class="token string">'City'</span><span class="token punctuation">,</span>    component<span class="token punctuation">:</span> City<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="router-link的使用"><a href="#router-link的使用" class="headerlink" title="router-link的使用"></a>router-link的使用</h4><p><code>router-link</code> 标签会被渲染为 <code>a</code> 标签。那么如何进行页面间的跳转呢？</p><p>在需要跳转DOM元素外使用 <code>router-link</code> 标签包裹，并添加 to 属性，to属性值为 要跳转到的路径。</p><pre class="line-numbers language-vue"><code class="language-vue"><router-link to='/city'></router-link><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><code>router-link</code> 有默认的颜色，可以添加自定义的颜色将默认颜色覆盖。</p><h3 id="BetterScoll的使用"><a href="#BetterScoll的使用" class="headerlink" title="BetterScoll的使用"></a>BetterScoll的使用</h3><p>BetterScroll 是一款重点解决移动端（已支持 PC）各种滚动场景需求的插件。它的核心是借鉴的 <a href="https://github.com/cubiq/iscroll" target="_blank" rel="noopener">iscroll</a> 的实现，它的 API 设计基本兼容 iscroll，在 iscroll 的基础上又扩展了一些 feature 以及做了一些性能优化。</p><p>BetterScroll 是使用纯 JavaScript 实现的，这意味着它是无依赖的。<a href="https://github.com/ustbhuangyi/better-scroll" target="_blank" rel="noopener">仓库地址</a> <a href="https://github.com/ustbhuangyi/better-scroll/blob/master/README_zh-CN.md" target="_blank" rel="noopener">中文文档</a></p><p><strong>安装</strong></p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> better-scroll -S <span class="token comment" spellcheck="true"># install 1.x</span><span class="token function">npm</span> <span class="token function">install</span> better-scroll@next -S <span class="token comment" spellcheck="true"># install 2.x，该版本带有所有插件的能力。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>html结构要求</strong></p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>wrapper<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>content<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>    ...  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span>  <span class="token comment" spellcheck="true">&lt;!-- 这里可以放一些其它的 DOM，但不会影响滚动 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面的代码中 BetterScroll 是作用在外层 wrapper 容器上的，滚动的部分是 content 元素。这里要注意的是，BetterScroll 只处理容器（wrapper）的<strong>第一个子元素</strong>（content）的滚动，其它的元素都会被忽略。</p><p><strong>引入并初始化</strong></p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">import</span> BScroll <span class="token keyword">from</span> <span class="token string">'@better-scroll/core'</span><span class="token keyword">let</span> wrapper <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'.wrapper'</span><span class="token punctuation">)</span><span class="token keyword">let</span> scroll <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BScroll</span><span class="token punctuation">(</span>wrapper<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>在本项目中，具体实现如下：</p><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 引入这个组件</span><span class="token keyword">import</span> BScroll <span class="token keyword">from</span> <span class="token string">'better-scroll'</span><span class="token comment" spellcheck="true">// 在页面挂载完成之后，初始化BScroll，通过this.$refs.warpper获取页面的DOM元素</span>mounted <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>scroll <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BScroll</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>$refs<span class="token punctuation">.</span>wrapper<span class="token punctuation">,</span> <span class="token punctuation">{</span>click<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="使用axios获取城市数据并渲染到页面"><a href="#使用axios获取城市数据并渲染到页面" class="headerlink" title="使用axios获取城市数据并渲染到页面"></a>使用axios获取城市数据并渲染到页面</h3><blockquote><p>在City.vue中通过 axios 获取数据默认返回的是一个Promise对象，我们可以使用async和await简化数据的操作，使数据显示更加清楚。</p></blockquote><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">// mounted 钩子函数是在页面挂载之后执行，当页面挂载之后立即获取city数据。</span>mounted <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getCityInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span>methods<span class="token punctuation">:</span> <span class="token punctuation">{</span>  <span class="token keyword">async</span> getCityInfo <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// axios 请求返回的是一个promise对象</span>    <span class="token keyword">const</span> <span class="token punctuation">{</span> data<span class="token punctuation">:</span> res <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">await</span> axios<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'/api/city.json'</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// console.log(res)</span>       <span class="token keyword">if</span> <span class="token punctuation">(</span>res<span class="token punctuation">.</span>ret <span class="token operator">&amp;&amp;</span> res<span class="token punctuation">.</span>data<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>cities <span class="token operator">=</span> res<span class="token punctuation">.</span>data<span class="token punctuation">.</span>cities          <span class="token keyword">this</span><span class="token punctuation">.</span>hotCities <span class="token operator">=</span> res<span class="token punctuation">.</span>data<span class="token punctuation">.</span>hotCities       <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="父子间传值"><a href="#父子间传值" class="headerlink" title="父子间传值"></a>父子间传值</h4><p>我们已经在父组件 City.vue 中获取到了城市数据，然后可以通过父组件向子组件传值的形式使子组件使用到城市的数据。</p><p>父组件通过属性绑定的形式向子组件传值，子组件通过 props 接收父组件传递过来的值。</p><pre class="line-numbers language-vue"><code class="language-vue">// 父组件使用属性绑定的形式向子组件传值<city-list          :cities='cities'          :hotCities="hotCities"          :letter='letter'></city-list>// 子组件使用 props 接收，然后就可以在页面中使用这些数据了。props: ['cities', 'hotCities']或者：props: {    cities: Object,    hotCities: Array}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="兄弟组件数据传递"><a href="#兄弟组件数据传递" class="headerlink" title="兄弟组件数据传递"></a>兄弟组件数据传递</h4><p><strong>思路：</strong></p><p>同为子组件的 Alphabet.vue 和 List.vue 相互传值。可以通过 <code>$emit()</code> 先向父组件City.vue传值，然后在通过父组件 City.vue 数据绑定向子组件 List.vue 传值，就实现了父子组件间数据的传递。</p><pre class="line-numbers language-vue"><code class="language-vue">Alphabet.vue: 给元素绑定事件，向外传递数据<div class="list">      <ul>        <li class="item"            v-for="item in letters"            :key="item"            :ref='item'            @touchstart='handleTouchStart'            @touchmove='handleTouchMove'            @touchend='handleTouchEnd'            @click="handleLetterClick"        >{{item}}</li>      </ul></div>handleLetterClick (e) {// 向外触发letterChange事件，并将当前对应的数据传递出去  this.$emit('letterChange', e.target.innerHTML)  // console.log(e.target.innerHTML)},City.vue: 接收Alphabet.vue 传递过来的数据，并转发到子组件City.vue 中// letterChange事件监听数据变化// 通过属性绑定的形式向子组件 List.vue 传值。<city-list   :cities='cities'   :hotCities="hotCities"   :letter='letter' ></city-list><city-alphabet   :cities='cities'   @letterChange="handleLetterChange"></city-alphabet>handleLetterChange (letter) {// 当前组件中定义一个letter，默认值为空，如果子组件传递了letter，当前组件的letter值就为子组件传递过来的值。  this.letter = letter  // console.log(letter)}List.vue: 使用 props 接收props: ['cities', 'hotCities', 'letter']// 使用侦听器监听letter值的变化watch: {    letter () {      if (this.letter) {        const element = this.$refs[this.letter][0]        // console.log(element)        this.scroll.scrollToElement(element)      }      // console.log(this.letter)    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="列表性能优化"><a href="#列表性能优化" class="headerlink" title="列表性能优化"></a>列表性能优化</h4><p><strong>函数节流：</strong></p><p>当鼠标在字幕表上来回移动的时候，这个时候 touchMove 执行的频率是非常高的，通过函数节流限制函数执行的频率。通过设置定时器，延迟8ms执行一次可以有效的提高性能。</p><pre class="line-numbers language-js"><code class="language-js">handleTouchMove <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>touchStatus<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// const startY = this.$refs['A'][0].offsetTop</span>        <span class="token comment" spellcheck="true">// console.log(startY)</span>        <span class="token comment" spellcheck="true">// 函数节流，提高性能</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>timer<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token function">clearTimeout</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>timer<span class="token punctuation">)</span>        <span class="token punctuation">}</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>timer <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>          <span class="token keyword">const</span> touchY <span class="token operator">=</span> e<span class="token punctuation">.</span>touches<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>clientY <span class="token operator">-</span> <span class="token number">79</span>          <span class="token keyword">const</span> index <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span><span class="token punctuation">(</span>touchY <span class="token operator">-</span> <span class="token keyword">this</span><span class="token punctuation">.</span>startY<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">20</span><span class="token punctuation">)</span>          <span class="token comment" spellcheck="true">// console.log(index)</span>          <span class="token comment" spellcheck="true">// console.log(touchY)</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> index <span class="token operator">&lt;=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>letters<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$emit</span><span class="token punctuation">(</span><span class="token string">'letterChange'</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>letters<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">)</span>          <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span>      <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="搜索逻辑实现"><a href="#搜索逻辑实现" class="headerlink" title="搜索逻辑实现"></a>搜索逻辑实现</h3><ol><li>在 Search.vue 组件的data 中定义 keyword 并通过 v-model 双向绑定到 搜索框中。</li><li>在父组件 City.vue 中向子组件传递 城市列表数据 cities ，在子组件 Search.vue 中使用 props 属性接收。</li><li>在 Search.vue 组件 data 中定义 list 数组，用来存储搜索匹配的 城市列表数据。</li></ol><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 使用侦听器 监听 keyword 的变化。</span>watch<span class="token punctuation">:</span> <span class="token punctuation">{</span>    keyword <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>timer<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">clearTimeout</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>timer<span class="token punctuation">)</span>      <span class="token punctuation">}</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>keyword<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token keyword">return</span>      <span class="token punctuation">}</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>timer <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token comment" spellcheck="true">// console.log(this.cities)</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token keyword">in</span> <span class="token keyword">this</span><span class="token punctuation">.</span>cities<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token comment" spellcheck="true">// console.log(i)</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>cities<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>value <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>value<span class="token punctuation">.</span>spell<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>keyword<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">||</span> value<span class="token punctuation">.</span>name<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>keyword<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>              result<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span>            <span class="token punctuation">}</span>          <span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>list <span class="token operator">=</span> result      <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>在搜索城市列表显示的标签中通过v-for 的方式渲染搜索出来的城市。</p></blockquote><h3 id="vuex实现数据共享"><a href="#vuex实现数据共享" class="headerlink" title="vuex实现数据共享"></a>vuex实现数据共享</h3><p><img src="/medias/loading.gif" data-original="https://gitee.com/aurorapic/BlogPic/raw/master/img/20200609134453.png" alt=""></p><p>State 用于存放共用数据，组件改变数据必须调用Actions，作一些异步处理或批量的通过操作，然后Actions调用Mutations，只有通过改变Mutations才能改变State的值。有时可以跳过Actions，直接调用Mutations。</p><p><strong>安装</strong></p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> vuex --save<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>基本使用</strong></p><p>创建一个store文件夹，并且新建一个index.js。在这个js文件中编写vuex代码。</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token keyword">import</span> Vuex <span class="token keyword">from</span> <span class="token string">'vuex'</span>Vue<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>Vuex<span class="token punctuation">)</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">new</span> <span class="token class-name">Vuex<span class="token punctuation">.</span>Store</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在项目入口文件 main.js 中引入</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">import</span> store <span class="token keyword">from</span> <span class="token string">'./store'</span><span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    el<span class="token punctuation">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span>    router<span class="token punctuation">,</span>    store<span class="token punctuation">,</span>    <span class="token operator">...</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a href="https://coding.imooc.com/lesson/203.html#mid=13050" target="_blank" rel="noopener">课程对应章节</a>  <a href="https://coding.imooc.com/lesson/203.html#mid=13050" target="_blank" rel="noopener">vuex官方文档</a></p><h4 id="localStorage本地存储"><a href="#localStorage本地存储" class="headerlink" title="localStorage本地存储"></a>localStorage本地存储</h4><p>localStorage是HTML5 新提供的API，能提供类似cookie功能，做到本地存储，且比cookie更简单化。</p><p>注意： 使用localStorage时最好使用 try{}catch(e) {}包裹，因为在某些浏览器中用户关闭本地存储或者使用了隐身功能就会无法运行代码。</p><h4 id="vuex的高级使用"><a href="#vuex的高级使用" class="headerlink" title="vuex的高级使用"></a>vuex的高级使用</h4><p>定义Vuex的时候，可以吧statte，actions，mutations等参数的内容拆分出来。</p><p><strong>方法：</strong></p><ol><li>把state，actions，mutations的内容分别放在单独的js文件中</li><li>通过import引用到index.js中，并在index.js中定义vuex的选项</li></ol><h3 id="优化网页性能"><a href="#优化网页性能" class="headerlink" title="优化网页性能"></a>优化网页性能</h3><p>keep-alive 会把包裹的页面缓存起来，可以避免多次请求重复的数据。</p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>keep-alive</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>router-view</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>router-view</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>keep-alive</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>当路由的内容贾在国一次，就将其存放在内存中，下一次进入不需要重新渲染执行钩子函数，只需要在内存中取，避免多次请求重复的数据。</p><p>当引入keep-alive 的时候： </p><ol><li>页面第一次进入，钩子的触发顺序是 created-&gt; mounted -&gt; activated</li><li>再次进入（前进或者后退），只触发activated。</li><li>每次退出是触发 deactivated</li></ol>]]></content>
      
      
      <categories>
          
          <category> vue开发去哪儿网 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> router配置 </tag>
            
            <tag> axios使用 </tag>
            
            <tag> BetterScroll插件 </tag>
            
            <tag> 组件间传值 </tag>
            
            <tag> vuex </tag>
            
            <tag> 性能优化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>（二）项目首页开发</title>
      <link href="/archives/c59d20e1.html"/>
      <url>/archives/c59d20e1.html</url>
      
        <content type="html"><![CDATA[<h3 id="stylus在vue项目中的使用"><a href="#stylus在vue项目中的使用" class="headerlink" title="stylus在vue项目中的使用"></a>stylus在vue项目中的使用</h3><p>第一次使用stylus这个css预处理器，也不是很难和less差不多，主要的区别就是代码的书写规则不太一样（废话），可能还有其他的特性，学到的时候再说吧，现在就简单的记录，本次项目实战中的基本使用和一些问题。</p><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><p>终端中运行以下命令。<strong>注意：</strong>要重新启动编译项目</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> stylus -save// stylus 语法的解析器，webpack中的内容<span class="token function">npm</span> <span class="token function">install</span> stylus-loader -save<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h4><p>在组建中使用stylus编写样式，下面的就是基本的stylus语法，使用缩进表示层级。对于vsCode中stylus配置可以参考<a href="https://aurorablog.top/archives/78ae444f.html" target="_blank" rel="noopener">这篇文章</a></p><ul><li>lang表示使用哪种css预处理器</li><li>scoped 声明样式仅在该组件中有效</li></ul><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>stylus<span class="token punctuation">"</span></span> <span class="token attr-name">scoped</span><span class="token punctuation">></span></span><span class="token style language-css">    <span class="token number">.</span>header      <span class="token property">line-height</span><span class="token punctuation">:</span> <span class="token number">0.86</span>rem      <span class="token property">display</span><span class="token punctuation">:</span> flex      <span class="token property">background-color</span><span class="token punctuation">:</span> $bgColor      <span class="token property">color</span><span class="token punctuation">:</span> <span class="token hexcode">#fff</span>      <span class="token number">.</span>header-left        <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">0.64</span>rem        <span class="token property">float</span><span class="token punctuation">:</span> left        div          <span class="token property">text-align</span><span class="token punctuation">:</span> center          <span class="token property">font-size</span><span class="token punctuation">:</span> <span class="token number">0.36</span>rem</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="使用rem"><a href="#使用rem" class="headerlink" title="使用rem"></a>使用rem</h4><p>初始化样式中设置页面根元素的字体大小为 50px，所以在本项目中：1rem = 50px。</p><h3 id="本项目中iconfont的使用方法"><a href="#本项目中iconfont的使用方法" class="headerlink" title="本项目中iconfont的使用方法"></a>本项目中iconfont的使用方法</h3><ol><li>官网：<a href="http://www.iconfont.cn/选择需要的icon" target="_blank" rel="noopener">http://www.iconfont.cn/选择需要的icon</a></li><li>需要引入下载后的这四种字体文件.eot.svg.ttf.woff及.css样式</li><li>在.css文件里修改ur1路径加入./iconfont/注意base64不用加</li><li>在main.js中加入 <code>import &#39;styles/iconfont.css&#39;</code></li><li>在Header.vue里面各个需要的div或者span标签中加入 <code>class=&quot;iconfon t&quot;</code>，中间写各个图标的复制码即可完成</li></ol><p>其他关于字体图标的使用，查看<a href="https://aurorablog.top/archives/9e385e6b.html" target="_blank" rel="noopener">这篇文章</a></p><h3 id="代码优化相关"><a href="#代码优化相关" class="headerlink" title="代码优化相关"></a>代码优化相关</h3><h4 id="添加全局颜色"><a href="#添加全局颜色" class="headerlink" title="添加全局颜色"></a>添加全局颜色</h4><blockquote><p>添加全局颜色，增强主题样式的可维护性：</p></blockquote><ol><li>在 styles 文件夹中增加 varibles.styl 文件里面写 <code>$bgColor=#00bcd4</code> ，之后在 Header.vue 中使用： <code>background：$bgColor</code>。</li><li>在 Header.vue 中的 style下加入 <code>@import&#39;~@/assets/styles/varible s.styl</code> 即可</li></ol><p><strong>注意：</strong></p><ol><li>.import 在 CSS 中前必须加 @。JS中不用加。</li><li>~@ 在引入CSS文件中表示 src 目录。</li><li>@ 在引入 js库的时候表示 src 目录。</li></ol><h4 id="自定义路径别名"><a href="#自定义路径别名" class="headerlink" title="自定义路径别名"></a>自定义路径别名</h4><p>在 build/webpack.base.conf.js 文件里，找到 <code>reslove</code></p><pre class="line-numbers language-js"><code class="language-js"> resolve<span class="token punctuation">:</span> <span class="token punctuation">{</span>    extensions<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'.js'</span><span class="token punctuation">,</span> <span class="token string">'.vue'</span><span class="token punctuation">,</span> <span class="token string">'.json'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    alias<span class="token punctuation">:</span> <span class="token punctuation">{</span>      <span class="token string">'vue$'</span><span class="token punctuation">:</span> <span class="token string">'vue/dist/vue.esm.js'</span><span class="token punctuation">,</span>      <span class="token string">'@'</span><span class="token punctuation">:</span> <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">'src'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token string">'styles'</span><span class="token punctuation">:</span> <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">'src/assets/styles'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>@就是这么定义的，styles是我们自己为 src/assets/styles 路径起的一个别名，后续就可以直接使用 styles 替代  src/assets/styles。优化了代码。</p><blockquote><p>注意修改路径代码后，会报错，重启项目就好了</p></blockquote><h3 id="轮播图"><a href="#轮播图" class="headerlink" title="轮播图"></a>轮播图</h3><h4 id="仓库代码分支"><a href="#仓库代码分支" class="headerlink" title="仓库代码分支"></a>仓库代码分支</h4><p>在实际的项目开发中，我们在实现不同的功能之前需要创建不同的分支，这样不仅有利于协同开发，还有利于保障项目结构清晰和完整。当局部分支出现错误的时候，不会影响到整个项目。</p><ol><li><p><strong>新建分支：</strong> 在github的仓库里面，找到Branch，新建一个分支名为 index-swiper。创建完成之后，线上的github仓库就会多一个 index-swiper 分支。</p><p><img src="/medias/loading.gif" data-original="https://gitee.com/aurorapic/BlogPic/raw/master/img/20200604163834.png" alt=""></p></li><li><p><strong>拉取分支：</strong> 新建分支完成之后，本地仓库并没有 index-swiper 分支，使用以下命令拉取分支，然后本地就有了 index-swiper </p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">git</span> pull <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p><strong>切换分支并编写相应的代码：</strong> </p><pre class="line-numbers language-bash"><code class="language-bash">// 查看当前所处分支<span class="token function">git</span> branch// 切换分支 <span class="token function">git</span> checkout index-swiper<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><strong>功能完成之后，在原分支上提交本地代码到线上仓库，然后切换到主分支主动合并其他分支：</strong></p><pre class="line-numbers language-bash"><code class="language-bash">// 提交当前分支到远程仓库<span class="token function">git</span> add <span class="token keyword">.</span><span class="token function">git</span> commit -m <span class="token string">'提交代码的描述'</span><span class="token function">git</span> push   // 提交到了远程仓库中的index-swiper分支// 切换到主分支<span class="token function">git</span> checkout master // 主分支合并刚才的index-swiper分支<span class="token function">git</span> merge index-swiper// 推送到线上主分支<span class="token function">git</span> push<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><blockquote><p>我在最后合并分支的时候，在git checkout master之后，发现刚刚编写的代码都没了，心里凉半截。。。后来才发现，是因为还没合并，而刚才的代码是在 index-swiper 这个分支上写的，所以，合并之前master分支当然没有刚刚编写的代码了。。</p></blockquote><h4 id="swiper插件的使用"><a href="#swiper插件的使用" class="headerlink" title="swiper插件的使用"></a>swiper插件的使用</h4><p><strong>安装：</strong> 跟随老师的版本</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> vue-awesome-swiper@2.6.7 --save<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p><a href="https://github.com/surmon-china/vue-awesome-swiper" target="_blank" rel="noopener">vue-awesome-swiper地址</a>，当前版本为4.11，有一定的差异，使用的时候可以查阅它提供的API或者百度。。</p></blockquote><h5 id="swiper相关的功能"><a href="#swiper相关的功能" class="headerlink" title="swiper相关的功能"></a>swiper相关的功能</h5><p>在data中返回一个 <code>options</code> 对象，用来配置swiper提供的内置方法。</p><pre class="line-numbers language-vue"><code class="language-vue"> data () {    return {      swiperOptions: { // swiper 标签中的 options 的属性值        pagination: '.swiper-pagination',  // 显示默认的小圆点        loop: true,  // 可以连贯的滑动        autoplay: 2000  // 设置自动播放 2s  },<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>更改小圆点的样式：</strong></p><p>首先可以通过审查元素的方式，找到小圆点对应的 样式类。 </p><p> 然后使用 &gt;&gt;&gt; 标签越过 scoped 标签的限制。应该也可以新建一个global.css，里面专门放置需要修改原插件中样式的内容。</p><pre class="line-numbers language-stylus"><code class="language-stylus"><span class="token selector">.warpper >>> .swiper-pagination-bullet-active</span>    <span class="token property-declaration"><span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token hexcode">#fff</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h5 id="解决页面加载过程中的抖动"><a href="#解决页面加载过程中的抖动" class="headerlink" title="解决页面加载过程中的抖动"></a>解决页面加载过程中的抖动</h5><p>swiper 外层加一个 div 包裹，并为 div 设置样式如下。</p><pre class="line-numbers language-stylus"><code class="language-stylus"><span class="token selector">.warpper</span>    <span class="token property-declaration"><span class="token property">overflow</span><span class="token punctuation">:</span> hidden</span>    <span class="token property-declaration"><span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">100%</span></span>    <span class="token property-declaration"><span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">0</span></span>    <span class="token property-declaration"><span class="token property">padding-bottom</span><span class="token punctuation">:</span> <span class="token number">30.4%</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>padding-bottom 的值是图片的高和宽的比例。</p><h3 id="icons图标导航区域"><a href="#icons图标导航区域" class="headerlink" title="icons图标导航区域"></a>icons图标导航区域</h3><h4 id="导航分页可滑动效果"><a href="#导航分页可滑动效果" class="headerlink" title="导航分页可滑动效果"></a>导航分页可滑动效果</h4><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>icons<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>swiper</span> <span class="token attr-name">:options</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>swiperOptions<span class="token punctuation">'</span></span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">touch-action</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>swiper-slide</span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>(page,index) in pages<span class="token punctuation">"</span></span> <span class="token attr-name">:key</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>index<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>icon<span class="token punctuation">"</span></span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>item in page<span class="token punctuation">"</span></span> <span class="token attr-name">:key</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>item.id<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>icon-img<span class="token punctuation">"</span></span> <span class="token attr-name">:src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>item.imgUrl<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>{{item.desc}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>swiper-slide</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>swiper</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>  name<span class="token punctuation">:</span> <span class="token string">'HomeIcons'</span><span class="token punctuation">,</span>  data <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span>      swiperOptions<span class="token punctuation">:</span> <span class="token punctuation">{</span>        autoplay<span class="token punctuation">:</span> <span class="token boolean">false</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  props<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'iconsList'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  computed<span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// icons 分页</span>    pages <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">const</span> pages <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>iconsList<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>item<span class="token punctuation">,</span> index<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token keyword">const</span> page <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>index <span class="token operator">/</span> <span class="token number">8</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>pages<span class="token punctuation">[</span>page<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          pages<span class="token punctuation">[</span>page<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token punctuation">}</span>        pages<span class="token punctuation">[</span>page<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span>      <span class="token keyword">return</span> pages    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>通过计算属性pages，控制分页。当可视区域的icons图标多于8个就使用swiper组件包裹，控制内容的显示状态。效果如下：</p></blockquote><p><img src="/medias/loading.gif" data-original="https://gitee.com/aurorapic/BlogPic/raw/master/img/20200606232334.png" alt=""></p><h4 id="内容超出显示省略号"><a href="#内容超出显示省略号" class="headerlink" title="内容超出显示省略号"></a>内容超出显示省略号</h4><p>这个属于css的内容吧，很久没用了，记录一下。</p><pre class="line-numbers language-css"><code class="language-css"><span class="token property">overflow</span><span class="token punctuation">:</span> hidden<span class="token punctuation">;</span><span class="token property">white-space</span><span class="token punctuation">:</span> nowrap<span class="token punctuation">;</span><span class="token property">text-overflow</span><span class="token punctuation">:</span> ellipsis<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>可以把这种常用的代码封装到.styl文件中，以后使用可以直接调用。</p><pre class="line-numbers language-stylus"><code class="language-stylus"><span class="token func"><span class="token function">ellipsis</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>    <span class="token property-declaration"><span class="token property">overflow</span><span class="token punctuation">:</span> hidden</span>    <span class="token property-declaration"><span class="token property">white-space</span><span class="token punctuation">:</span> nowrap</span>    <span class="token property-declaration"><span class="token property">text-overflow</span><span class="token punctuation">:</span> ellipsis</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>在样式中引用该文件，然后在对应的位置直接引用该方法：</p><pre class="line-numbers language-stylus"><code class="language-stylus"><span class="token atrule-declaration"><span class="token atrule">@import</span> <span class="token string">'~style/ellipsis.styl'</span></span><span class="token selector">.item-content</span>  <span class="token func"><span class="token function">ellipsis</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>如果文字溢出不显示省略号，那么可以给 <strong>父元素</strong> 添加 <code>min-width: 0</code></p></blockquote><h3 id="使用axios发送ajax请求"><a href="#使用axios发送ajax请求" class="headerlink" title="使用axios发送ajax请求"></a>使用axios发送ajax请求</h3><h4 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h4><ol><li><p>安装axios</p><p><code>npm install axios --save</code></p></li><li><p>引入axios</p><p><code>import axios from &#39;axios&#39;</code></p></li><li><p>使用生命周期函数 mounted 获取 ajax 数据。mounted函数是在页面挂载完成之后执行。</p></li><li><p>请求url，此处数据为模拟后台数据。</p><p><code>axios.get(&#39;/api/index.json&#39;)</code></p></li><li><p>axios 返回的是 Promise 对象，可以使用 then 获取数据</p></li><li><p>模拟后台数据</p><p>在static文件夹下创建 mock 文件夹，添加 index.json 文件</p></li><li><p>我们不希望提交 static下面的文件。</p><p>需要在.gitignore文件中添加不需要提交的文件路径（static/mock）</p></li></ol><p><strong>【转发机制-代理】</strong></p><p><strong>需求：</strong>当请求地址为/api开头时，并没有这个路径，那么我们可以把该请求发送到本地的 /static/mock目录。</p><p><strong>目的：</strong>模拟真实路径防止上线后再修改请求路径而出现问题</p><p><strong>方法：</strong>在 config/index.js 里面的 dev -&gt; proxyTable中 设置如下：</p><pre class="line-numbers language-js"><code class="language-js">proxyTable<span class="token punctuation">:</span> <span class="token punctuation">{</span>      <span class="token string">'/api'</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>        target<span class="token punctuation">:</span> <span class="token string">'http://localhost:8080'</span><span class="token punctuation">,</span>        pathRewrite<span class="token punctuation">:</span> <span class="token punctuation">{</span>          <span class="token string">'^/api'</span><span class="token punctuation">:</span> <span class="token string">'/static/mock'</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/medias/loading.gif" data-original="https://gitee.com/aurorapic/BlogPic/raw/master/img/20200606235429.png" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> vue开发去哪儿网 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> stylus </tag>
            
            <tag> 单页面开发 </tag>
            
            <tag> 首页开发笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vsCode中自动格式化stylus设置</title>
      <link href="/archives/78ae444f.html"/>
      <url>/archives/78ae444f.html</url>
      
        <content type="html"><![CDATA[<p><strong>问题描述：</strong></p><p>vsCode中编写stylus，保存之后stylus代码会自动加上大括号和分号等，看着很不习惯。</p><p><strong>解决方案：</strong></p><p>先在拓展商店里下载 language-stylus 插件，然后在setting.json文件中加上以下配置：</p><pre class="line-numbers language-json"><code class="language-json"><span class="token property">"stylusSupremacy.insertColons"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> // 是否插入冒号<span class="token property">"stylusSupremacy.insertSemicolons"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> // 是否插入分好<span class="token property">"stylusSupremacy.insertBraces"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> // 是否插入大括号<span class="token property">"stylusSupremacy.insertNewLineAroundImports"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> // import之后是否换行<span class="token property">"stylusSupremacy.insertNewLineAroundBlocks"</span><span class="token operator">:</span> <span class="token boolean">false</span> // 两个选择器中是否换行<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>完成上述操作保存之后，就不会在保存代码的时候自动加上分号和大括号了。</p><p>本文转自：<a href="https://www.jianshu.com/p/7c7a6da24f97" target="_blank" rel="noopener">https://www.jianshu.com/p/7c7a6da24f97</a></p>]]></content>
      
      
      <categories>
          
          <category> vsCode配置 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> stylus格式化配置 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo: command not found解决方案</title>
      <link href="/archives/b2773bee.html"/>
      <url>/archives/b2773bee.html</url>
      
        <content type="html"><![CDATA[<p><strong>出现问题的原因是：</strong></p><p>我在做慕课网vue实战去哪儿网的时候，把npm的下载地址修改了，新修改的npm文件夹里面没有<code>hexo-cli</code> ,所以，找不到hexo命令。</p><p><strong>解决方案：</strong></p><p><code>npm install hexo-cli -g</code> 重新安装一下解决。</p><p>既然找不到了，那就重新安装呗。</p><p><strong>答案地址：</strong></p><p><a href="https://blog.csdn.net/whjkm/article/details/42675579" target="_blank" rel="noopener">这篇文章</a> <strong>的评论区里面</strong></p>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>(一)项目预热笔记</title>
      <link href="/archives/99c15171.html"/>
      <url>/archives/99c15171.html</url>
      
        <content type="html"><![CDATA[<h2 id="基本流程"><a href="#基本流程" class="headerlink" title="基本流程"></a>基本流程</h2><h2 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h2><h3 id="下载安装nodejs"><a href="#下载安装nodejs" class="headerlink" title="下载安装nodejs"></a>下载安装nodejs</h3><p><a href="https://www.cnblogs.com/zhouyu2017/p/6485265.html" target="_blank" rel="noopener">nodejs的配置相关参考</a></p><h3 id="注册远程仓库账号"><a href="#注册远程仓库账号" class="headerlink" title="注册远程仓库账号"></a>注册远程仓库账号</h3><p>课程里面老师要求注册码云账号，但一直都在使用github（虽然有时有点慢），就没有另外使用码云了。</p><h3 id="下载git并与远程仓库"><a href="#下载git并与远程仓库" class="headerlink" title="下载git并与远程仓库"></a>下载git并与远程仓库</h3><p>这部分之前也做过了，就直接过了。</p><h3 id="初始化项目时遇到的问题"><a href="#初始化项目时遇到的问题" class="headerlink" title="初始化项目时遇到的问题"></a>初始化项目时遇到的问题</h3><h4 id="脚手架安装问题"><a href="#脚手架安装问题" class="headerlink" title="脚手架安装问题"></a>脚手架安装问题</h4><p><strong>问题描述：</strong></p><p>在此项目之前我已经之前安装过了脚手架，但是是@vue/cli4.x版本的，而老师的项目用的是vue-cli2.x。为了避免学习过程中的兼容性等问题，我就准备使用与老师同样版本的vue-cli2.9.6。然后问题就来了：虽然可以安装vue-cli2.9.6，但是使用不了，并且之前的@vue/cli4.2.3也无法完全卸载，然后就很挠头了。。</p><p><strong>解决方案：</strong></p><p><a href="https://www.jianshu.com/p/ba7c078837f3" target="_blank" rel="noopener">参考文章</a></p><p><strong>原因:</strong></p><p>之前进行过node环境的配置，但是中间有些路径没有填写正确，导致后面卸载不掉新版的@vue/cli脚手架。实际上，其他工具包估计也会出现这个问题，但是，我没有注意过呀。。</p><p>原因: npm install -g @vue/cli 后， 我发现在 <code>C:\Users\Administrator\AppData\Roaming\npm\node_modules</code> 目录下多了一个@vue的文件夹。也就是说全局安装的文件都在这里！ 同时，npm uninstall vue-cli -g 也是删除的这里面的文件。</p><p><strong>解决：</strong></p><p>1.打开环境变量&gt;在用户变量中找到path,这里的的路径必须和你电脑 npm 的全局安装路径对应，原来我的之前路径写错了，所以就默认帮我装在C:\Users\Administrator\AppData\Roaming\npm中！ 现在我决定指定这个路径在D:\nodejs\node_global中（这里的node_global文件夹是我自己新建的）</p><p>2.接下来还有一点！系统变量中的NODE_PATH的路径必须和你是 npm 全局安装路径下的 node_modules,所以我这里填写的是D:\nodejs\node_global\node_modules</p><p>3.设置 npm 的默认安装路:</p><p> <code>$npm config set prefix &quot;D:\nodejs\node_global&quot;</code> //这里的路径必须是上面path对应！</p><p> <code>$npm config set cache &quot;D:\nodejs\node_cache&quot;</code>  //—这里是我自定义的缓存路径，也配置一下吧。</p><blockquote><p>注意：C:\Users\Administrator\AppData\Roaming\npm，，一般安装时，没修改 node 安装路径，默认的 npm 全局安装路径就在这里</p></blockquote><h4 id="npm-run-dev-报错"><a href="#npm-run-dev-报错" class="headerlink" title="npm run dev 报错"></a><code>npm run dev</code> 报错</h4><p><strong>webpack-dev-server错误法则：</strong></p><p>前往项目根目录删除node_modules文件夹，然后在项目根目录路径下的终端运行”npm install”等待安装完之后，再次运行“npm run dev”，有些人的是马上就可以了，然而往往还会有人（譬如我）仍然报类似的错误，这个时候你只需要再次重复相同的操作即可，“一次不成再删再安装”！！！</p><p>嗯，也是绝了，一次不行就多整几次，这部分参考<a href="https://blog.csdn.net/Leadyang/article/details/82705738" target="_blank" rel="noopener">这篇文章</a>。</p><h2 id="项目代码结构"><a href="#项目代码结构" class="headerlink" title="项目代码结构"></a>项目代码结构</h2><table><thead><tr><th align="center">目录/文件名</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">build</td><td align="center">存放项目打包的</td></tr><tr><td align="center">config</td><td align="center">项目配置文件</td></tr><tr><td align="center">-index.js</td><td align="center">基础配置信息</td></tr><tr><td align="center">-dev.env.js</td><td align="center">开发环境的配置</td></tr><tr><td align="center">prod.env.js</td><td align="center">线上环境配置信息</td></tr><tr><td align="center">node-nodules</td><td align="center">存放第三方node依赖包webpack的配置信息</td></tr><tr><td align="center">src</td><td align="center">整个项目源代码</td></tr><tr><td align="center">-main.js</td><td align="center">整个项目入口文件</td></tr><tr><td align="center">-App.vue</td><td align="center">项目中的根组件</td></tr><tr><td align="center">-router</td><td align="center">存放路由的文件夹里面有index.js文件</td></tr><tr><td align="center">-components</td><td align="center">项目中使用的小组件</td></tr><tr><td align="center">-assets</td><td align="center">存放项目图片资源</td></tr><tr><td align="center">static</td><td align="center">存放静态资源</td></tr><tr><td align="center">index.html</td><td align="center">默认首页模版文件</td></tr><tr><td align="center">.babelrc</td><td align="center">语法解析器配置项将vue转换成浏览器能执行的代码</td></tr><tr><td align="center">.editorconfig</td><td align="center">编辑器的配置项</td></tr><tr><td align="center">.eslintignore</td><td align="center">这里面的配置项不受.eslintrc.js的检测</td></tr><tr><td align="center">.eslintrc.js</td><td align="center">配置了一些代码的规范</td></tr><tr><td align="center">.gitignore</td><td align="center">配置不需要上传的文件</td></tr><tr><td align="center">.postcssrc.js</td><td align="center">postcss的配置文件</td></tr><tr><td align="center">LICENSE</td><td align="center">开源协议的说明</td></tr><tr><td align="center">package-lock.json-package</td><td align="center">锁文件确定第三方包的版本</td></tr><tr><td align="center">package.json</td><td align="center">存放依赖包</td></tr><tr><td align="center">README.md</td><td align="center">项目说明包</td></tr></tbody></table><h2 id="多页面应用VS单页面应用"><a href="#多页面应用VS单页面应用" class="headerlink" title="多页面应用VS单页面应用"></a>多页面应用VS单页面应用</h2><h3 id="多页面应用"><a href="#多页面应用" class="headerlink" title="多页面应用"></a>多页面应用</h3><p>每次页面跳转，后端返回一个新的html文档</p><p><strong>优点：</strong></p><ol><li>首屏时间快（页面首个屏幕的内容展现速度）</li><li>SEO效果好（搜索引擎可以识别首页中的跳转链接）</li></ol><p><strong>缺点：</strong></p><p>页面切换慢（每次跳转页面需要发送HTTP请求）</p><h3 id="单页面应用"><a href="#单页面应用" class="headerlink" title="单页面应用"></a>单页面应用</h3><p>JS 感知路由（URL）变化，动态清除页面内容并将新页面的内容挂到页面上（JS渲染），此时由前端实现路由</p><p><strong>优点：</strong></p><p>页面切换速度快</p><p><strong>缺点：</strong></p><p>JS首屏时间慢，SEO差</p><h2 id="项目代码初始化"><a href="#项目代码初始化" class="headerlink" title="项目代码初始化"></a>项目代码初始化</h2><h3 id="移动端视口标签配置"><a href="#移动端视口标签配置" class="headerlink" title="移动端视口标签配置"></a>移动端视口标签配置</h3><p>在 <code>index.html</code>的 <code>meta</code>标签上补充 <code>minimum-scale=1.0,maximum-scale=1.0,user-scalable=no</code>，设置屏幕的最小缩放比和最大缩放比，以及禁止用户随意调整视口的大小。或者直接覆盖对应的meta标签。更多移动端布局参考<a href="https://aurorablog.top/archives/fc8d666d.html" target="_blank" rel="noopener">这篇文章</a></p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>width<span class="token punctuation">=</span>device-width,user-scalable<span class="token punctuation">=</span>no,initial-scale<span class="token punctuation">=</span>1.0,maximum-scale<span class="token punctuation">=</span>1.0,minimum-scale<span class="token punctuation">=</span>1.0<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="引入初始化样式"><a href="#引入初始化样式" class="headerlink" title="引入初始化样式"></a>引入初始化样式</h3><p>作用：保证项目在不同设备之间显示效果一致。放到assets目录下的styles目录中，并在main.js中引用即可</p><h4 id="reset-css"><a href="#reset-css" class="headerlink" title="reset.css"></a>reset.css</h4><p><a href="https://github.com/qlHuo/studyDemo/blob/master/vueTravel/styles/reset.css" target="_blank" rel="noopener">reset.css</a>的主要作用是初始化项目样式，保证不同设备之间显示效果一致。</p><h4 id="border-css"><a href="#border-css" class="headerlink" title="border.css"></a>border.css</h4><p><a href="https://github.com/qlHuo/studyDemo/blob/master/vueTravel/styles/reset.css" target="_blank" rel="noopener">border.css</a>的主要作用是：解决某些设备多倍屏1像素边框显示问题。</p><h3 id="解决移动端300ms延迟问题"><a href="#解决移动端300ms延迟问题" class="headerlink" title="解决移动端300ms延迟问题"></a>解决移动端300ms延迟问题</h3><p>在项目文件中安装fastclick</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> fastclick --save<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在main.js中引入发射台Click，并进行配置如下：</p><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 引入fastClick文件</span><span class="token keyword">import</span> fastClick <span class="token keyword">from</span> <span class="token string">'fastclick'</span><span class="token comment" spellcheck="true">// 在项目中使用fastclick</span>fastClick<span class="token punctuation">.</span><span class="token function">attach</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span>body<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="iconfont-注册并创建项目"><a href="#iconfont-注册并创建项目" class="headerlink" title="iconfont 注册并创建项目"></a>iconfont 注册并创建项目</h3><p><a href="https://aurorablog.top/archives/9e385e6b.html" target="_blank" rel="noopener">参考这个文章</a></p>]]></content>
      
      
      <categories>
          
          <category> vue开发去哪儿网 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 项目笔记 </tag>
            
            <tag> 问题记录 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue过渡和动画</title>
      <link href="/archives/c8a837b6.html"/>
      <url>/archives/c8a837b6.html</url>
      
        <content type="html"><![CDATA[<h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>Vue在插入、更新或者移除DOM的时候，提供多种不同方式的应用<strong>过渡效果</strong>。包括以下几种工具：</p><ol><li>在CSS过渡和动画中自动应用class</li><li>可以配合使用第三方CSS动画库，如<a href="https://animate.style/" target="_blank" rel="noopener">Animate.css</a></li><li>在过渡钩子函数中使用JavaScript直接操作DOM</li><li>可以配合使用第三方JavaScript动画库，如<a href="http://www.velocityjs.org/" target="_blank" rel="noopener">Velocity.js</a></li></ol><h3 id="单元素-组件"><a href="#单元素-组件" class="headerlink" title="单元素 / 组件"></a>单元素 / 组件</h3><p>Vue提供了 <code>transition</code> 的封装组件，在下列情形下可以给任何元素或组件添加过渡</p><ul><li>条件渲染（使用 <code>v-if</code>）</li><li>条件展示（使用 <code>v-show</code> ）</li><li>动态组件</li><li>组件根节点</li></ul><h4 id="过渡效果"><a href="#过渡效果" class="headerlink" title="过渡效果"></a>过渡效果</h4><p>我的理解是过渡效果使用 <code>transition</code> 标签包裹，主要是根据css3中的 transition 属性实现，知识一种过渡的效果，参见<a href="https://www.w3school.com.cn/cssref/pr_transition.asp" target="_blank" rel="noopener">transition属性</a>，仅仅实现一个简单的过渡效果。</p><p>在VUE中的使用Demo：</p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style language-css">    <span class="token selector"><span class="token class">.fade-enter-active</span>, <span class="token class">.fade-leave-active</span> </span><span class="token punctuation">{</span>          <span class="token property">transition</span><span class="token punctuation">:</span> opacity <span class="token number">.5</span>s<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token selector"><span class="token class">.fade-enter</span>, <span class="token class">.fade-leave-to</span> </span><span class="token punctuation">{</span>          <span class="token property">opacity</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>demo<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name"><span class="token namespace">v-on:</span>click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>show <span class="token punctuation">=</span> !show<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    Toggle  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>transition</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>fade<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">v-if</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>show<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>hello<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>transition</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      el<span class="token punctuation">:</span> <span class="token string">'#demo'</span><span class="token punctuation">,</span>      data<span class="token punctuation">:</span> <span class="token punctuation">{</span>        show<span class="token punctuation">:</span> <span class="token boolean">true</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在需要设置<strong>过渡效果</strong>的标签外部用 <code>&lt;transition&gt;&lt;/transition&gt;</code> 包裹，可以添加 name 属性<br>1.没有name属性，css默认前缀是v，类名：<br>  隐藏到显示：第一帧 v-enter; v-enter-active，之后将v-enter清除，添加v-enter-to，最后一帧将所有的类名删掉<br>  显示到隐藏：第一帧v-leave；v-leave-active；之后将v-leave清除，添加v-leave-to，最后一帧将所有的类名删掉<br>2.有name属性时，css前缀为name的属性值</p><h5 id="过渡的类名"><a href="#过渡的类名" class="headerlink" title="过渡的类名"></a>过渡的类名</h5><p>在进入/离开的过渡中，会有6个class切换。</p><ol><li><code>v-enter</code>  定义进入过渡的开始状态。在元素被插入之前生效，在元素被插入之后的下一帧被清除。</li><li><code>v-enter-active</code>  定义进入过渡生效时的状态，在整个过渡阶段中被应用，过渡完成之后被移除。它可以被用来定义进入过渡的过程时间，延迟和曲线函数。</li><li><code>v-enter-to</code>  定义进入过渡状态的结束状态。在元素被插入的下一帧生效（与此同时 <code>v-enter</code> 被移除），在过渡完成之后被移除。</li><li><code>v-leave</code>：定义离开过渡的开始状态。在离开过渡被触发时立刻生效，下一帧被移除。</li><li><code>v-leave-active</code>：定义离开过渡生效时的状态。在整个离开过渡的阶段中应用，在离开过渡被触发时立刻生效，在过渡/动画完成之后移除。这个类可以被用来定义离开过渡的过程时间，延迟和曲线函数。</li><li><code>v-leave-to</code>：定义离开过渡的结束状态。在离开过渡被触发之后下一帧生效 (与此同时 <code>v-leave</code> 被删除)，在过渡/动画完成之后移除。</li></ol><p><img src="/medias/loading.gif" data-original="https://gitee.com/aurorapic/BlogPic/raw/master/img/20200601155622.png" alt=""></p><h4 id="CSS动画"><a href="#CSS动画" class="headerlink" title="CSS动画"></a>CSS动画</h4><p>CSS动画用法同CSS过渡，需要在使用动画的标签外部包裹一个 <code>transition</code>标签，但是动画效果是CSS中的@keyframes。如下例</p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style language-css">    <span class="token selector"><span class="token class">.bounce-enter-active</span> </span><span class="token punctuation">{</span>      <span class="token property">animation</span><span class="token punctuation">:</span> bounce-in <span class="token number">.5</span>s<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token selector"><span class="token class">.bounce-leave-active</span> </span><span class="token punctuation">{</span>      <span class="token property">animation</span><span class="token punctuation">:</span> bounce-in <span class="token number">.5</span>s reverse<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token atrule"><span class="token rule">@keyframes</span> bounce-in</span> <span class="token punctuation">{</span>      <span class="token selector">0% </span><span class="token punctuation">{</span>        <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">scale</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token selector">50% </span><span class="token punctuation">{</span>        <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">scale</span><span class="token punctuation">(</span><span class="token number">1.5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token selector">100% </span><span class="token punctuation">{</span>        <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">scale</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>example-2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>show <span class="token punctuation">=</span> !show<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Toggle show<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>transition</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>bounce<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">v-if</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>show<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Hello World<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>transition</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      el<span class="token punctuation">:</span> <span class="token string">'#example-2'</span><span class="token punctuation">,</span>      data<span class="token punctuation">:</span> <span class="token punctuation">{</span>        show<span class="token punctuation">:</span> <span class="token boolean">true</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="自定义动画的类名"><a href="#自定义动画的类名" class="headerlink" title="自定义动画的类名"></a>自定义动画的类名</h5><ul><li><code>enter-class</code></li><li><code>enter-active-class</code></li><li><code>enter-to-class</code></li><li><code>leave-class</code></li><li><code>leave-active-class</code></li><li><code>leave-to-class</code></li></ul><p><strong>注意：</strong></p><ol><li>如果 transition 标签中没有 <code>name</code> 属性，就默认在某些时刻自动添加上述的自定义类名；</li><li>如果 transition 标签中有 <code>name</code> 属性，就需要在自定义类名之前加上 name的前缀，具体的例子参照上面的代码</li></ol><h5 id="animate-css动画库的使用"><a href="#animate-css动画库的使用" class="headerlink" title="animate.css动画库的使用"></a>animate.css动画库的使用</h5><ol><li>下载并使用animate.css库</li><li>在需要动画效果的元素外层包裹 <code>&lt;transition&gt;&lt;/transition&gt;</code> 标签，可以加name属性，但相应的类名前缀为 name的属性值</li><li>给 transition 标签添加类名和值。<strong>最新版本需要在类名前面添加 <code>animate__</code> 前缀</strong><ol><li>进入的动画效果：如：<code>enter-active-class=&quot;animate__animated animate__bounce&quot;</code></li><li>进入的动画效果：如：<code>enter-active-class=&quot;animate__animated animate__bounce&quot;</code></li></ol></li></ol><blockquote><p><code>animate__animated</code> 表示引入的animate.css库； <code>animate__bounce</code> 表示引入的具体动画效果</p></blockquote><h5 id="appear属性"><a href="#appear属性" class="headerlink" title="appear属性"></a>appear属性</h5><p>如果想要一加载就有动画效果，需要为 <code>transition</code> 标签加入 <code>appear</code> 属性和自定义类 <code>appear-active-class=&quot;自定义动画类名&quot;</code></p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>transition</span>    <span class="token attr-name">appear</span>    <span class="token attr-name">appear-active-class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>animate__animated swing<span class="token punctuation">"</span></span>  <span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>transition</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="duration属性"><a href="#duration属性" class="headerlink" title="duration属性"></a>duration属性</h5><ol><li>同时存在过渡和其他动画，但时长不一样时，可以设置type属性来决定以谁为准，如：<code>type=&quot;transition&quot;</code> 则以过渡动画的时长为准</li><li>当要自定义时长时可以这样， <code>:duration=&quot;3000&quot;</code> 以毫秒计，这样的话不会以动画时长为准，而是自己定义的时长；更复杂点可以设置入场和出场动画时长，<code>:duration=&quot;{enter:5000, leave:10000}&quot;</code></li></ol><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>transition</span>    <span class="token attr-name">appear</span>    <span class="token attr-name">appear-active-class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>animate__animated swing<span class="token punctuation">"</span></span>      <span class="token attr-name">:duration</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>{enter: 5000, leave: 1000}<span class="token punctuation">'</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>transition</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="js动画效果"><a href="#js动画效果" class="headerlink" title="js动画效果"></a>js动画效果</h4><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>transition</span>  <span class="token attr-name"><span class="token namespace">v-on:</span>before-enter</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>beforeEnter<span class="token punctuation">"</span></span>  <span class="token attr-name"><span class="token namespace">v-on:</span>enter</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>enter<span class="token punctuation">"</span></span>  <span class="token attr-name"><span class="token namespace">v-on:</span>after-enter</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>afterEnter<span class="token punctuation">"</span></span>  <span class="token attr-name"><span class="token namespace">v-on:</span>enter-cancelled</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>enterCancelled<span class="token punctuation">"</span></span>  <span class="token attr-name"><span class="token namespace">v-on:</span>before-leave</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>beforeLeave<span class="token punctuation">"</span></span>  <span class="token attr-name"><span class="token namespace">v-on:</span>leave</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>leave<span class="token punctuation">"</span></span>  <span class="token attr-name"><span class="token namespace">v-on:</span>after-leave</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>afterLeave<span class="token punctuation">"</span></span>  <span class="token attr-name"><span class="token namespace">v-on:</span>leave-cancelled</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>leaveCancelled<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token comment" spellcheck="true">&lt;!-- ... --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>transition</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token comment" spellcheck="true">// ...</span>    methods<span class="token punctuation">:</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// --------</span>      <span class="token comment" spellcheck="true">// 进入中</span>      <span class="token comment" spellcheck="true">// --------</span>      beforeEnter<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>el<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// ...</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token comment" spellcheck="true">// 当与 CSS 结合使用时</span>      <span class="token comment" spellcheck="true">// 回调函数 done 是可选的</span>      enter<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>el<span class="token punctuation">,</span> done<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// ...</span>        <span class="token function">done</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      afterEnter<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>el<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// ...</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      enterCancelled<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>el<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// ...</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token comment" spellcheck="true">// --------</span>      <span class="token comment" spellcheck="true">// 离开时</span>      <span class="token comment" spellcheck="true">// --------</span>      beforeLeave<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>el<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// ...</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token comment" spellcheck="true">// 当与 CSS 结合使用时</span>      <span class="token comment" spellcheck="true">// 回调函数 done 是可选的</span>      leave<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>el<span class="token punctuation">,</span> done<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// ...</span>        <span class="token function">done</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      afterLeave<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>el<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// ...</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token comment" spellcheck="true">// leaveCancelled 只用于 v-show 中</span>      leaveCancelled<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>el<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// ...</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>当只用JavaScript过渡的时候，在 <code>enter</code> 和 <code>leave</code> 中必须使用 <code>done进行回调</code>，否则他们将被同步调用，过渡会立即完成。</p></blockquote><h5 id="Velocity-js的基本使用"><a href="#Velocity-js的基本使用" class="headerlink" title="Velocity.js的基本使用"></a>Velocity.js的基本使用</h5><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>example-4<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>show <span class="token punctuation">=</span> !show<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    Toggle  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>transition</span>    <span class="token attr-name"><span class="token namespace">v-on:</span>before-enter</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>beforeEnter<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">v-on:</span>enter</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>enter<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">v-on:</span>leave</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>leave<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">v-bind:</span>css</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span>  <span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">v-if</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>show<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      Demo    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>transition</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://cdnjs.cloudflare.com/ajax/libs/velocity/1.2.3/velocity.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      el<span class="token punctuation">:</span> <span class="token string">'#example-4'</span><span class="token punctuation">,</span>      data<span class="token punctuation">:</span> <span class="token punctuation">{</span>        show<span class="token punctuation">:</span> <span class="token boolean">false</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      methods<span class="token punctuation">:</span> <span class="token punctuation">{</span>        beforeEnter<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>el<span class="token punctuation">)</span> <span class="token punctuation">{</span>          el<span class="token punctuation">.</span>style<span class="token punctuation">.</span>opacity <span class="token operator">=</span> <span class="token number">0</span>          el<span class="token punctuation">.</span>style<span class="token punctuation">.</span>transformOrigin <span class="token operator">=</span> <span class="token string">'left'</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        enter<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>el<span class="token punctuation">,</span> done<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token function">Velocity</span><span class="token punctuation">(</span>el<span class="token punctuation">,</span> <span class="token punctuation">{</span> opacity<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> fontSize<span class="token punctuation">:</span> <span class="token string">'1.4em'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> duration<span class="token punctuation">:</span> <span class="token number">300</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>          <span class="token function">Velocity</span><span class="token punctuation">(</span>el<span class="token punctuation">,</span> <span class="token punctuation">{</span> fontSize<span class="token punctuation">:</span> <span class="token string">'1em'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> complete<span class="token punctuation">:</span> done <span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        leave<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>el<span class="token punctuation">,</span> done<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token function">Velocity</span><span class="token punctuation">(</span>el<span class="token punctuation">,</span> <span class="token punctuation">{</span> translateX<span class="token punctuation">:</span> <span class="token string">'15px'</span><span class="token punctuation">,</span> rotateZ<span class="token punctuation">:</span> <span class="token string">'50deg'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> duration<span class="token punctuation">:</span> <span class="token number">600</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>          <span class="token function">Velocity</span><span class="token punctuation">(</span>el<span class="token punctuation">,</span> <span class="token punctuation">{</span> rotateZ<span class="token punctuation">:</span> <span class="token string">'100deg'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> loop<span class="token punctuation">:</span> <span class="token number">2</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>          <span class="token function">Velocity</span><span class="token punctuation">(</span>el<span class="token punctuation">,</span> <span class="token punctuation">{</span>            rotateZ<span class="token punctuation">:</span> <span class="token string">'45deg'</span><span class="token punctuation">,</span>            translateY<span class="token punctuation">:</span> <span class="token string">'30px'</span><span class="token punctuation">,</span>            translateX<span class="token punctuation">:</span> <span class="token string">'30px'</span><span class="token punctuation">,</span>            opacity<span class="token punctuation">:</span> <span class="token number">0</span>          <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> complete<span class="token punctuation">:</span> done <span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="多个元素的过渡"><a href="#多个元素的过渡" class="headerlink" title="多个元素的过渡"></a>多个元素的过渡</h3><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>transition</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">v-if</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>p1<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>Hello<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">v-else</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>p2<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>Sorry, no items found.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>transition</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>对于原生的标签可以使用 <code>v-if/v-else</code> </p><blockquote><p>当有<strong>相同标签名</strong>的元素切换时，需要通过 <code>key</code> attribute 设置唯一的值来标记以让 Vue 区分它们，否则 Vue 为了效率只会替换相同标签内部的内容。即使在技术上没有必要，<strong>给在 <code>&lt;transition&gt;</code> 组件中的多个元素设置 key 是一个更好的实践。</strong></p></blockquote><h4 id="过渡模式"><a href="#过渡模式" class="headerlink" title="过渡模式"></a>过渡模式</h4><p>在<code>&lt;transition&gt;</code>中的mode属性设置，mode用于多组件或多元素之间的过渡</p><ol><li><code>mode=&quot;in-out&quot;</code>新元素先进行过渡，完成之后当前元素过渡离开。</li><li><code>mode=&quot;in-out&quot;</code>当前元素先进行过渡，完成之后新元素过渡进入，这个用的多一点</li></ol><h3 id="多个组件间的过渡"><a href="#多个组件间的过渡" class="headerlink" title="多个组件间的过渡"></a>多个组件间的过渡</h3><p>多个组件间的过渡只需要使用<strong>动态组件</strong>就可以实现</p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style language-css">    <span class="token selector"><span class="token class">.component-fade-enter-active</span>, <span class="token class">.component-fade-leave-active</span> </span><span class="token punctuation">{</span>      <span class="token property">transition</span><span class="token punctuation">:</span> opacity <span class="token number">.3</span>s ease<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token number">.</span>component-fade-enter, <span class="token number">.</span>component-fade-leave-to    <span class="token comment" spellcheck="true">/* .component-fade-leave-active for below version 2.1.8 */</span> <span class="token punctuation">{</span>      <span class="token property">opacity</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>transition</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>component-fade<span class="token punctuation">"</span></span> <span class="token attr-name">mode</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>out-in<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>component</span> <span class="token attr-name"><span class="token namespace">v-bind:</span>is</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>view<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>component</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>transition</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      el<span class="token punctuation">:</span> <span class="token string">'#transition-components-demo'</span><span class="token punctuation">,</span>      data<span class="token punctuation">:</span> <span class="token punctuation">{</span>        view<span class="token punctuation">:</span> <span class="token string">'v-a'</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      components<span class="token punctuation">:</span> <span class="token punctuation">{</span>        <span class="token string">'v-a'</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>          template<span class="token punctuation">:</span> <span class="token string">'&lt;div>Component A&lt;/div>'</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token string">'v-b'</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>          template<span class="token punctuation">:</span> <span class="token string">'&lt;div>Component B&lt;/div>'</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>使用动态组件<component>组件时，一定要在动态组件中绑定is属性用于组件的切换</p></blockquote><h3 id="列表过渡"><a href="#列表过渡" class="headerlink" title="列表过渡"></a>列表过渡</h3><p>实现方式：</p><ol><li>将列表项使用 <code>transition-group</code> 标签包裹</li><li>然后写css的样式，如 <code>v-enter</code>，<code>v-leave-to</code>，<code>v-enter-active</code>，<code>v-leave-active</code>等，与普通元素用法一致</li><li><code>transition-group</code>实现原理：相当于在每一个列表项增加一个<code>&lt;transition&gt;&lt;/transition&gt;</code>标签，所以用法基本等同于 <code>transition</code>的用法</li></ol><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style language-css">    <span class="token selector"><span class="token class">.list-item</span> </span><span class="token punctuation">{</span>      <span class="token property">display</span><span class="token punctuation">:</span> inline-block<span class="token punctuation">;</span>      <span class="token property">margin-right</span><span class="token punctuation">:</span> <span class="token number">10</span>px<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token selector"><span class="token class">.list-enter-active</span>, <span class="token class">.list-leave-active</span> </span><span class="token punctuation">{</span>      <span class="token property">transition</span><span class="token punctuation">:</span> all <span class="token number">1</span>s<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token number">.</span>list-enter, <span class="token number">.</span>list-leave-to    <span class="token comment" spellcheck="true">/* .list-leave-active for below version 2.1.8 */</span> <span class="token punctuation">{</span>      <span class="token property">opacity</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>      <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translateY</span><span class="token punctuation">(</span><span class="token number">30</span>px<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>list-demo<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>demo<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name"><span class="token namespace">v-on:</span>click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>add<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Add<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name"><span class="token namespace">v-on:</span>click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>remove<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Remove<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>transition-group</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>list<span class="token punctuation">"</span></span> <span class="token attr-name">tag</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>p<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>item in items<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">v-bind:</span>key</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>item<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>list-item<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      {{ item }}    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>transition-group</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      el<span class="token punctuation">:</span> <span class="token string">'#list-demo'</span><span class="token punctuation">,</span>      data<span class="token punctuation">:</span> <span class="token punctuation">{</span>        items<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        nextNum<span class="token punctuation">:</span> <span class="token number">10</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      methods<span class="token punctuation">:</span> <span class="token punctuation">{</span>        randomIndex<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">return</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token keyword">this</span><span class="token punctuation">.</span>items<span class="token punctuation">.</span>length<span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        add<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>items<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">randomIndex</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>nextNum<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        remove<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>items<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">randomIndex</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="动画函数封装"><a href="#动画函数封装" class="headerlink" title="动画函数封装"></a>动画函数封装</h3><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style language-css">    <span class="token selector"><span class="token class">.v-enter</span>, <span class="token class">.v-leave-to</span> </span><span class="token punctuation">{</span>        <span class="token property">opacity</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token selector"><span class="token class">.v-enter-active</span>, <span class="token class">.v-leave-active</span> </span><span class="token punctuation">{</span>        <span class="token property">transition</span><span class="token punctuation">:</span> opacity    <span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>root<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>fade</span> <span class="token attr-name">:show</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>show<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>Hello World<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>fade</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>handleBtnClick<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>toggle<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">    Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">'fade'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>        props<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'show'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        template<span class="token punctuation">:</span> <span class="token template-string"><span class="token string">`            &lt;transition>                &lt;slot v-if='show'>&lt;/slot>            &lt;/tansition>        `</span></span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token keyword">const</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        el<span class="token punctuation">:</span> <span class="token string">'#root'</span><span class="token punctuation">,</span>        data<span class="token punctuation">:</span> <span class="token punctuation">{</span>            show<span class="token punctuation">:</span> ture        <span class="token punctuation">}</span><span class="token punctuation">,</span>        methods<span class="token punctuation">:</span> <span class="token punctuation">{</span>            <span class="token function">handleClick</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>show <span class="token operator">=</span> <span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>show            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面的代码就简单的实现了一个动画的封装。</p><p><strong>注意：</strong></p><p>在封装的组件的slot插槽中，不可以使用v-show，因为slot只是一个占位符，本质上并不是一个真正的元素。而v-show是通过display属性进行显示或者隐藏的，由于slot实际上并不是一个元素，所以没有display属性，就不能够使用v-show来控制元素的显示或者隐藏。</p><blockquote><p>之前我把 <code>v-if</code> 底层当做是通过 <code>visibility: hidden;</code> 实现的，但是，他们只是效果一样，<code>v-if</code> 并不是通过css实现的。实际上<code>v-if</code> 有局部编译或卸载的过程，应当是基于 js 实现的；<code>v-show</code> 只是简单的 css 切换。这也说明了两者性能不同的原因。</p></blockquote><p>参考文章：<a href="https://cn.vuejs.org/v2/guide/transitions.html" target="_blank" rel="noopener">过渡&amp;动画</a></p>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 过渡和动画 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ref和$refs的用法</title>
      <link href="/archives/7f9d6afa.html"/>
      <url>/archives/7f9d6afa.html</url>
      
        <content type="html"><![CDATA[<h4 id="ref的作用"><a href="#ref的作用" class="headerlink" title="ref的作用"></a>ref的作用</h4><p>在Vue中一般很少直接操作DOM，但是有时会不可避免使用DOM，因此引入了ref属性来实现Vue中的DOM操作。</p><h4 id="ref应用的三种场景"><a href="#ref应用的三种场景" class="headerlink" title="ref应用的三种场景"></a>ref应用的三种场景</h4><blockquote><p><strong>ref 本身是作为渲染结果被创建的，在使用的时候要确保DOM已经渲染完成。比如在生命周期 mounted(){} 钩子中调用，或者在 this.$nextTick(()=&gt;{}) 中调用。</strong></p></blockquote><ol><li>ref 加在普通元素上，用 <code>this.$refs.ref值</code> 获取到的是DOM元素</li><li>ref 加在子组件上，在父组件用 <code>this.$refs.ref值</code> 获取到的是组件实例，可以使用组件的所有方法，在使用的时候直接加上 <code>this.$refs.ref值.方法名()</code>，就可以使用了</li><li>当 v-for 用于元素或组件的时候，引用信息将是包含DOM节点或组件实例的数组</li></ol><pre class="line-numbers language-vue"><code class="language-vue"><!-- `vm.$refs.p` will be the DOM node --><p ref="p">hello</p><!-- `vm.$refs.child` will be the child component instance --><child-component ref="child"></child-component><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="refs"><a href="#refs" class="headerlink" title="$refs"></a>$refs</h4><blockquote><p>$refs 是一个对象，持有已注册过 ref 的所有的子组件。</p></blockquote><p>案例：</p><pre class="line-numbers language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>width<span class="token punctuation">=</span>device-width, initial-scale<span class="token punctuation">=</span>1.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>X-UA-Compatible<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ie<span class="token punctuation">=</span>edge<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Document<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>./lib/vue-2.4.0.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>获取h3的值<span class="token punctuation">"</span></span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>getElement()<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>myh3<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>myh3<span class="token punctuation">"</span></span> <span class="token punctuation">></span></span>我是一个h3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>hr</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>login</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>mylogin<span class="token punctuation">'</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>login</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">        <span class="token keyword">var</span> login <span class="token operator">=</span> <span class="token punctuation">{</span>            template<span class="token punctuation">:</span> <span class="token string">"&lt;h3>我是login子组件&lt;/h3>"</span><span class="token punctuation">,</span>            <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token punctuation">{</span>                    msg<span class="token punctuation">:</span> <span class="token string">"ok"</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            methods<span class="token punctuation">:</span><span class="token punctuation">{</span>                <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"show方法执行了..."</span><span class="token punctuation">)</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">var</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>            el<span class="token punctuation">:</span> <span class="token string">"#app"</span><span class="token punctuation">,</span>            data<span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>            methods<span class="token punctuation">:</span> <span class="token punctuation">{</span>                <span class="token function">getElement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">// 通过 getElementById 方式获取 DOM 对象</span>                    <span class="token comment" spellcheck="true">// console.log(document.getElementById("myh3").innerHTML)</span>                    <span class="token comment" spellcheck="true">// console.log(this.$refs.myh3.innerHTML)</span>                    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>$refs<span class="token punctuation">.</span>mylogin<span class="token punctuation">.</span>msg<span class="token punctuation">)</span>                    <span class="token keyword">this</span><span class="token punctuation">.</span>$refs<span class="token punctuation">.</span>mylogin<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            components<span class="token punctuation">:</span><span class="token punctuation">{</span>                login            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>参考文章：</p><p><a href="https://blog.csdn.net/qq_38526573/article/details/98216037" target="_blank" rel="noopener">https://blog.csdn.net/qq_38526573/article/details/98216037</a></p><p><a href="https://blog.csdn.net/wh710107079/article/details/88243638" target="_blank" rel="noopener">https://blog.csdn.net/wh710107079/article/details/88243638</a></p>]]></content>
      
      
      <categories>
          
          <category> vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ref </tag>
            
            <tag> $refs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>瘦肉丸</title>
      <link href="/archives/866d5542.html"/>
      <url>/archives/866d5542.html</url>
      
        <content type="html"><![CDATA[<p>今天上午有事去县里，办完事之后，突然想起了曾经的瘦肉丸，于是“路过”过了学校。到了学校附近，发现所有的小商铺都很干净的排列着。就在我毕业那年，那些地方才慢慢的翻新，如今已经是大变模样了，甚至很多小店基本都迭代更新了。我就在想还有没有卖瘦肉丸的。。还好，到了哪里，发现还有两家，而且是以前曾经吃过的，于是我就进了印象最深的那家福鼎瘦肉丸的店。我一进门，才发现，这几年的物价真是上涨了。。以前一份都是5块钱，现在分为大小份，小份7块，大份9块。我要了一份小的，然后我竟然忘记要自己放料，经老板的提醒才想起来，原来自以为清晰而深刻的记忆终会随着时间慢慢的模糊忘却，最后可能只记得有这么一个会让我难以忘记的瘦肉丸，但却想不清关于它的细节。</p><p><img src="/medias/loading.gif" data-original="https://gitee.com/aurorapic/BlogPic/raw/master/img/20200522223520.png" alt=""></p><p>我记忆中的瘦肉丸是十分美味的，记得当时晚上放学后，学校门口得有一半的小吃摊是卖瘦肉丸。自然那几家味道很棒的基本都是里三层外三层那样，现在我只记得它当时的味道很好，却不知道现在是否还有当时的味道（也忘记当时的味儿了。。。）。很快就好了，第一口的时候，真的味道应该是一样的，还是那个味道！</p><p>真的，好几年了，感叹时光匆匆，也感慨物非人非。。。高中三年，也算是经历了许多，不管当时后来是美好或者残破，内心里仍然心念那里，心念那间教室，操场，花园，那几棵银杏树或许还有一些人。过去的两年，我每次放假回家总会翻看一下曾经的同学册，自己的记录，照片，以及留下的各种纪念性的小东西，每次看这些都能看几个小时。这次回来之后，就再也没有打开看过了。或许，我想念的并不是那些客观存在的东西，而是那时那地的感觉，嗯，仅仅是一种感觉，就像现在，一直呆在家，而暑假又将走出校园，我无比地怀念哈尔滨怀念黑科技（虽然我经常称它为苦寒之地），更多的只是一种感觉。</p><p>我一直告诉自己，过去终究是过去了，何必再想。我也尽量这么做，但是曾经的感觉仍然无法忘却，就像瘦肉丸，我记不得它的味道，但我记得它，当我再次遇见它我会想到曾经的感觉，只是曾经关于它的细节已经不重要了。青春，这一段时光会随着时间的流逝而结束，但是青春本身不会从生命中流走，它已经印在了我们的生命中。</p>]]></content>
      
      
      <categories>
          
          <category> 生活随记 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>element-UI级联选择框的使用问题</title>
      <link href="/archives/87b882ae.html"/>
      <url>/archives/87b882ae.html</url>
      
        <content type="html"><![CDATA[<h4 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h4><p>在做后台管理项目的时候，使用element-UI的级联选择框（el-cascader）渲染后台数据时，数据全部显示并且不能滚动。</p><p><img src="/medias/loading.gif" data-original="https://gitee.com/aurorapic/BlogPic/raw/master/img/20200516152533.png" alt=""></p><h4 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h4><p>一开始我以为是我的数据获取出错了，可是几次查看后发现并不是数据的原因。百度之后发现是由于element-UI版本的问题（视频教程是一年前的）。</p><p>当缩小浏览器窗口的时候，是可以滚动和选择的：</p><p><img src="/medias/loading.gif" data-original="https://gitee.com/aurorapic/BlogPic/raw/master/img/20200516153015.png" alt=""></p><p>最终的解决办法：</p><p>在引入的全局样式 global.css 中添加：</p><pre class="line-numbers language-css"><code class="language-css"><span class="token selector"><span class="token class">.el-cascader-panel</span> </span><span class="token punctuation">{</span>    <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">200</span>px<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="/medias/loading.gif" data-original="https://gitee.com/aurorapic/BlogPic/raw/master/img/20200516153407.png" alt=""></p><p>这个 <code>el-cascader-panel</code> 类是element-UI中定义的，是用来控制级联选择框的样式类。可以通过查看元素的方式找到。</p><p><img src="/medias/loading.gif" data-original="https://gitee.com/aurorapic/BlogPic/raw/master/img/20200516153534.png" alt=""></p><h4 id="级联选择器的基本使用"><a href="#级联选择器的基本使用" class="headerlink" title="级联选择器的基本使用"></a>级联选择器的基本使用</h4><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>template<span class="token operator">></span>  <span class="token operator">&lt;</span>el<span class="token operator">-</span>cascader    v<span class="token operator">-</span>model<span class="token operator">=</span><span class="token string">"selectedCateKeys"</span>    <span class="token punctuation">:</span>options<span class="token operator">=</span><span class="token string">"catelist"</span>    <span class="token punctuation">:</span>props<span class="token operator">=</span><span class="token string">"cateProps"</span>    @change<span class="token operator">=</span><span class="token string">"handleChange"</span><span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">/</span>el<span class="token operator">-</span>cascader<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span><span class="token operator">&lt;</span>script<span class="token operator">></span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>    data <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 商品分类列表</span>            catelist<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>            <span class="token comment" spellcheck="true">// 级联选择框的配置对象</span>            cateProps<span class="token punctuation">:</span> <span class="token punctuation">{</span>                value<span class="token punctuation">:</span> <span class="token string">'cat_id'</span><span class="token punctuation">,</span>                label<span class="token punctuation">:</span> <span class="token string">'cat_name'</span><span class="token punctuation">,</span>                children<span class="token punctuation">:</span> <span class="token string">'children'</span><span class="token punctuation">,</span>                expandTrigger<span class="token punctuation">:</span> <span class="token string">'hover'</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token comment" spellcheck="true">// 级联选择框双向绑定到的数组</span>            selectedCateKeys<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    methods<span class="token punctuation">:</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 级联选择框选中变化，会触发这个函数</span>        <span class="token function">handleChange</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>selectedCateKeys<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>options: 指定数据源，在data中应有对应的<strong>数组</strong>catelist；</li><li>props: 配置选项对象,在data中应有对应的<strong>对象</strong>cateProps;</li><li>v-model: 将选中的id的值双向绑定到对应的数组中selectedCateKeys;</li><li>change: 绑定了选择项改变事件，选择项改变时触发;</li><li>clearable：是否支持清空选项</li></ul><p><strong>props中常用的值</strong></p><ul><li>value: 与v-model中的双向绑定挂钩，这里如果绑定了cat_id那么v-model中绑定的就是id指，value就是选中的分类的代名词;</li><li>label: 绑定看到的分类名字cat_name</li><li>children: 绑定所用的嵌套children</li><li>expandTrigger: 绑定触发的模式是点击还是触摸hover</li><li><code>checkStrictly: true</code> 单选选择任意一级选项</li></ul><p>参考文章：<a href="https://blog.csdn.net/Whoopsina/article/details/104998492" target="_blank" rel="noopener">https://blog.csdn.net/Whoopsina/article/details/104998492</a></p>]]></content>
      
      
      <categories>
          
          <category> 解决方案 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> element-UI </tag>
            
            <tag> 级联选择框 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>该睡觉了吧</title>
      <link href="/archives/dfeddf45.html"/>
      <url>/archives/dfeddf45.html</url>
      
        <content type="html"><![CDATA[<p>现在是2020年的5月14日，嗯，今天是许嵩生日。祝他生日快乐。然后，现在都五月份了，这一年就这么过去一半了，真的好快啊。最近在学习vue，学的迷迷糊糊的，简单的跟着视频敲还行，自己却实现不了一个简单的功能，虽然那些语法啥的也会，并不是很难，可是为什么写不出来呢。这马上就要实习了，之前投了几家，都了无音讯，今天，京东突然打了个电话，来了个面试，措不及防，很紧张也很兴奋，面试官挺好的，就是那种态度很好，问的问题也都是很基础的，但是，我觉得我可能也是答的不是很好，估计是不会有下一轮的面试了。但是呢，心中还是有一点点希望的，希望能够进入京东实习吧，谁知道呢，还是要再准备准备，万一真再来了呢。下午域名备案也通过了，就想着把博客托管到服务器，优化一下访问的速度（虽然也没几个人访问，但是还是想做好吧，把它当做一个项目来做吧）。然后，一个很大的问题是，我不会鸭，这可咋整？然后就百度呗，搜了几个教程，第一次是失败了，重新找，重新做。找到了一个挺好的教程，还是个大一的好像，，哎，就挺好的，，，就照着部署到了腾讯云服务器，好像是成功了。但是，没办法同步到github，于是我又找到了一个教程，使用webhook来将github上的代码同步到云服务器。我得测试鸭，于是就新建了一篇文章，来测试能不能好使，对，就是这篇文章。本来我只想随便写写，谁知道写了这么多，那就不删了，留着吧。鸭，第二天了，不废话了，快点测试吧。。。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>解决vue-cli中Failed to compile问题</title>
      <link href="/archives/5855f867.html"/>
      <url>/archives/5855f867.html</url>
      
        <content type="html"><![CDATA[<h4 id="eslint语法校验"><a href="#eslint语法校验" class="headerlink" title="eslint语法校验"></a>eslint语法校验</h4><p>eslint作为JavaScript代码的校验工具，通常用来校验语法和规范开发人员的代码规范。</p><p><strong>优点</strong></p><ol><li>统一代码风格，如：代码缩进用几个空格；是否使用驼峰命名法来命名变量和函数名等。</li><li>减少错误，如：想比较必须用 === ，变量在使用前必须被声明，在条件语句中不能使用赋值语句等。</li><li>提高代码质量，如：函数最多有多少条分支，最多有几个参数，代码块最多能嵌套多少层等。</li></ol><p><strong>缺点</strong></p><p>缺点非常明显：太严格苛刻，像缩进、空格、空白行之类的规范，在开发过程中一直报错。</p><h4 id="解决vue-cli中Failed-to-compile"><a href="#解决vue-cli中Failed-to-compile" class="headerlink" title="解决vue-cli中Failed to compile"></a>解决vue-cli中Failed to compile</h4><ol><li><p>在配置vue-cli的时候，不安装eslint插件，<code>Use ESLint to lint your code? (Y/n)</code>,选择 n</p></li><li><p>找到 <code>.eslintc.js</code>,注释掉 <code>@vue/standard</code>,并且删除 <code>package.json</code> 中的 <code>*&quot;@vue/cli-plugin-eslint&quot;*: &quot;~4.3.0&quot;,</code></p><p><img src="/medias/loading.gif" data-original="https://gitee.com/aurorapic/BlogPic/raw/master/img/20200508235519.png" alt=""></p><p><img src="/medias/loading.gif" data-original="https://gitee.com/aurorapic/BlogPic/raw/master/img/20200508235756.png" alt=""></p></li><li><p>在可视化工具中找到 任务-&gt;lint选项，点击运行，自动修复源文件</p><p><img src="/medias/loading.gif" data-original="https://gitee.com/aurorapic/BlogPic/raw/master/img/20200509001018.png" alt=""></p></li></ol><p>参考文章：<a href="https://www.cnblogs.com/AmberNi/p/11698051.html" target="_blank" rel="noopener">https://www.cnblogs.com/AmberNi/p/11698051.html</a></p><p>相关文章：<a href="https://www.jianshu.com/p/bfc7e7329cff" target="_blank" rel="noopener">https://www.jianshu.com/p/bfc7e7329cff</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>vue脚手架创建项目</title>
      <link href="/archives/50cd12cb.html"/>
      <url>/archives/50cd12cb.html</url>
      
        <content type="html"><![CDATA[<p>什么是vue/cli？它是vue官方提供的脚手架工具，它可以自动将项目所需要的环境、依赖等信息都配置好。</p><h3 id="1-使用命令行工具创建"><a href="#1-使用命令行工具创建" class="headerlink" title="1.使用命令行工具创建"></a>1.使用命令行工具创建</h3><h4 id="1-1-安装vue-cli"><a href="#1-1-安装vue-cli" class="headerlink" title="1.1 安装vue/cli"></a>1.1 安装vue/cli</h4><p><code>npm install -g @vue/cli</code></p><h4 id="1-12-创建项目"><a href="#1-12-创建项目" class="headerlink" title="1.12 创建项目"></a>1.12 创建项目</h4><blockquote><p>项目名称尽量小写，如果有大写字幕可能会报错</p></blockquote><p><code>vue create &lt;projectname&gt;</code></p><h4 id="1-3-选择手动配置"><a href="#1-3-选择手动配置" class="headerlink" title="1.3 选择手动配置"></a>1.3 选择手动配置</h4><p><img src="/medias/loading.gif" data-original="https://gitee.com/aurorapic/BlogPic/raw/master/img/20200507213424.png" alt=""></p><p>使用键盘上下键切换，默认default配置不够项目的使用，通常选择 <code>Manually select features</code> 回车进入下一步。如果曾经创建过项目并且保存了配置可以直接使用创建项目。</p><h4 id="1-4-选择项目需要的配置项"><a href="#1-4-选择项目需要的配置项" class="headerlink" title="1.4 选择项目需要的配置项"></a>1.4 选择项目需要的配置项</h4><p><img src="/medias/loading.gif" data-original="https://gitee.com/aurorapic/BlogPic/raw/master/img/20200507214009.png" alt=""></p><p><img src="/medias/loading.gif" data-original="https://gitee.com/aurorapic/BlogPic/raw/master/img/20200507214249.png" alt=""></p><p>使用键盘上下键进行切换，空格键用来选中与取消，回车进入下一步。</p><h4 id="1-5-选择router模式"><a href="#1-5-选择router模式" class="headerlink" title="1.5 选择router模式"></a>1.5 选择router模式</h4><p><img src="/medias/loading.gif" data-original="https://gitee.com/aurorapic/BlogPic/raw/master/img/20200507214942.png" alt=""></p><p>不使用历史模式，使用hash模式，输入n。<a href="https://www.cnblogs.com/zhangnan35/p/10767251.html" target="_blank" rel="noopener">history和hash的比较</a></p><h4 id="1-6-ESLint配置"><a href="#1-6-ESLint配置" class="headerlink" title="1.6 ESLint配置"></a>1.6 ESLint配置</h4><p><img src="/medias/loading.gif" data-original="https://gitee.com/aurorapic/BlogPic/raw/master/img/20200507215447.png" alt=""></p><p><strong>选择标准配置</strong></p><h4 id="1-7-选择代码检查时间点"><a href="#1-7-选择代码检查时间点" class="headerlink" title="1.7 选择代码检查时间点"></a>1.7 选择代码检查时间点</h4><p><img src="/medias/loading.gif" data-original="https://gitee.com/aurorapic/BlogPic/raw/master/img/20200507215647.png" alt=""></p><p>选择第一项<code>Lint on save</code>，在保存后就自动检验代码和格式。</p><h4 id="1-8-询问配置保存位置"><a href="#1-8-询问配置保存位置" class="headerlink" title="1.8 询问配置保存位置"></a>1.8 询问配置保存位置</h4><p><img src="/medias/loading.gif" data-original="https://gitee.com/aurorapic/BlogPic/raw/master/img/20200507215735.png" alt=""></p><p>询问是否将配置放在 package.json 文件中。推荐选第一项<code>In dedicated config files</code>，创建新的配置文件</p><h4 id="1-9-是否保存为预配置"><a href="#1-9-是否保存为预配置" class="headerlink" title="1.9 是否保存为预配置"></a>1.9 是否保存为预配置</h4><p><img src="/medias/loading.gif" data-original="https://gitee.com/aurorapic/BlogPic/raw/master/img/20200507215909.png" alt=""></p><p>询问是否将以上配置保存为预配置，就是1.3中的mypreset选项，设置为预配置以后可以更快的创建项目。如果输入y则保存预配置，否则不保存。</p><p><strong>上述过程完成之后，回车即开始创建项目……</strong></p><h4 id="1-10预览项目"><a href="#1-10预览项目" class="headerlink" title="1.10预览项目"></a>1.10预览项目</h4><p><img src="/medias/loading.gif" data-original="https://gitee.com/aurorapic/BlogPic/raw/master/img/20200507220505.png" alt=""></p><p>项目创建完毕之后，切换到文件目录，输入<code>npm run serve</code> 运行项目，打开 localhost：8080 预览项目</p><h3 id="2-使用可视化工具创建"><a href="#2-使用可视化工具创建" class="headerlink" title="2. 使用可视化工具创建"></a>2. 使用可视化工具创建</h3><h4 id="2-1-打开可视化面板"><a href="#2-1-打开可视化面板" class="headerlink" title="2.1 打开可视化面板"></a>2.1 打开可视化面板</h4><p>输入 <code>vue ui</code> 命令，打开可视化面板。</p><p><img src="/medias/loading.gif" data-original="https://gitee.com/aurorapic/BlogPic/raw/master/img/20200507221205.png" alt=""></p><h4 id="2-2-打开Vue项目管理器"><a href="#2-2-打开Vue项目管理器" class="headerlink" title="2.2 打开Vue项目管理器"></a>2.2 打开Vue项目管理器</h4><p>点击“创建”，选择合适的位置创建一个项目，后续步骤的选择，同命令行选项配置一致。</p><h3 id="3-分析Vue脚手架生成的项目结构"><a href="#3-分析Vue脚手架生成的项目结构" class="headerlink" title="3. 分析Vue脚手架生成的项目结构"></a>3. 分析Vue脚手架生成的项目结构</h3><p>​    node_modules:        依赖包目录<br>​    public：                    静态资源目录<br>​    src：                         源码目录<br>​    src/assets:                资源目录<br>​    src/components：    组件目录<br>​    src/views:                 视图组件目录<br>​    src/App.vue:             根组件<br>​    src/main.js:              入口js<br>​    src/router.js:             路由js<br>​    babel.config.js:         babel配置文件<br>​    .eslintrc.js:</p><h3 id="4-Vue脚手架自定义配置"><a href="#4-Vue脚手架自定义配置" class="headerlink" title="4. Vue脚手架自定义配置"></a>4. Vue脚手架自定义配置</h3><ol><li><p>通过package.json进行配置【不推荐】</p><pre class="line-numbers language-json"><code class="language-json"><span class="token property">"vue"</span><span class="token operator">:</span><span class="token punctuation">{</span>    <span class="token property">"devServer"</span><span class="token operator">:</span><span class="token punctuation">{</span>        <span class="token property">"port"</span><span class="token operator">:</span><span class="token string">"9990"</span><span class="token punctuation">,</span>        <span class="token property">"open"</span><span class="token operator">:</span><span class="token boolean">true</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>通过单独的配置文件进行配置，在<strong>项目根目录</strong>下创建 <code>vue.config.js</code> </p><pre class="line-numbers language-js"><code class="language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>    devServer<span class="token punctuation">:</span><span class="token punctuation">{</span>        port<span class="token punctuation">:</span><span class="token number">8888</span><span class="token punctuation">,</span>        open<span class="token punctuation">:</span><span class="token boolean">true</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol>]]></content>
      
      
      <categories>
          
          <category> vue/cli </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 项目搭建 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端工程化-webpack基本使用</title>
      <link href="/archives/1865a78e.html"/>
      <url>/archives/1865a78e.html</url>
      
        <content type="html"><![CDATA[<h2 id="1-模块化的分类"><a href="#1-模块化的分类" class="headerlink" title="1.模块化的分类"></a>1.模块化的分类</h2><h3 id="1-1-浏览器端的模块化"><a href="#1-1-浏览器端的模块化" class="headerlink" title="1.1 浏览器端的模块化"></a>1.1 浏览器端的模块化</h3><ul><li><p>AMD(Asynchronous Moudule Definition,异步模块定义)</p><p>代表产品：Require.js</p></li><li><p>CMD(Common Module Definition，通用模块定义)</p><p>代表产品：Sea.js</p></li></ul><h3 id="1-2-服务器端的模块化"><a href="#1-2-服务器端的模块化" class="headerlink" title="1.2 服务器端的模块化"></a>1.2 服务器端的模块化</h3><p>​    服务器端的模块化规范是使用 CommonJS 规范：</p><ol><li>使用 require 引入其他模块或者包</li><li>使用 exports 或者 module.exports导出模块成员</li><li>一个文件就是一个模块，都拥有独立的作用域</li></ol><h3 id="1-3-ES6模块化"><a href="#1-3-ES6模块化" class="headerlink" title="1.3 ES6模块化"></a>1.3 ES6模块化</h3><p>ES6模块化规范中定义：</p><ol><li>每一个js文件都是一个独立的模块</li><li>导入模块成员使用 <code>import</code> 关键字</li><li>暴露模块成员使用 <code>exports</code>关键字</li></ol><blockquote><p>推荐使用ES6模块化，因为AMD，CMD局限使用于浏览器端，而CommonJS用于服务器端的使用。ES6模块化是浏览器端和客户端通用的规范。</p></blockquote><h4 id="1-3-1-Node-js通过babel体验es6模块化"><a href="#1-3-1-Node-js通过babel体验es6模块化" class="headerlink" title="1.3.1 Node.js通过babel体验es6模块化"></a>1.3.1 Node.js通过babel体验es6模块化</h4><h5 id="安装babel"><a href="#安装babel" class="headerlink" title="安装babel"></a>安装babel</h5><p>打开终端输入命令：</p><p><code>npm install --save-dev @babel/core @babel/cli @babel/preset-env @babel/node</code></p><p>安装完毕之后，再次输入：</p><p><code>npm install --save @babel/polyfill</code></p><h5 id="创建babel-config-js"><a href="#创建babel-config-js" class="headerlink" title="创建babel.config.js"></a>创建babel.config.js</h5><p>在项目根目录中创建babel.config.js，编辑js文件代码如下：</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">const</span> presets <span class="token operator">=</span> <span class="token punctuation">[</span>            <span class="token punctuation">[</span><span class="token string">"@babel/env"</span><span class="token punctuation">,</span><span class="token punctuation">{</span>                targets<span class="token punctuation">:</span><span class="token punctuation">{</span>                    edge<span class="token punctuation">:</span><span class="token string">"17"</span><span class="token punctuation">,</span>                    firefox<span class="token punctuation">:</span><span class="token string">"60"</span><span class="token punctuation">,</span>                    chrome<span class="token punctuation">:</span><span class="token string">"67"</span><span class="token punctuation">,</span>                    safari<span class="token punctuation">:</span><span class="token string">"11.1"</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">]</span>        <span class="token punctuation">]</span>        <span class="token comment" spellcheck="true">//暴露</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span> presets <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="创建index-js文件"><a href="#创建index-js文件" class="headerlink" title="创建index.js文件"></a>创建index.js文件</h5><p>在项目目录中创建index.js文件作为入口文件，在index.js中输入需要执行的js代码。例如：<code>console.log(&quot;ok&quot;);</code></p><h5 id="使用npx执行文件"><a href="#使用npx执行文件" class="headerlink" title="使用npx执行文件"></a>使用npx执行文件</h5><p>打开终端，输入命令：<code>npx babel-node ./index.js</code>，就能执行index.js中的代码。</p><h5 id="设置默认导入-导出"><a href="#设置默认导入-导出" class="headerlink" title="设置默认导入/导出"></a>设置默认导入/导出</h5><p><strong>默认导出</strong></p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>    成员A<span class="token punctuation">,</span>    成员B<span class="token punctuation">,</span>    ……<span class="token punctuation">}</span>demo：<span class="token keyword">let</span> num <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span><span class="token punctuation">{</span>    num<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>默认导入</strong></p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">import</span> 接收名称 <span class="token keyword">from</span> <span class="token string">"模块标识符"</span><span class="token comment" spellcheck="true">//如下：可以使用test.js中的内容</span><span class="token keyword">import</span> test <span class="token keyword">from</span> <span class="token string">"./test.js"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>注意：在一个模块中，只允许使用 <code>export defalut</code> 向外默认暴露一次成员，不要写多个 <code>export defalut</code>。如果在一个模块中没有向外暴露成员，其他模块引入该模块是将会得到一个空对象</p></blockquote><h5 id="设置按需导入-导出"><a href="#设置按需导入-导出" class="headerlink" title="设置按需导入/导出"></a>设置按需导入/导出</h5><p><strong>按需导出</strong></p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">let</span> num <span class="token operator">=</span> <span class="token number">998</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">let</span> myName <span class="token operator">=</span> <span class="token string">"jack"</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">function</span> fn <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"fn"</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>按需导入</strong></p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token punctuation">{</span> num<span class="token punctuation">,</span>fn <span class="token keyword">as</span> printFn <span class="token punctuation">,</span>myName <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"./test.js"</span><span class="token comment" spellcheck="true">//同时导入默认导出的成员以及按需导入的成员</span><span class="token keyword">import</span> test<span class="token punctuation">,</span><span class="token punctuation">{</span> num<span class="token punctuation">,</span>fn <span class="token keyword">as</span> printFn <span class="token punctuation">,</span>myName <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"./test.js"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><p>注意：一个模块中既可以按需导入也可以默认导入，一个模块中既可以按需导出也可以默认导出</p></blockquote><h5 id="直接导入并执行代码"><a href="#直接导入并执行代码" class="headerlink" title="直接导入并执行代码"></a>直接导入并执行代码</h5><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token string">"./test.js"</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="2-webpack"><a href="#2-webpack" class="headerlink" title="2. webpack"></a>2. webpack</h2><p>webpack提供了模块化支持，代码压缩混淆，解决js兼容问题，性能优化等特性，提高了开发效率和项目得可维护性。</p><h3 id="2-1-webpack的基本使用"><a href="#2-1-webpack的基本使用" class="headerlink" title="2.1 webpack的基本使用"></a>2.1 webpack的基本使用</h3><h4 id="1-创建项目目录并初始化"><a href="#1-创建项目目录并初始化" class="headerlink" title="1.创建项目目录并初始化"></a>1.创建项目目录并初始化</h4><p>创建项目目录，并在根目录下打开终端(cmd命令窗口)，输入命令：<code>npm init -y</code> 初始化项目。</p><h4 id="2-创建首页及js文件"><a href="#2-创建首页及js文件" class="headerlink" title="2.创建首页及js文件"></a>2.创建首页及js文件</h4><ol><li>在项目目录中创建 index.html文件页面，并初始化页面结构：在页面中新建ul,ul里面放入几个li</li><li>在项目目录中创建js文件，并在文件家中创建index.js文件</li></ol><h4 id="3-安装jQuery"><a href="#3-安装jQuery" class="headerlink" title="3.安装jQuery"></a>3.安装jQuery</h4><p>打开项目目录终端，输入命令： <code>npm install jquery -S</code>,安装jQuery库</p><h4 id="4-导入jQuery"><a href="#4-导入jQuery" class="headerlink" title="4.导入jQuery"></a>4.导入jQuery</h4><p>打开index.js文件，编写代码导入jQuery并实现功能：</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">import</span> $ <span class="token keyword">from</span> <span class="token string">'jquery'</span><span class="token punctuation">;</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"li:odd"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">css</span><span class="token punctuation">(</span><span class="token string">"background"</span><span class="token punctuation">,</span><span class="token string">"cyan"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"li:odd"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">css</span><span class="token punctuation">(</span><span class="token string">"background"</span><span class="token punctuation">,</span><span class="token string">"pink"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>此时项目运行会出错，因为 <code>import $ from &quot;jquery&quot;;</code> 属于ES6新的代码语法，在浏览器中可能会存在兼容性问题，所以我们需要<strong>webpack</strong>来解决这个问题。</p></blockquote><h4 id="5-安装webpack"><a href="#5-安装webpack" class="headerlink" title="5.安装webpack"></a>5.安装webpack</h4><ol><li><p>打开项目目录终端，输入命令：<code>npm install webpack webpack-cli -D</code></p></li><li><p>在项目根目录中，创建一个 <code>webpack.config.js</code> 文件，用来配置webpack:</p><p>在 <code>webpack.config.js</code> 文件中编写代码进行webpack配置，如下：</p><pre class="line-numbers language-javascript"><code class="language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//可以设置为development(开发模式)，production(发布模式)</span>  mode<span class="token punctuation">:</span><span class="token string">"development"</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>mode设置的是项目的编译模式</strong></p><p>如果设置为development则表示项目处于开发阶段，不会进行压缩和混淆，打包速度会快一些<br>如果设置为production则表示项目处于上线发布阶段，会进行压缩和混淆，打包速度会慢一些</p></li><li><p>修改项目中的 package.json 文件添加运行脚本 <code>dev</code></p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token string">"scripts"</span><span class="token punctuation">:</span><span class="token punctuation">{</span>   <span class="token string">"dev"</span><span class="token punctuation">:</span><span class="token string">"webpack"</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>注意：scripts节点下的脚本，可以通过 npm run 运行，如：<br>运行终端命令：<code>npm run dev</code><br>将会启动webpack进行项目打包</p></li><li><p>运行dev命令进行项目打包，并在页面中引入项目打包生成js文件</p><p>打开项目目录终端，输入命令： <code>npm run dev</code> </p><p>等待webpack打包完毕之后，找到默认的dist路径中生成的mian.js文件，将其引入到html页面中。</p></li></ol><h3 id="2-2设置webpack的打包入口-出口"><a href="#2-2设置webpack的打包入口-出口" class="headerlink" title="2.2设置webpack的打包入口/出口"></a>2.2设置webpack的打包入口/出口</h3><p>在webpack 4.x中，默认会将 src/idnex.js 作为默认的打包入口文件，默认会将 dist/main.js 作为默认的打包输出文件。</p><p>如果不想使用默认的入口/出口js文件，我们可以通过改变 <code>webpack.config.js</code> 来设置入口/出口的js文件，如下：</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"path"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>       mode<span class="token punctuation">:</span><span class="token string">"development"</span><span class="token punctuation">,</span>       <span class="token comment" spellcheck="true">//设置入口文件路径</span>       entry<span class="token punctuation">:</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span><span class="token string">"./src/xx.js"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>       <span class="token comment" spellcheck="true">//设置出口文件</span>       output<span class="token punctuation">:</span><span class="token punctuation">{</span>           <span class="token comment" spellcheck="true">//设置路径</span>           path<span class="token punctuation">:</span>path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span><span class="token string">"./dist"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>           <span class="token comment" spellcheck="true">//设置文件名</span>           filename<span class="token punctuation">:</span><span class="token string">"bundle.js"</span>       <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-3-设置webpack的自动打包"><a href="#2-3-设置webpack的自动打包" class="headerlink" title="2.3 设置webpack的自动打包"></a>2.3 设置webpack的自动打包</h3><p>默认情况下，我们更改入口js文件的代码，需要重新运行命令打包 webpack才能生成出口的js文件。每次都要重新执行命令打包，这是一个非常繁琐的事情，自动打包可以解决这样繁琐的操作。</p><p><strong>步骤如下：</strong></p><ol><li><p>安装自动打包功能的包：<code>npm install webpack-dev-server -D</code></p></li><li><p>修改 package.json 中的dev指令如下：</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token string">"scripts"</span><span class="token punctuation">:</span><span class="token punctuation">{</span>    <span class="token string">"dev"</span><span class="token punctuation">:</span><span class="token string">"webpack-dev-server"</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>将引入的js文件的路径更改为：<code>&lt;script src=&quot;/bundle.js&quot;&gt;&lt;/script&gt;</code></p></li><li><p>运行 <code>npm run dev</code>, 进行打包</p></li><li><p>打开网址查看效果：<a href="http://localhost:8080" target="_blank" rel="noopener">http://localhost:8080</a></p></li></ol><blockquote><p><code>webpack-dev-server</code> 自动打包的输出文件，默认放到了服务器的根目录中</p></blockquote><p><strong>补充：</strong>  在自动打包完毕之后，默认打开服务器网页，实现方式就是打开 <code>package.json</code> 文件中修改dev命令：</p><pre class="line-numbers language-javascript"><code class="language-javascript"> <span class="token string">"dev"</span><span class="token punctuation">:</span> <span class="token string">"webpack-dev-server --open --host 127.0.0.1 --port 9999"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="2-4配置html-webpack-plugin"><a href="#2-4配置html-webpack-plugin" class="headerlink" title="2.4配置html-webpack-plugin"></a>2.4配置html-webpack-plugin</h3><p>当我们访问默认的 <a href="http://localhost:8080/的时候，看到的是一些文件和文件夹，想要查看我们的页面，还需要点击文件夹点击文件才能查看，那么我们希望默认就能看到一个页面，而不是看到文件夹或者目录。" target="_blank" rel="noopener">http://localhost:8080/的时候，看到的是一些文件和文件夹，想要查看我们的页面，还需要点击文件夹点击文件才能查看，那么我们希望默认就能看到一个页面，而不是看到文件夹或者目录。</a></p><blockquote><p>使用html-webpack-plugin 可以生成一个预览页面</p></blockquote><p><strong>配置步骤：</strong></p><ol><li><p>安装默认预览功能的包：<code>npm install html-webpack-plugin -D</code></p></li><li><p>修改webpack.config.js文件，如下：</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//导入包</span>   <span class="token keyword">const</span> HtmlWebpackPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"html-webpack-plugin"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//创建对象</span>    <span class="token keyword">const</span> htmlPlugin <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HtmlWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//设置生成预览页面的模板文件</span>        template<span class="token punctuation">:</span><span class="token string">"./src/index.html"</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">//设置生成的预览页面名称</span>        filename<span class="token punctuation">:</span><span class="token string">"index.html"</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>继续修改webpack.config.js文件，添加plugins信息：</p><pre class="line-numbers language-javascript"><code class="language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token operator">...</span><span class="token operator">...</span>    plugins<span class="token punctuation">:</span><span class="token punctuation">[</span> htmlPlugin <span class="token punctuation">]</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h4 id="2-4-webpack中的加载器"><a href="#2-4-webpack中的加载器" class="headerlink" title="2.4 webpack中的加载器"></a>2.4 webpack中的加载器</h4><p>通过loader打包非js模块：默认情况下，webpack只能打包js文件，如果想要打包非js文件，需要调用loader加载器才能打包。</p><p><strong>loader的调用过程</strong></p><p><img src="/medias/loading.gif" data-original="https://gitee.com/aurorapic/BlogPic/raw/master/img/20200507124428.png" alt="loader的调用过程"></p><h5 id="1-打包处理css文件"><a href="#1-打包处理css文件" class="headerlink" title="1.打包处理css文件"></a>1.打包处理css文件</h5><ol><li><p>运行 <code>npm install style-loader css-loader -D</code> 命令，安装处理css文件的loader</p></li><li><p>在webpack.config.js的 module -&gt; rules数组中添加loader规则如下：</p><pre class="line-numbers language-javascript"><code class="language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token operator">...</span><span class="token operator">...</span>    plugins<span class="token punctuation">:</span><span class="token punctuation">[</span> htmlPlugin <span class="token punctuation">]</span><span class="token punctuation">,</span>    module <span class="token punctuation">:</span> <span class="token punctuation">{</span>        rules<span class="token punctuation">:</span><span class="token punctuation">[</span>            <span class="token comment" spellcheck="true">//test设置需要匹配的文件类型，支持正则</span>            <span class="token comment" spellcheck="true">//use表示该文件类型需要调用的loader</span>            <span class="token punctuation">{</span> test<span class="token punctuation">:</span><span class="token regex">/\.css$/</span><span class="token punctuation">,</span> use<span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token string">'style-loader'</span><span class="token punctuation">,</span><span class="token string">'css-loader'</span><span class="token punctuation">]</span> <span class="token punctuation">}</span>        <span class="token punctuation">]</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><blockquote><p>指定多个loader时的顺序是固定的，而<strong>调用loader的顺序是从后向前进行调用</strong></p></blockquote><h5 id="2-打包处理less文件"><a href="#2-打包处理less文件" class="headerlink" title="2.打包处理less文件"></a>2.打包处理less文件</h5><ol><li><p>运行 <code>npm i less-loader less -D</code> ，安装处理less的 loader</p></li><li><p>在webpack.config.js的 module -&gt; rules 数组中添加 loader 规则</p><pre class="line-numbers language-javascript"><code class="language-javascript"> module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>     <span class="token operator">...</span><span class="token operator">...</span>     plugins<span class="token punctuation">:</span><span class="token punctuation">[</span> htmlPlugin <span class="token punctuation">]</span><span class="token punctuation">,</span>     module <span class="token punctuation">:</span> <span class="token punctuation">{</span>         rules<span class="token punctuation">:</span><span class="token punctuation">[</span>             <span class="token punctuation">{</span> test<span class="token punctuation">:</span><span class="token regex">/\.css$/</span><span class="token punctuation">,</span> use<span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token string">'style-loader'</span><span class="token punctuation">,</span><span class="token string">'css-loader'</span><span class="token punctuation">]</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>             <span class="token punctuation">{</span> test<span class="token punctuation">:</span><span class="token regex">/\.less$/</span><span class="token punctuation">,</span>use<span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token string">'style-loader'</span><span class="token punctuation">,</span><span class="token string">'css-loader'</span><span class="token punctuation">,</span><span class="token string">'less-loader'</span><span class="token punctuation">]</span> <span class="token punctuation">}</span>         <span class="token punctuation">]</span>     <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h5 id="3-打包加载scss文件"><a href="#3-打包加载scss文件" class="headerlink" title="3.打包加载scss文件"></a>3.打包加载scss文件</h5><ol><li><p>运行 <code>npm i sass-loader node-sass -D</code> 命令，安装处理sass的loader</p></li><li><p>在webpack.config.js的 module -&gt; rules 数组中添加 loader 规则</p><pre class="line-numbers language-javascript"><code class="language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token operator">...</span><span class="token operator">...</span>    plugins<span class="token punctuation">:</span><span class="token punctuation">[</span> htmlPlugin <span class="token punctuation">]</span><span class="token punctuation">,</span>    module <span class="token punctuation">:</span> <span class="token punctuation">{</span>        rules<span class="token punctuation">:</span><span class="token punctuation">[</span>            <span class="token punctuation">{</span> test<span class="token punctuation">:</span><span class="token regex">/\.css$/</span><span class="token punctuation">,</span> use<span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token string">'style-loader'</span><span class="token punctuation">,</span><span class="token string">'css-loader'</span><span class="token punctuation">]</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token punctuation">{</span> test<span class="token punctuation">:</span><span class="token regex">/\.less$/</span><span class="token punctuation">,</span>use<span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token string">'style-loader'</span><span class="token punctuation">,</span><span class="token string">'css-loader'</span><span class="token punctuation">,</span><span class="token string">'less-loader'</span><span class="token punctuation">]</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token punctuation">{</span> test<span class="token punctuation">:</span><span class="token regex">/\.scss$/</span><span class="token punctuation">,</span> use<span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token string">'style-loader'</span><span class="token punctuation">,</span><span class="token string">'css-loader'</span><span class="token punctuation">,</span><span class="token string">'sass-loader'</span><span class="token punctuation">]</span> <span class="token punctuation">}</span>        <span class="token punctuation">]</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><blockquote><p>安装sass-loader失败时，大部分情况时因为网络问题，参考：<a href="https://blog.csdn.net/df981011512/article/details/78989532" target="_blank" rel="noopener">解决方案</a></p></blockquote><h5 id="4-配置postCSS自动添加css的兼容前缀"><a href="#4-配置postCSS自动添加css的兼容前缀" class="headerlink" title="4.配置postCSS自动添加css的兼容前缀"></a>4.配置postCSS自动添加css的兼容前缀</h5><ol><li><p>运行 <code>npm i postcss-loader autoprefixer -D</code> 命令，安装自动添加css兼容前缀的loader</p></li><li><p>在项目根目录中创建 postcss 的配置文件 postcss.config.js，并初始化如下：</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">const</span> autoprefixer <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"autoprefixer"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//挂载插件</span>    plugins<span class="token punctuation">:</span><span class="token punctuation">[</span> autoprefixer <span class="token punctuation">]</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>在webpack.config.js 的 module -&gt; rules 数组中修改css的loader规则</p><pre class="line-numbers language-javascript"><code class="language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token operator">...</span><span class="token operator">...</span>    plugins<span class="token punctuation">:</span><span class="token punctuation">[</span> htmlPlugin <span class="token punctuation">]</span><span class="token punctuation">,</span>    module <span class="token punctuation">:</span> <span class="token punctuation">{</span>        rules<span class="token punctuation">:</span><span class="token punctuation">[</span>            <span class="token comment" spellcheck="true">//直接在第一行，后面加上 'postcss-loader'   </span>            <span class="token punctuation">{</span> test<span class="token punctuation">:</span><span class="token regex">/\.css$/</span><span class="token punctuation">,</span> use<span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token string">'style-loader'</span><span class="token punctuation">,</span><span class="token string">'css-loader'</span><span class="token punctuation">,</span><span class="token string">'postcss-loader'</span><span class="token punctuation">]</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token operator">...</span><span class="token operator">...</span>        <span class="token punctuation">]</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h5 id="5-打包样式表中的图片以及字体文件"><a href="#5-打包样式表中的图片以及字体文件" class="headerlink" title="5.打包样式表中的图片以及字体文件"></a>5.打包样式表中的图片以及字体文件</h5><p>在样式表css中有时候会设置背景图片和设置字体文件，一样需要loader进行处理<br>使用url-loader和file-loader来处理打包图片文件以及字体文件</p><ol><li><p>运行 <code>npm install url-loader file-loader -D</code> 命令，配置打包图片和字体的loader</p></li><li><p>配置规则：更改 webpack.config.js的module 中的rules数组</p><pre class="line-numbers language-javascript"><code class="language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token operator">...</span><span class="token operator">...</span>    plugins<span class="token punctuation">:</span><span class="token punctuation">[</span> htmlPlugin <span class="token punctuation">]</span><span class="token punctuation">,</span>    module <span class="token punctuation">:</span> <span class="token punctuation">{</span>        rules<span class="token punctuation">:</span><span class="token punctuation">[</span>            <span class="token punctuation">{</span> test<span class="token punctuation">:</span><span class="token regex">/\.css$/</span><span class="token punctuation">,</span> use<span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token string">'style-loader'</span><span class="token punctuation">,</span><span class="token string">'css-loader'</span><span class="token punctuation">,</span><span class="token string">'postcss-loader'</span><span class="token punctuation">]</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token punctuation">{</span> test<span class="token punctuation">:</span><span class="token regex">/\.less$/</span><span class="token punctuation">,</span>use<span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token string">'style-loader'</span><span class="token punctuation">,</span><span class="token string">'css-loader'</span><span class="token punctuation">,</span><span class="token string">'less-loader'</span><span class="token punctuation">]</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token punctuation">{</span> test<span class="token punctuation">:</span><span class="token regex">/\.scss$/</span><span class="token punctuation">,</span> use<span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token string">'style-loader'</span><span class="token punctuation">,</span><span class="token string">'css-loader'</span><span class="token punctuation">,</span><span class="token string">'sass-loader'</span><span class="token punctuation">]</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>             <span class="token comment" spellcheck="true">//limit用来设置字节数，只有小于limit值的图片，才会转换为base64图片</span>            <span class="token punctuation">{</span> test<span class="token punctuation">:</span><span class="token regex">/\.jpg|png|gif|bmp|ttf|eot|svg|woff|woff2$/</span><span class="token punctuation">,</span>               use<span class="token punctuation">:</span><span class="token string">"url-loader?limit=16940"</span><span class="token punctuation">}</span>        <span class="token punctuation">]</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>limit用来指定图片的大小。单位是字节（byte），只有小于limit大小的图片，才会被转换为 base64 图片</p></blockquote></li></ol><h5 id="5-打包处理js文件中的高级语法"><a href="#5-打包处理js文件中的高级语法" class="headerlink" title="5.打包处理js文件中的高级语法"></a>5.打包处理js文件中的高级语法</h5><ol><li><p>安装babel转换器相关的包：<code>npm i babel-loader @babel/core @babel/runtime -D</code></p></li><li><p>安装babel语法插件相关的包：<code>npm install @babel/preset-env @babel/plugin-transform-runtime @babel/plugin-proposal-class-properties -D</code></p></li><li><p>在项目根目录中，创建babel配置文件 babel.config.js 并初始化基本配置：</p><pre class="line-numbers language-javascript"><code class="language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>        presets<span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token string">"@babel/preset-env"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        plugins<span class="token punctuation">:</span><span class="token punctuation">[</span> <span class="token string">"@babel/plugin-transform-runtime"</span><span class="token punctuation">,</span> <span class="token string">"@babel/plugin-proposal-class-properties"</span> <span class="token punctuation">]</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>在webpack.config.js的module -&gt; rules 数组中，添加loader规则如下</p><pre class="line-numbers language-javascript"><code class="language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token operator">...</span><span class="token operator">...</span>    plugins<span class="token punctuation">:</span><span class="token punctuation">[</span> htmlPlugin <span class="token punctuation">]</span><span class="token punctuation">,</span>    module <span class="token punctuation">:</span> <span class="token punctuation">{</span>        rules<span class="token punctuation">:</span><span class="token punctuation">[</span>            <span class="token punctuation">{</span> test<span class="token punctuation">:</span><span class="token regex">/\.css$/</span><span class="token punctuation">,</span> use<span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token string">'style-loader'</span><span class="token punctuation">,</span><span class="token string">'css-loader'</span><span class="token punctuation">,</span><span class="token string">'postcss-loader'</span><span class="token punctuation">]</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token punctuation">{</span> test<span class="token punctuation">:</span><span class="token regex">/\.less$/</span><span class="token punctuation">,</span>use<span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token string">'style-loader'</span><span class="token punctuation">,</span><span class="token string">'css-loader'</span><span class="token punctuation">,</span><span class="token string">'less-loader'</span><span class="token punctuation">]</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token punctuation">{</span> test<span class="token punctuation">:</span><span class="token regex">/\.scss$/</span><span class="token punctuation">,</span> use<span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token string">'style-loader'</span><span class="token punctuation">,</span><span class="token string">'css-loader'</span><span class="token punctuation">,</span><span class="token string">'sass-loader'</span><span class="token punctuation">]</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>             <span class="token comment" spellcheck="true">//limit用来设置字节数，只有小于limit值的图片，才会转换为base64图片</span>            <span class="token punctuation">{</span> test<span class="token punctuation">:</span><span class="token regex">/\.jpg|png|gif|bmp|ttf|eot|svg|woff|woff2$/</span><span class="token punctuation">,</span>               use<span class="token punctuation">:</span><span class="token string">"url-loader?limit=16940"</span><span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token punctuation">{</span>                test<span class="token punctuation">:</span><span class="token regex">/\.js$/</span><span class="token punctuation">,</span>                use<span class="token punctuation">:</span><span class="token string">"babel-loader"</span><span class="token punctuation">,</span>                <span class="token comment" spellcheck="true">//exclude为排除项，意思是不要处理node_modules中的js文件</span>                exclude<span class="token punctuation">:</span><span class="token regex">/node_modules/</span>            <span class="token punctuation">}</span>        <span class="token punctuation">]</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h2 id="3-Vue单文件组件"><a href="#3-Vue单文件组件" class="headerlink" title="3.Vue单文件组件"></a>3.Vue单文件组件</h2><p><strong>传统Vue组件的缺陷：</strong></p><ol><li>全局定义的组件不能重名</li><li>字符串模板缺乏语法高亮</li><li>不支持css（当html和js组件化时，css没有参与其中）</li><li>没有构建步骤限制，只能使用h5和es5,不能使用预处理器（babel）</li></ol><p><strong>解决方案：</strong></p><p>使用Vue单文件组件，每个单文件组件的后缀名都是 <code>.vue</code></p><h3 id="3-1Vue单文件组件的基本用法"><a href="#3-1Vue单文件组件的基本用法" class="headerlink" title="3.1Vue单文件组件的基本用法"></a>3.1Vue单文件组件的基本用法</h3><p><strong>单文件组件的组成结构</strong></p><ol><li>template 组件的模板区域</li><li>script 业务逻辑区域</li><li>style 样式区域</li></ol><pre class="line-numbers language-vue"><code class="language-vue"><template>    组件代码区域</template><script>    // 这里用于定义Vue组件的业务逻辑     export default {         // 私有数据        data: () {             return {}         },         methods: {}         // 处理函数         // ... 其它业务逻辑    }</script><style scoped>    样式代码区域</style><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>安装Vetur插件可以使得.vue文件中的代码高亮</p></blockquote><h3 id="3-2-webpack中配置vue组件的加载器"><a href="#3-2-webpack中配置vue组件的加载器" class="headerlink" title="3.2 webpack中配置vue组件的加载器"></a>3.2 webpack中配置vue组件的加载器</h3><ol><li><p>运行 <code>npm i vue-loader vue-template-compiler -D</code>命令，安装vue单文件loader</p></li><li><p>在webpack.config.js配置文件中，添加 <code>vue-loader</code> 的配置项如下</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">const</span> VueLoaderPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"vue-loader/lib/plugin"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> vuePlugin <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">VueLoaderPlugin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>        <span class="token operator">...</span><span class="token operator">...</span>         <span class="token comment" spellcheck="true">//确保引入这个vueloader插件   </span>        plugins<span class="token punctuation">:</span><span class="token punctuation">[</span> htmlPlugin<span class="token punctuation">,</span> vuePlugin  <span class="token punctuation">]</span><span class="token punctuation">,</span>        module <span class="token punctuation">:</span> <span class="token punctuation">{</span>            rules<span class="token punctuation">:</span><span class="token punctuation">[</span>                <span class="token comment" spellcheck="true">//其他规则</span>                <span class="token operator">...</span>                <span class="token punctuation">{</span> test<span class="token punctuation">:</span><span class="token regex">/\.vue$/</span><span class="token punctuation">,</span> loader<span class="token punctuation">:</span><span class="token string">"vue-loader"</span> <span class="token punctuation">}</span>            <span class="token punctuation">]</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h3 id="3-3-在webpack项目中使用vue"><a href="#3-3-在webpack项目中使用vue" class="headerlink" title="3.3 在webpack项目中使用vue"></a>3.3 在webpack项目中使用vue</h3><ol><li>运行 <code>npm install vue -S</code> 安装vue</li><li>在src -&gt; index.js 入口文件中，通过 <code>import Vue from &#39;vue&#39;</code>，来导入Vue构造函数</li><li>创建 vue 的实例对象，并指定要控制的 el 区域</li><li>通过 render 函数渲染 App 根组件</li></ol><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//1.导入 Vue构造函数</span><span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">"vue"</span><span class="token comment" spellcheck="true">//2.导入App根组件</span><span class="token keyword">import</span> App <span class="token keyword">from</span> <span class="token string">'./components/App.vue'</span><span class="token keyword">const</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//3.指定 vm 实例要控制的区域</span>    el<span class="token punctuation">:</span> <span class="token string">"#app"</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">//4.通过render函数，把指定的组件渲染到el区域中</span>    render<span class="token punctuation">:</span> h <span class="token operator">=</span><span class="token operator">></span> <span class="token function">h</span><span class="token punctuation">(</span>App<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-4webpack打包发布"><a href="#3-4webpack打包发布" class="headerlink" title="3.4webpack打包发布"></a>3.4webpack打包发布</h3><p>上线之前需要通过webpack将应用进行整体打包，可以通过package.json文件配置打包命令。通过：<code>npm run build</code> 命令打包发布</p><pre class="line-numbers language-json"><code class="language-json"><span class="token property">"scripts"</span><span class="token operator">:</span><span class="token punctuation">{</span>        <span class="token property">"dev"</span><span class="token operator">:</span><span class="token string">"webpack-dev-server"</span><span class="token punctuation">,</span>        <span class="token property">"build"</span><span class="token operator">:</span><span class="token string">"webpack -p"</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>在项目打包之前，可以将dis目录删除，生成全新的dist目录</p></blockquote><p>案例：<a href="https://github.com/qlHuo/studyDemo/tree/master/vueModelTest/12webpackDemo" target="_blank" rel="noopener">小案例</a></p>]]></content>
      
      
      <categories>
          
          <category> webpack </category>
          
      </categories>
      
      
        <tags>
            
            <tag> webpack </tag>
            
            <tag> es6模块化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue基础(五)-vue-router路由</title>
      <link href="/archives/5cc04f26.html"/>
      <url>/archives/5cc04f26.html</url>
      
        <content type="html"><![CDATA[<h3 id="路由的概念"><a href="#路由的概念" class="headerlink" title="路由的概念"></a>路由的概念</h3><p><strong>路由的本质</strong>是一种对应关系，比如：我们再浏览器地址栏中输入我们想要访问的url地址之后，浏览器要去请求这个url地址对应的资源。</p><p>路由分为前端路由和后端路由：</p><ol><li>后端路由是由服务器端进行实现，并完成资源的分发</li><li>前端路由是依靠hash值（锚链接）的变化进行实现</li></ol><p><strong>前端路由的基本概念：</strong></p><p>根据不同的事件来显示不同的页面内容，即事件与事件处理函数之间的对应关系。前端路由主要做的事情就是监听事件并分发执行事件处理函数。</p><h3 id="前端路由初体验"><a href="#前端路由初体验" class="headerlink" title="前端路由初体验"></a>前端路由初体验</h3><p>前端路由是基于hash值的变化进行实现的，比如点击页面中的菜单或者按钮改变URL的hash值，根据hash值的变化来控制组件的切换。</p><p>核心实现是依靠 <code>window.onhashchange</code> 事件来监听hash值变化</p><pre class="line-numbers language-javascript"><code class="language-javascript">window<span class="token punctuation">.</span>onhashchange <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//location.hash() 可以获取到最新的hash值</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>location<span class="token punctuation">.</span>hash<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>前端路由实现tab栏切换：</p><pre class="line-numbers language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!-- 被 vue 实例控制的 div 区域 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>     <span class="token comment" spellcheck="true">&lt;!-- 切换组件的超链接 --></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#/zhuye<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>主页<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#/keji<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>科技<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#/caijing<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>财经<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#/yule<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>娱乐<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- 根据 :is 属性指定的组件名称，把对应的组件渲染到 component 标签所在的位置 --></span>     <span class="token comment" spellcheck="true">&lt;!-- 可以把 component 标签当做是【组件的占位符】 --></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>component</span> <span class="token attr-name">:is</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>comName<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>component</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">        <span class="token comment" spellcheck="true">// #region 定义需要被切换的 4 个组件</span>        <span class="token comment" spellcheck="true">// 主页组件</span>        <span class="token keyword">const</span> zhuye <span class="token operator">=</span> <span class="token punctuation">{</span>            template<span class="token punctuation">:</span> <span class="token string">'&lt;h1>主页信息&lt;/h1>'</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 科技组件</span>        <span class="token keyword">const</span> keji <span class="token operator">=</span> <span class="token punctuation">{</span>            template<span class="token punctuation">:</span> <span class="token string">'&lt;h1>科技信息&lt;/h1>'</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 财经组件</span>        <span class="token keyword">const</span> caijing <span class="token operator">=</span> <span class="token punctuation">{</span>            template<span class="token punctuation">:</span> <span class="token string">'&lt;h1>财经信息&lt;/h1>'</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 娱乐组件</span>        <span class="token keyword">const</span> yule <span class="token operator">=</span> <span class="token punctuation">{</span>            template<span class="token punctuation">:</span> <span class="token string">'&lt;h1>娱乐信息&lt;/h1>'</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// #endregion</span>        <span class="token comment" spellcheck="true">// #region vue 实例对象</span>        <span class="token keyword">const</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>            el<span class="token punctuation">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span>            data<span class="token punctuation">:</span> <span class="token punctuation">{</span>            comName<span class="token punctuation">:</span> <span class="token string">'zhuye'</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token comment" spellcheck="true">// 注册私有组件</span>            components<span class="token punctuation">:</span> <span class="token punctuation">{</span>                zhuye<span class="token punctuation">,</span>                keji<span class="token punctuation">,</span>                caijing<span class="token punctuation">,</span>                yule            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">// #endregion</span>        <span class="token comment" spellcheck="true">// 监听 window 的 onhashchange 事件，根据获取到的最新的 hash 值，切换要显示的组件的名称</span>        window<span class="token punctuation">.</span>onhashchange <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 通过 location.hash 获取到最新的 hash 值</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>location<span class="token punctuation">.</span>hash<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">switch</span><span class="token punctuation">(</span>location<span class="token punctuation">.</span>hash<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">case</span> <span class="token string">'/zhuye'</span><span class="token punctuation">:</span>                vm<span class="token punctuation">.</span>comName <span class="token operator">=</span> <span class="token string">'zhuye'</span>            <span class="token keyword">break</span>            <span class="token keyword">case</span> <span class="token string">'/keji'</span><span class="token punctuation">:</span>                vm<span class="token punctuation">.</span>comName <span class="token operator">=</span> <span class="token string">'keji'</span>            <span class="token keyword">break</span>            <span class="token keyword">case</span> <span class="token string">'/caijing'</span><span class="token punctuation">:</span>                vm<span class="token punctuation">.</span>comName <span class="token operator">=</span> <span class="token string">'caijing'</span>            <span class="token keyword">break</span>            <span class="token keyword">case</span> <span class="token string">'/yule'</span><span class="token punctuation">:</span>                vm<span class="token punctuation">.</span>comName <span class="token operator">=</span> <span class="token string">'yule'</span>            <span class="token keyword">break</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Vue-Router"><a href="#Vue-Router" class="headerlink" title="Vue Router"></a>Vue Router</h3><ol><li>Vue Router 是Vue.js官方提供的路由管理器，功能更加强大</li><li>Vue Router 和 Vue.js非常契合，可以一起方便的实现SPA(single page web application,单页应用程序)的开发。</li><li>Vue Router依赖于 Vue，所以需要先引入vue.js，再引入Vue Router</li></ol><h4 id="vue-router的特性"><a href="#vue-router的特性" class="headerlink" title="vue-router的特性"></a>vue-router的特性</h4><ul><li>支持H5历史模式 或者 hash模式</li><li>支持嵌套路由</li><li>支持路由参数</li><li>支持编程式路由</li><li>支持命名路由</li><li>支持路由导肮守卫</li><li>支持路由过渡动画特效</li><li>支持路由懒加载</li><li>支持路由滚动行为</li></ul><h4 id="vue-router的使用步骤"><a href="#vue-router的使用步骤" class="headerlink" title="vue-router的使用步骤"></a>vue-router的使用步骤</h4><ol><li><p>导入js文件，先引入vue.js再引入vue-router.js</p></li><li><p>添加路由链接：<code>&lt;router-link to=&quot;&quot;&gt;</code> 是路由中提供的标签，默认会被渲染成为a标签，to属性默认被渲染成href属性，<strong>to属性的值会被渲染为#开头的hash地址</strong>。</p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>router-link</span> <span class="token attr-name">to</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/user<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>User<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>router-link</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>router-link</span> <span class="token attr-name">to</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/login<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Login<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>router-link</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>添加路由填充位（路由占位符）</p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>router-view</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>router-view</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>定义路由组件</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">var</span> User <span class="token operator">=</span> <span class="token punctuation">{</span> template<span class="token punctuation">:</span><span class="token string">"&lt;div>This is User&lt;/div>"</span> <span class="token punctuation">}</span><span class="token keyword">var</span> Login <span class="token operator">=</span> <span class="token punctuation">{</span> template<span class="token punctuation">:</span><span class="token string">"&lt;div>This is Login&lt;/div>"</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>配置路由规则并创建路由实例</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">var</span> myRouter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">VueRouter</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//routes是路由规则数组</span>    routes<span class="token punctuation">:</span><span class="token punctuation">[</span>        <span class="token comment" spellcheck="true">//每一个路由规则都是一个对象，对象中至少包含path和component两个属性</span>        <span class="token comment" spellcheck="true">//path表示  路由匹配的hash地址，component表示路由规则对应要展示的组件对象</span>        <span class="token punctuation">{</span>path<span class="token punctuation">:</span><span class="token string">"/user"</span><span class="token punctuation">,</span>component<span class="token punctuation">:</span>User<span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">{</span>path<span class="token punctuation">:</span><span class="token string">"/login"</span><span class="token punctuation">,</span>component<span class="token punctuation">:</span>Login<span class="token punctuation">}</span>    <span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>将路由挂载到Vue实例对象中</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    el<span class="token punctuation">:</span><span class="token string">"#app"</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">//通过router属性挂载路由对象</span>    router<span class="token punctuation">:</span>myRouter<span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><p><strong>路由重定向：</strong>可以通过 <code>redirect</code> 属性设置页面默认展示的组件</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">var</span> myRouter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">VueRouter</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//routes是路由规则数组</span>    routes<span class="token punctuation">:</span> <span class="token punctuation">[</span>    <span class="token comment" spellcheck="true">//path设置为/ 表示页面最初始的地址 / ,redirect表示要被重定向的新地址，设置为一个路由即可</span>        <span class="token punctuation">{</span> path<span class="token punctuation">:</span><span class="token string">"/"</span><span class="token punctuation">,</span>redirect<span class="token punctuation">:</span><span class="token string">"/user"</span><span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">{</span> path<span class="token punctuation">:</span> <span class="token string">"/user"</span><span class="token punctuation">,</span> component<span class="token punctuation">:</span> User <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">{</span> path<span class="token punctuation">:</span> <span class="token string">"/login"</span><span class="token punctuation">,</span> component<span class="token punctuation">:</span> Login <span class="token punctuation">}</span>    <span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="嵌套路由"><a href="#嵌套路由" class="headerlink" title="嵌套路由"></a>嵌套路由</h4><p>概念：当我们进行路由的时候显示的组件中还有新的子级路由链接以及内容。</p><p>嵌套路由最关键的代码在于理解子级路由的概念：使用 <code>children</code> 属性</p><pre class="line-numbers language-html"><code class="language-html">   <span class="token comment" spellcheck="true">&lt;!-- 被 vm 实例所控制的区域 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>router-link</span> <span class="token attr-name">to</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/user<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>User<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>router-link</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>router-link</span> <span class="token attr-name">to</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/register<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Register<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>router-link</span><span class="token punctuation">></span></span>      <span class="token comment" spellcheck="true">&lt;!-- 路由占位符 --></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>router-view</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>router-view</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span>      const User = {        template: '<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>User 组件<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>'      }      const Register = {        template: ` <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>Register 组件<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>hr</span><span class="token punctuation">/></span></span>          <span class="token comment" spellcheck="true">&lt;!-- 子路由链接 --></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>router-link</span> <span class="token attr-name">to</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/register/tab1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>tab1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>router-link</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>router-link</span> <span class="token attr-name">to</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/register/tab2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>tab2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>router-link</span><span class="token punctuation">></span></span>          <span class="token comment" spellcheck="true">&lt;!-- 子路由的占位符 --></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>router-view</span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span> `      }      const Tab1 = {        template: '<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span><span class="token punctuation">></span></span>tab1 子组件<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">></span></span>'      }      const Tab2 = {        template: '<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span><span class="token punctuation">></span></span>tab2 子组件<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">></span></span>'      }      // 创建路由实例对象      const router = new VueRouter({        // 所有的路由规则        routes: [          { path: '/', redirect: '/user'},          { path: '/user', component: User },          // children 数组表示子路由规则          { path: '/register', component: Register, children: [            { path: '/register/tab1', component: Tab1 },            { path: '/register/tab2', component: Tab2 }          ] }        ]      })      // 创建 vm 实例对象      const vm = new Vue({        // 指定控制的区域        el: '#app',        data: {},        // 挂载路由实例对象        // router: router        router      })    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="动态路由匹配"><a href="#动态路由匹配" class="headerlink" title="动态路由匹配"></a>动态路由匹配</h4><p><strong>$route.parmas</strong></p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">var</span> User <span class="token operator">=</span> <span class="token punctuation">{</span> template<span class="token punctuation">:</span><span class="token string">"&lt;div>用户：{{$route.params.id}}&lt;/div>"</span><span class="token punctuation">}</span><span class="token keyword">var</span> myRouter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">VueRouter</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//routes是路由规则数组</span>    routes<span class="token punctuation">:</span> <span class="token punctuation">[</span>        <span class="token comment" spellcheck="true">//通过/:参数名  的形式传递参数 </span>        <span class="token punctuation">{</span> path<span class="token punctuation">:</span> <span class="token string">"/user/:id"</span><span class="token punctuation">,</span> component<span class="token punctuation">:</span> User <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>props: true</strong></p><p>如果使用$route.params.id来获取路径传参的数据不够灵活。我们可以通过props来接受参数。</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">var</span> User <span class="token operator">=</span> <span class="token punctuation">{</span>     props<span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token string">"id"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    template<span class="token punctuation">:</span><span class="token string">"&lt;div>用户：{{id}}&lt;/div>"</span>    <span class="token punctuation">}</span><span class="token keyword">var</span> myRouter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">VueRouter</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//routes是路由规则数组</span>    routes<span class="token punctuation">:</span> <span class="token punctuation">[</span>        <span class="token comment" spellcheck="true">//通过/:参数名  的形式传递参数 </span>        <span class="token comment" spellcheck="true">//如果props设置为true，route.params将会被设置为组件属性</span>        <span class="token punctuation">{</span> path<span class="token punctuation">:</span> <span class="token string">"/user/:id"</span><span class="token punctuation">,</span> component<span class="token punctuation">:</span> User<span class="token punctuation">,</span>props<span class="token punctuation">:</span><span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>props设置为对象</strong></p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">var</span> User <span class="token operator">=</span> <span class="token punctuation">{</span>     props<span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token string">"username"</span><span class="token punctuation">,</span><span class="token string">"pwd"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    template<span class="token punctuation">:</span><span class="token string">"&lt;div>用户：{{username}}---{{pwd}}&lt;/div>"</span>    <span class="token punctuation">}</span><span class="token keyword">var</span> myRouter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">VueRouter</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//routes是路由规则数组</span>    routes<span class="token punctuation">:</span> <span class="token punctuation">[</span>        <span class="token comment" spellcheck="true">//通过/:参数名  的形式传递参数 </span>        <span class="token comment" spellcheck="true">//如果props设置为对象，则传递的是对象中的数据给组件</span>        <span class="token punctuation">{</span> path<span class="token punctuation">:</span> <span class="token string">"/user/:id"</span><span class="token punctuation">,</span> component<span class="token punctuation">:</span> User<span class="token punctuation">,</span>props<span class="token punctuation">:</span><span class="token punctuation">{</span>username<span class="token punctuation">:</span><span class="token string">"jack"</span><span class="token punctuation">,</span>pwd<span class="token punctuation">:</span><span class="token number">123</span><span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>props设置为函数</strong></p><blockquote><p>如果想要获取传递的参数值，同时还要获取传递的对象数据，那么 props 应该设置成为函数形式</p></blockquote><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">var</span> User <span class="token operator">=</span> <span class="token punctuation">{</span>     props<span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token string">"username"</span><span class="token punctuation">,</span><span class="token string">"pwd"</span><span class="token punctuation">,</span><span class="token string">"id"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    template<span class="token punctuation">:</span><span class="token string">"&lt;div>用户：{{id}} -> {{username}}---{{pwd}}&lt;/div>"</span>    <span class="token punctuation">}</span><span class="token keyword">var</span> myRouter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">VueRouter</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//routes是路由规则数组</span>    routes<span class="token punctuation">:</span> <span class="token punctuation">[</span>        <span class="token comment" spellcheck="true">//通过/:参数名  的形式传递参数 </span>        <span class="token comment" spellcheck="true">//如果props设置为函数，则通过函数的第一个参数获取路由对象</span>        <span class="token comment" spellcheck="true">//并可以通过路由对象的params属性获取传递的参数</span>        <span class="token comment" spellcheck="true">//</span>        <span class="token punctuation">{</span> path<span class="token punctuation">:</span> <span class="token string">"/user/:id"</span><span class="token punctuation">,</span> component<span class="token punctuation">:</span> User<span class="token punctuation">,</span>props<span class="token punctuation">:</span><span class="token punctuation">(</span>route<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token punctuation">{</span>username<span class="token punctuation">:</span><span class="token string">"jack"</span><span class="token punctuation">,</span>pwd<span class="token punctuation">:</span><span class="token number">123</span><span class="token punctuation">,</span>id<span class="token punctuation">:</span>route<span class="token punctuation">.</span>params<span class="token punctuation">.</span>id<span class="token punctuation">}</span>            <span class="token punctuation">}</span>         <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="命名路由"><a href="#命名路由" class="headerlink" title="命名路由"></a>命名路由</h4><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//添加了别名之后，可以使用别名进行跳转</span><span class="token operator">&lt;</span>router<span class="token operator">-</span>link to<span class="token operator">=</span><span class="token string">"/user"</span><span class="token operator">></span>User<span class="token operator">&lt;</span><span class="token operator">/</span>router<span class="token operator">-</span>link<span class="token operator">></span><span class="token operator">&lt;</span>router<span class="token operator">-</span>link <span class="token punctuation">:</span>to<span class="token operator">=</span><span class="token string">"{ name:'user' , params: {id:123} }"</span><span class="token operator">></span>User<span class="token operator">&lt;</span><span class="token operator">/</span>router<span class="token operator">-</span>link<span class="token operator">></span><span class="token keyword">var</span> myRouter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">VueRouter</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//routes是路由规则数组</span>    routes<span class="token punctuation">:</span> <span class="token punctuation">[</span>        <span class="token comment" spellcheck="true">//通过name属性为路由添加一个别名</span>        <span class="token punctuation">{</span> path<span class="token punctuation">:</span> <span class="token string">"/user/:id"</span><span class="token punctuation">,</span> component<span class="token punctuation">:</span> User<span class="token punctuation">,</span> name<span class="token punctuation">:</span><span class="token string">"user"</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="编程式导航"><a href="#编程式导航" class="headerlink" title="编程式导航"></a>编程式导航</h4><p>页面导航的两种方式：</p><ul><li>声明式导航：通过点击链接的方式实现导航</li><li>编程式导航：通过调用js的api实现导航</li></ul><p>vue-router中常见的导航方式</p><ol><li>this.$router.push(“hash地址”);<br>this.$router.push(“/login”);<br>this.$router.push({ name:’user’ , params: {id:123} });</li><li>this.$router.push({ path:”/login” });<br>this.$router.push({ path:”/login”,query:{username:”jack”} });</li><li>this.$router.go( n );//n为数字，参考history.go<br>this.$router.go( -1 );</li></ol><pre class="line-numbers language-html"><code class="language-html"> <span class="token comment" spellcheck="true">&lt;!-- 被 vm 实例所控制的区域 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>router-link</span> <span class="token attr-name">to</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/user/1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>User1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>router-link</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>router-link</span> <span class="token attr-name">to</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/user/2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>User2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>router-link</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>router-link</span> <span class="token attr-name">:to</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{ name: <span class="token punctuation">'</span>user<span class="token punctuation">'</span>, params: {id: 3} }<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>User3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>router-link</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>router-link</span> <span class="token attr-name">to</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/register<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Register<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>router-link</span><span class="token punctuation">></span></span>      <span class="token comment" spellcheck="true">&lt;!-- 路由占位符 --></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>router-view</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>router-view</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">      <span class="token keyword">const</span> User <span class="token operator">=</span> <span class="token punctuation">{</span>        props<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'id'</span><span class="token punctuation">,</span> <span class="token string">'uname'</span><span class="token punctuation">,</span> <span class="token string">'age'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        template<span class="token punctuation">:</span> <span class="token template-string"><span class="token string">`&lt;div>          &lt;h1>User 组件 -- 用户id为: {{id}} -- 姓名为:{{uname}} -- 年龄为：{{age}}&lt;/h1>          &lt;button @click="goRegister">跳转到注册页面&lt;/button>        &lt;/div>`</span></span><span class="token punctuation">,</span>        methods<span class="token punctuation">:</span> <span class="token punctuation">{</span>          <span class="token function">goRegister</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>$router<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">'/register'</span><span class="token punctuation">)</span>          <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token punctuation">}</span>      <span class="token keyword">const</span> Register <span class="token operator">=</span> <span class="token punctuation">{</span>        template<span class="token punctuation">:</span> <span class="token template-string"><span class="token string">`&lt;div>          &lt;h1>Register 组件&lt;/h1>          &lt;button @click="goBack">后退&lt;/button>        &lt;/div>`</span></span><span class="token punctuation">,</span>        methods<span class="token punctuation">:</span> <span class="token punctuation">{</span>          <span class="token function">goBack</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>$router<span class="token punctuation">.</span><span class="token function">go</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>          <span class="token punctuation">}</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span>      <span class="token comment" spellcheck="true">// 创建路由实例对象</span>      <span class="token keyword">const</span> router <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">VueRouter</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 所有的路由规则</span>        routes<span class="token punctuation">:</span> <span class="token punctuation">[</span>          <span class="token punctuation">{</span> path<span class="token punctuation">:</span> <span class="token string">'/'</span><span class="token punctuation">,</span> redirect<span class="token punctuation">:</span> <span class="token string">'/user'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>          <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 命名路由</span>            name<span class="token punctuation">:</span> <span class="token string">'user'</span><span class="token punctuation">,</span>            path<span class="token punctuation">:</span> <span class="token string">'/user/:id'</span><span class="token punctuation">,</span>            component<span class="token punctuation">:</span> User<span class="token punctuation">,</span>            props<span class="token punctuation">:</span> route <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">(</span><span class="token punctuation">{</span> uname<span class="token punctuation">:</span> <span class="token string">'zs'</span><span class="token punctuation">,</span> age<span class="token punctuation">:</span> <span class="token number">20</span><span class="token punctuation">,</span> id<span class="token punctuation">:</span> route<span class="token punctuation">.</span>params<span class="token punctuation">.</span>id <span class="token punctuation">}</span><span class="token punctuation">)</span>          <span class="token punctuation">}</span><span class="token punctuation">,</span>          <span class="token punctuation">{</span> path<span class="token punctuation">:</span> <span class="token string">'/register'</span><span class="token punctuation">,</span> component<span class="token punctuation">:</span> Register <span class="token punctuation">}</span>        <span class="token punctuation">]</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span>      <span class="token comment" spellcheck="true">// 创建 vm 实例对象</span>      <span class="token keyword">const</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 指定控制的区域</span>        el<span class="token punctuation">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span>        data<span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">// 挂载路由实例对象</span>        <span class="token comment" spellcheck="true">// router: router</span>        router      <span class="token punctuation">}</span><span class="token punctuation">)</span>    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>案例：<a href="https://github.com/qlHuo/studyDemo/tree/master/vueModelTest/11%E5%9F%BA%E4%BA%8Evue-router%E7%9A%84%E6%A1%88%E4%BE%8B" target="_blank" rel="noopener">基于vue-router的小案例</a></p>]]></content>
      
      
      <categories>
          
          <category> vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue-router </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue基础(四)-前后端交互接口调用</title>
      <link href="/archives/6dd1968.html"/>
      <url>/archives/6dd1968.html</url>
      
        <content type="html"><![CDATA[<h3 id="接口调用的方式"><a href="#接口调用的方式" class="headerlink" title="接口调用的方式"></a>接口调用的方式</h3><ul><li>原生ajax</li><li><a href="https://www.jianshu.com/p/d442a171100f" target="_blank" rel="noopener">基于jQuery的ajax</a></li><li>fetch</li><li>axios</li></ul><h3 id="异步"><a href="#异步" class="headerlink" title="异步"></a>异步</h3><p><strong>什么是单线程？</strong></p><p>JavaScript的执行环境是单线程。</p><p>所谓单线程，是指js引擎中负责解释和执行JavaScript代码的线程只有一个，也就是一次只能完成一项任务，当前任务执行完之后才能执行下一个，它会 <strong>阻塞</strong> 其它的任务。这个任务可称为<strong>主线程</strong>。</p><p>异步模式可以一起执行<strong>多个任务</strong>。</p><p><strong>js中常见的异步调用</strong></p><ol><li>定时器</li><li>ajax</li><li>事件函数</li></ol><h3 id="promise"><a href="#promise" class="headerlink" title="promise"></a>promise</h3><blockquote><p>主要解决异步深层嵌套的问题(回调地狱)，promise 提供了简洁的API，使得异步操作更加容易。</p></blockquote><p><strong>promise的基本使用：</strong></p><ol><li>我们使用new来构建一个Promise  Promise的构造函数接收一个参数，是函数，并且传入两个参数： resolve，reject， 分别表示异步操作执行成功后的回调函数和异步操作执行失败后的回调函数</li><li>Promise 实例生成以后，可以用then方法指定 <code>resolve</code> 状态和 <code>reject</code> 状态的回调函数 </li><li>在 <code>then</code> 方法中，你也可以直接 return 数据而不是 Promise 对象，在后面的 <code>then</code> 中就可以接收到数据了 </li></ol><pre class="line-numbers language-html"><code class="language-html">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token comment" spellcheck="true">/*     1. Promise基本使用     我们使用new来构建一个Promise  Promise的构造函数接收一个参数，是函数，并且传入两个参数： resolve，reject， 分别表示异步操作执行成功后的回调函数和异步操作执行失败后的回调函数    */</span>    <span class="token keyword">var</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">//2. 这里用于实现异步任务  setTimeout</span>      <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">var</span> flag <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token comment" spellcheck="true">//3. 正常情况</span>          <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">'hello'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>          <span class="token comment" spellcheck="true">//4. 异常情况</span>          <span class="token function">reject</span><span class="token punctuation">(</span><span class="token string">'出错了'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//  5 Promise实例生成以后，可以用then方法指定resolved状态和reject状态的回调函数 </span>    <span class="token comment" spellcheck="true">//  在then方法中，你也可以直接return数据而不是Promise对象，在后面的then中就可以接收到数据了  </span>    p<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span>info<span class="token punctuation">)</span><span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>info<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="基于Promise发送Ajax请求"><a href="#基于Promise发送Ajax请求" class="headerlink" title="基于Promise发送Ajax请求"></a>基于Promise发送Ajax请求</h4><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token comment" spellcheck="true">/*      基于Promise发送Ajax请求    */</span>    <span class="token keyword">function</span> <span class="token function">queryData</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 1.1 创建一个Promise实例</span>      <span class="token keyword">var</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">var</span> xhr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        xhr<span class="token punctuation">.</span>onreadystatechange <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>          <span class="token keyword">if</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>readyState <span class="token operator">!=</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>          <span class="token keyword">if</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>readyState <span class="token operator">==</span> <span class="token number">4</span> <span class="token operator">&amp;&amp;</span> xhr<span class="token punctuation">.</span>status <span class="token operator">==</span> <span class="token number">200</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 1.2 处理正常的情况</span>            <span class="token function">resolve</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>responseText<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 1.3 处理异常情况</span>            <span class="token function">reject</span><span class="token punctuation">(</span><span class="token string">'服务器错误'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>        xhr<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">'get'</span><span class="token punctuation">,</span> url<span class="token punctuation">)</span><span class="token punctuation">;</span>        xhr<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> p<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 注意：这里需要开启一个服务 </span>    <span class="token comment" spellcheck="true">// 在then方法中，你也可以直接return数据而不是Promise对象，在后面的then中就可以接收到数据了</span>    <span class="token function">queryData</span><span class="token punctuation">(</span><span class="token string">'http://localhost:3000/data'</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">// 1.4 想要继续链式编程下去 需要 return  </span>        <span class="token keyword">return</span> <span class="token function">queryData</span><span class="token punctuation">(</span><span class="token string">'http://localhost:3000/data1'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token function">queryData</span><span class="token punctuation">(</span><span class="token string">'http://localhost:3000/data2'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="Promise-基本API"><a href="#Promise-基本API" class="headerlink" title="Promise 基本API"></a>Promise 基本API</h4><h5 id="实例方法"><a href="#实例方法" class="headerlink" title="实例方法"></a>实例方法</h5><p><strong>.then()</strong></p><p>含义：得到异步任务正确的结果</p><p><strong>.catch()</strong></p><p>含义：获取异常信息</p><p><strong>.finally()</strong></p><p>成功与否都会执行</p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token comment" spellcheck="true">/*      Promise常用API-实例方法    */</span>    <span class="token comment" spellcheck="true">// console.dir(Promise);</span>    <span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>          <span class="token comment" spellcheck="true">// resolve(123);</span>          <span class="token function">reject</span><span class="token punctuation">(</span><span class="token string">'error'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// foo()</span>    <span class="token comment" spellcheck="true">//   .then(function(data){</span>    <span class="token comment" spellcheck="true">//     console.log(data)</span>    <span class="token comment" spellcheck="true">//   })</span>    <span class="token comment" spellcheck="true">//   .catch(function(data){</span>    <span class="token comment" spellcheck="true">//     console.log(data)</span>    <span class="token comment" spellcheck="true">//   })</span>    <span class="token comment" spellcheck="true">//   .finally(function(){</span>    <span class="token comment" spellcheck="true">//     console.log('finished')</span>    <span class="token comment" spellcheck="true">//   });</span>    <span class="token comment" spellcheck="true">// --------------------------</span>    <span class="token comment" spellcheck="true">// 两种写法是等效的</span>    <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 得到异步任务正确的结果</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">{</span>           <span class="token comment" spellcheck="true">// 获取异常信息</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span>      <span class="token comment" spellcheck="true">// 成功与否都会执行（不是正式标准） </span>      <span class="token punctuation">.</span><span class="token keyword">finally</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'finished'</span><span class="token punctuation">)</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="静态方法"><a href="#静态方法" class="headerlink" title="静态方法"></a>静态方法</h5><p><strong>.all()</strong></p><p><code>Promise.all()</code> 方法接收一个数组作为参数，数组中的对象 <code>(p1,p2,p3)</code> 均为 <code>promise</code> 实例。如果不是一个 promise， 该项会被用 <code>Promise.resolve</code> 转换为一个 promise。它的状态由这三个 promise 实例决定。</p><p><strong>所有的都会执行</strong></p><p><strong>.race()</strong></p><p><code>Promise.race</code> 方法同样接受一个数组作参数。当p1, p2, p3中有一个实例的状态发生改变（变为<code>fulfilled</code>或<code>rejected</code>），p的状态就跟着改变。并把第一个改变状态的promise的返回值，传给p的回调函数</p><p><strong>只要有一个触发，就返回</strong></p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token comment" spellcheck="true">/*      Promise常用API-对象方法    */</span>    <span class="token comment" spellcheck="true">// console.dir(Promise)</span>    <span class="token keyword">function</span> <span class="token function">queryData</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">var</span> xhr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        xhr<span class="token punctuation">.</span>onreadystatechange <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>          <span class="token keyword">if</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>readyState <span class="token operator">!=</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>          <span class="token keyword">if</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>readyState <span class="token operator">==</span> <span class="token number">4</span> <span class="token operator">&amp;&amp;</span> xhr<span class="token punctuation">.</span>status <span class="token operator">==</span> <span class="token number">200</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 处理正常的情况</span>            <span class="token function">resolve</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>responseText<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 处理异常情况</span>            <span class="token function">reject</span><span class="token punctuation">(</span><span class="token string">'服务器错误'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>        xhr<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">'get'</span><span class="token punctuation">,</span> url<span class="token punctuation">)</span><span class="token punctuation">;</span>        xhr<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">var</span> p1 <span class="token operator">=</span> <span class="token function">queryData</span><span class="token punctuation">(</span><span class="token string">'http://localhost:3000/a1'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> p2 <span class="token operator">=</span> <span class="token function">queryData</span><span class="token punctuation">(</span><span class="token string">'http://localhost:3000/a2'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> p3 <span class="token operator">=</span> <span class="token function">queryData</span><span class="token punctuation">(</span><span class="token string">'http://localhost:3000/a3'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     Promise<span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span><span class="token punctuation">[</span>p1<span class="token punctuation">,</span>p2<span class="token punctuation">,</span>p3<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">{</span>       <span class="token comment" spellcheck="true">//   all 中的参数[p1,p2,p3]和返回的结果一一对应["HELLO TOM", "HELLO JERRY", "HELLO SPIKE"]</span>       console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//["HELLO TOM", "HELLO JERRY", "HELLO SPIKE"]</span>     <span class="token punctuation">}</span><span class="token punctuation">)</span>    Promise<span class="token punctuation">.</span><span class="token function">race</span><span class="token punctuation">(</span><span class="token punctuation">[</span>p1<span class="token punctuation">,</span>p2<span class="token punctuation">,</span>p3<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 由于p1执行较快，Promise的then()将获得结果'P1'。p2,p3仍在继续执行，但执行结果将被丢弃。</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// "HELLO TOM"</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="fetch"><a href="#fetch" class="headerlink" title="fetch"></a>fetch</h3><ul><li>fetch API是新的ajax解决方法，fetch会返回promise</li><li>fetch不是ajax的进一步封装，而是原生js，没有使用XMLHttpRequest对象</li><li>语法：<code>fetch(url,options).then()</code></li></ul><pre class="line-numbers language-html"><code class="language-html">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token comment" spellcheck="true">/*    Fetch API 基本用法    fetch(url).then()    第一个参数请求的路径Fetch会返回Promise.所以我们可以使用then 拿到请求成功的结果     */</span>    <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">'http://localhost:3000/fdata'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// text()方法属于fetchAPI的一部分，它返回一个Promise实例对象，用于获取后台返回的数据</span>      <span class="token keyword">return</span> data<span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 在这个then里面我们能拿到最终的数据  </span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="fetch-API中的http请求"><a href="#fetch-API中的http请求" class="headerlink" title="fetch API中的http请求"></a>fetch API中的http请求</h4><ul><li><code>fetch(url,options).then()</code></li><li>HTTP协议，它给我们提供了很多的方法，如POST，GET，DELETE，UPDATE，PATCH和PUT<ul><li>默认是get请求</li><li>需要在options对象中指定对应的 method（method就是请求使用的方法）</li><li>post和普通请求的时候，需要在options中设置请求头 header 和 body</li></ul></li></ul><pre class="line-numbers language-html"><code class="language-html">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript">        <span class="token comment" spellcheck="true">/*              Fetch API 调用接口传递参数        */</span>       #<span class="token number">1.1</span> GET参数传递 <span class="token operator">-</span> 传统URL  通过url  ？ 的形式传参         <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">'http://localhost:3000/books?id=123'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>                # <span class="token keyword">get</span> 请求可以省略不写 默认的是GET                 method<span class="token punctuation">:</span> <span class="token string">'get'</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token punctuation">{</span>                # 它返回一个Promise实例对象，用于获取后台返回的数据                <span class="token keyword">return</span> data<span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token punctuation">{</span>                # 在这个then里面我们能拿到最终的数据                  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      #<span class="token number">1.2</span>  GET参数传递  restful形式的URL  通过<span class="token operator">/</span> 的形式传递参数  即  id <span class="token operator">=</span> <span class="token number">456</span> 和id后台的配置有关           <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">'http://localhost:3000/books/456'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>                # <span class="token keyword">get</span> 请求可以省略不写 默认的是GET                 method<span class="token punctuation">:</span> <span class="token string">'get'</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> data<span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token punctuation">{</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       #<span class="token number">2.1</span>  DELETE请求方式参数传递      删除id  是  id<span class="token operator">=</span><span class="token number">789</span>        <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">'http://localhost:3000/books/789'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>                method<span class="token punctuation">:</span> <span class="token string">'delete'</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> data<span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token punctuation">{</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       #<span class="token number">3</span> POST请求传参        <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">'http://localhost:3000/books'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>                method<span class="token punctuation">:</span> <span class="token string">'post'</span><span class="token punctuation">,</span>                # <span class="token number">3.1</span>  传递数据                 body<span class="token punctuation">:</span> <span class="token string">'uname=lisi&amp;pwd=123'</span><span class="token punctuation">,</span>                #  <span class="token number">3.2</span>  设置请求头                 headers<span class="token punctuation">:</span> <span class="token punctuation">{</span>                    <span class="token string">'Content-Type'</span><span class="token punctuation">:</span> <span class="token string">'application/x-www-form-urlencoded'</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> data<span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token punctuation">{</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       # POST请求传参        <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">'http://localhost:3000/books'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>                method<span class="token punctuation">:</span> <span class="token string">'post'</span><span class="token punctuation">,</span>                body<span class="token punctuation">:</span> JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span><span class="token punctuation">{</span>                    uname<span class="token punctuation">:</span> <span class="token string">'张三'</span><span class="token punctuation">,</span>                    pwd<span class="token punctuation">:</span> <span class="token string">'456'</span>                <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                headers<span class="token punctuation">:</span> <span class="token punctuation">{</span>                    <span class="token string">'Content-Type'</span><span class="token punctuation">:</span> <span class="token string">'application/json'</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> data<span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token punctuation">{</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        # PUT请求传参     修改id 是 <span class="token number">123</span> 的         <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">'http://localhost:3000/books/123'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>                method<span class="token punctuation">:</span> <span class="token string">'put'</span><span class="token punctuation">,</span>                body<span class="token punctuation">:</span> JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span><span class="token punctuation">{</span>                    uname<span class="token punctuation">:</span> <span class="token string">'张三'</span><span class="token punctuation">,</span>                    pwd<span class="token punctuation">:</span> <span class="token string">'789'</span>                <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                headers<span class="token punctuation">:</span> <span class="token punctuation">{</span>                    <span class="token string">'Content-Type'</span><span class="token punctuation">:</span> <span class="token string">'application/json'</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> data<span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token punctuation">{</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="fetch-API中响应格式"><a href="#fetch-API中响应格式" class="headerlink" title="fetch API中响应格式"></a>fetch API中响应格式</h4><p>用fetch来获取数据，如果响应正常返回，我们首先看到的是一个response对象，其中包括返回的一堆原始字节，这些字节需要在收到后，需要我们通过调用方法将其转换为相应格式的数据，比如 <code>JSON</code>,<code>BLOG</code>或者 <code>TEXT</code>等等</p><pre class="line-numbers language-javascript"><code class="language-javascript">     <span class="token comment" spellcheck="true">/*      Fetch响应结果的数据格式    */</span>    <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">'http://localhost:3000/json'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// return data.json();   //  将获取到的数据使用 json 转换对象</span>      <span class="token keyword">return</span> data<span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//  //  将获取到的数据 转换成字符串 </span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// console.log(data.uname)</span>      <span class="token comment" spellcheck="true">// console.log(typeof data)</span>      <span class="token keyword">var</span> obj <span class="token operator">=</span> JSON<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>uname<span class="token punctuation">,</span>obj<span class="token punctuation">.</span>age<span class="token punctuation">,</span>obj<span class="token punctuation">.</span>gender<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="axios"><a href="#axios" class="headerlink" title="axios"></a>axios</h3><ul><li>基于 promise 用于浏览器和node.js的http客户端，支持浏览器和node.js</li><li>支持promise</li><li>能拦截请求和响应</li><li>自动转换JSON数据</li><li>能转换请求和响应数据</li></ul><h4 id="axios基础用法"><a href="#axios基础用法" class="headerlink" title="axios基础用法"></a>axios基础用法</h4><ul><li>get 和 delete 请求传递参数<ul><li>通过传统的url以? 的形式传递参数</li><li>restful 形式传递参数</li><li>通过 parmas 形式传递参数</li></ul></li><li>post 和 put请求传递参数<ul><li>通过选项传递参数</li><li>通过 URLSearchParmas 传递参数</li></ul></li></ul><pre class="line-numbers language-javascript"><code class="language-javascript">   # <span class="token number">1</span><span class="token punctuation">.</span> 发送<span class="token keyword">get</span> 请求     axios<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'http://localhost:3000/adata'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>ret<span class="token punctuation">)</span><span class="token punctuation">{</span>       #  拿到 ret 是一个对象 所有的对象都存在 ret 的data 属性里面      <span class="token comment" spellcheck="true">// 注意data属性是固定的用法，用于获取后台的实际数据</span>      <span class="token comment" spellcheck="true">// console.log(ret.data)</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>ret<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    # <span class="token number">2</span><span class="token punctuation">.</span>  <span class="token keyword">get</span> 请求传递参数    # <span class="token number">2.1</span>  通过传统的url  以 <span class="token operator">?</span> 的形式传递参数    axios<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'http://localhost:3000/axios?id=123'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>ret<span class="token punctuation">)</span><span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>ret<span class="token punctuation">.</span>data<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    # <span class="token number">2.2</span>  restful 形式传递参数     axios<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'http://localhost:3000/axios/123'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>ret<span class="token punctuation">)</span><span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>ret<span class="token punctuation">.</span>data<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    # <span class="token number">2.3</span>  通过params  形式传递参数     axios<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'http://localhost:3000/axios'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>      params<span class="token punctuation">:</span> <span class="token punctuation">{</span>        id<span class="token punctuation">:</span> <span class="token number">789</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>ret<span class="token punctuation">)</span><span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>ret<span class="token punctuation">.</span>data<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    #<span class="token number">3</span> axios <span class="token keyword">delete</span> 请求传参  传参的形式和 <span class="token keyword">get</span> 请求一样    axios<span class="token punctuation">.</span><span class="token keyword">delete</span><span class="token punctuation">(</span><span class="token string">'http://localhost:3000/axios'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>      params<span class="token punctuation">:</span> <span class="token punctuation">{</span>        id<span class="token punctuation">:</span> <span class="token number">111</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>ret<span class="token punctuation">)</span><span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>ret<span class="token punctuation">.</span>data<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    # <span class="token number">4</span>  axios 的 post 请求    # <span class="token number">4.1</span>  通过选项传递参数    axios<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">'http://localhost:3000/axios'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>      uname<span class="token punctuation">:</span> <span class="token string">'lisi'</span><span class="token punctuation">,</span>      pwd<span class="token punctuation">:</span> <span class="token number">123</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>ret<span class="token punctuation">)</span><span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>ret<span class="token punctuation">.</span>data<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    # <span class="token number">4.2</span>  通过 URLSearchParams  传递参数     <span class="token keyword">var</span> params <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">URLSearchParams</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    params<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">'uname'</span><span class="token punctuation">,</span> <span class="token string">'zhangsan'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    params<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">'pwd'</span><span class="token punctuation">,</span> <span class="token string">'111'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    axios<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">'http://localhost:3000/axios'</span><span class="token punctuation">,</span> params<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>ret<span class="token punctuation">)</span><span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>ret<span class="token punctuation">.</span>data<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>     #<span class="token number">5</span>  axios put 请求传参   和 post 请求一样     axios<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">'http://localhost:3000/axios/123'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>      uname<span class="token punctuation">:</span> <span class="token string">'lisi'</span><span class="token punctuation">,</span>      pwd<span class="token punctuation">:</span> <span class="token number">123</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>ret<span class="token punctuation">)</span><span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>ret<span class="token punctuation">.</span>data<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="axios-全局配置"><a href="#axios-全局配置" class="headerlink" title="axios 全局配置"></a>axios 全局配置</h4><pre class="line-numbers language-javascript"><code class="language-javascript"># 配置公共的请求urlaxios<span class="token punctuation">.</span>defaults<span class="token punctuation">.</span>baseURL <span class="token operator">=</span> <span class="token string">'https://api.example.com'</span><span class="token punctuation">;</span># 配置超时时间axios<span class="token punctuation">.</span>defaults<span class="token punctuation">.</span>timeout <span class="token operator">=</span> <span class="token number">2500</span><span class="token punctuation">;</span>#  配置公共的请求头axios<span class="token punctuation">.</span>defaults<span class="token punctuation">.</span>headers<span class="token punctuation">.</span>common<span class="token punctuation">[</span><span class="token string">'Authorization'</span><span class="token punctuation">]</span> <span class="token operator">=</span> AUTH_TOKEN<span class="token punctuation">;</span># 配置公共的 post 的 Content<span class="token operator">-</span>Typeaxios<span class="token punctuation">.</span>defaults<span class="token punctuation">.</span>headers<span class="token punctuation">.</span>post<span class="token punctuation">[</span><span class="token string">'Content-Type'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'application/x-www-form-urlencoded'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="axios-拦截器"><a href="#axios-拦截器" class="headerlink" title="axios 拦截器"></a>axios 拦截器</h4><ul><li><p>请求拦截器</p><ul><li>请求拦截器的作用是在请求发送前进行的一些操作<ul><li>例如在每个请求体里加上token，统一做了处理。如果以后要改也非常容易</li></ul></li></ul></li><li><p>响应拦截器</p><ul><li>响应拦截器的作用是在接收到响应后进行的一些操作<ul><li>例如在服务器返回登陆状态失效，需要重新登录的时候，跳转到登录页</li></ul></li></ul><pre class="line-numbers language-javascript"><code class="language-javascript"># <span class="token number">1</span><span class="token punctuation">.</span> 请求拦截器   axios<span class="token punctuation">.</span>interceptors<span class="token punctuation">.</span>request<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>config<span class="token punctuation">.</span>url<span class="token punctuation">)</span>    # <span class="token number">1.1</span>  任何请求都会经过这一步   在发送请求之前做些什么       config<span class="token punctuation">.</span>headers<span class="token punctuation">.</span>mytoken <span class="token operator">=</span> <span class="token string">'nihao'</span><span class="token punctuation">;</span>    # <span class="token number">1.2</span>  这里一定要<span class="token keyword">return</span>   否则配置不成功      <span class="token keyword">return</span> config<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">{</span>     #<span class="token number">1.3</span> 对请求错误做点什么        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span>  #<span class="token number">2</span><span class="token punctuation">.</span> 响应拦截器   axios<span class="token punctuation">.</span>interceptors<span class="token punctuation">.</span>response<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span> <span class="token punctuation">{</span>    #<span class="token number">2.1</span>  在接收响应做些什么      <span class="token keyword">var</span> data <span class="token operator">=</span> res<span class="token punctuation">.</span>data<span class="token punctuation">;</span>    <span class="token keyword">return</span> data<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">{</span>    #<span class="token number">2.2</span> 对响应错误做点什么      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="async-和-await"><a href="#async-和-await" class="headerlink" title="async 和 await"></a>async 和 await</h3><ol><li><p><code>asyns</code> 作为一个关键字放到函数前面</p><p>​    任何一个 <code>async</code> 函数都会隐式返回一个 <code>promise</code></p></li><li><p><code>await</code> 关键字只能在使用 <code>async</code> 定义的函数中使用</p><p>​    await 后面可以直接跟一个Promise 实例对象，await不能单独使用</p></li><li><p>async/await 让异步代码看起来更像同步代码</p></li></ol><pre class="line-numbers language-javascript"><code class="language-javascript"># <span class="token number">1</span><span class="token punctuation">.</span>  <span class="token keyword">async</span> 基础用法    # <span class="token number">1.1</span> <span class="token keyword">async</span>作为一个关键字放到函数前面    <span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">queryData</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      # <span class="token number">1.2</span> <span class="token keyword">await</span>关键字只能在使用<span class="token keyword">async</span>定义的函数中使用   <span class="token keyword">await</span>后面可以直接跟一个 Promise实例对象      <span class="token keyword">var</span> ret <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>          <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">'nihao'</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span>      <span class="token comment" spellcheck="true">// console.log(ret.data)</span>      <span class="token keyword">return</span> ret<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    # <span class="token number">1.3</span> 任何一个<span class="token keyword">async</span>函数都会隐式返回一个promise 我们可以使用then 进行链式编程    <span class="token function">queryData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    #<span class="token number">2</span><span class="token punctuation">.</span>  <span class="token keyword">async</span>  函数处理多个异步函数    axios<span class="token punctuation">.</span>defaults<span class="token punctuation">.</span>baseURL <span class="token operator">=</span> <span class="token string">'http://localhost:3000'</span><span class="token punctuation">;</span>    <span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">queryData</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      # <span class="token number">2.1</span>  添加<span class="token keyword">await</span>之后 当前的<span class="token keyword">await</span> 返回结果之后才会执行后面的代码         <span class="token keyword">var</span> info <span class="token operator">=</span> <span class="token keyword">await</span> axios<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'async1'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      #<span class="token number">2.2</span>  让异步代码看起来、表现起来更像同步代码      <span class="token keyword">var</span> ret <span class="token operator">=</span> <span class="token keyword">await</span> axios<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'async2?info='</span> <span class="token operator">+</span> info<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> ret<span class="token punctuation">.</span>data<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">queryData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>案例：<a href="https://github.com/qlHuo/studyDemo/tree/master/vueModelTest/10%E5%9F%BA%E4%BA%8E%E6%8E%A5%E5%8F%A3%E7%9A%84%E5%9B%BE%E4%B9%A6%E7%AE%A1%E7%90%86" target="_blank" rel="noopener">基于接口的图书管理案例</a></p>]]></content>
      
      
      <categories>
          
          <category> vue </category>
          
          <category> vue前后端交互 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> promise </tag>
            
            <tag> fetch </tag>
            
            <tag> axios </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue基础(三)-组件</title>
      <link href="/archives/46c3f843.html"/>
      <url>/archives/46c3f843.html</url>
      
        <content type="html"><![CDATA[<h2 id="组件-Component"><a href="#组件-Component" class="headerlink" title="组件(Component)"></a>组件(Component)</h2><ul><li>组件是Vue.js最强大的功能之一</li><li>组件可以扩展html元素，封装可重用的代码</li></ul><h2 id="组件注册"><a href="#组件注册" class="headerlink" title="组件注册"></a>组件注册</h2><h3 id="全局注册"><a href="#全局注册" class="headerlink" title="全局注册"></a>全局注册</h3><ul><li><code>Vue.component(&#39;组件名称&#39;,{})</code> 第一个参数是标签名称，第二个参数是一个选项对象</li><li>全局组件注册之后，任何vue实例都可以使用</li></ul><h4 id="组件基础用法"><a href="#组件基础用法" class="headerlink" title="组件基础用法"></a>组件基础用法</h4><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>example<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token comment" spellcheck="true">&lt;!-- 2、 组件使用 组件名称 是以HTML标签的形式使用  --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>my-component</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>my-component</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token comment" spellcheck="true">//   注册组件 </span>    <span class="token comment" spellcheck="true">// 1、 my-component 就是组件中自定义的标签名</span>    Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">'my-component'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>      template<span class="token punctuation">:</span> <span class="token string">'&lt;div>A custom component!&lt;/div>'</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 创建根实例</span>    <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      el<span class="token punctuation">:</span> <span class="token string">'#example'</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="组件注意事项"><a href="#组件注意事项" class="headerlink" title="组件注意事项"></a>组件注意事项</h4><ol><li>组件参数的data值必须是函数，同时这个函数要求返回一个对象</li><li>组件模板必须是单个根元素</li><li>组件模板的内容可以是模板字符串</li><li>组件可以重用多次，并且数据相互之间不影响</li><li>如果使用驼峰命名组件，在使用组件的时候，只能在字符串模板中使用驼峰式组件；在html文件中使用模板字符串的时候，需要转换成小写，单词之间需要使用短横线隔开</li></ol><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>     <span class="token comment" spellcheck="true">&lt;!--         4、组件可以重复使用多次           因为data中返回的是一个对象所以每个组件中的数据是私有的          即每个实例可以维护一份被返回对象的独立的拷贝       --></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button-counter</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button-counter</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button-counter</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button-counter</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button-counter</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button-counter</span><span class="token punctuation">></span></span>      <span class="token comment" spellcheck="true">&lt;!-- 8、必须使用短横线的方式使用组件 --></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>hello-world</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>hello-world</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token comment" spellcheck="true">//5  如果使用驼峰式命名组件，那么在使用组件的时候，只能在字符串模板中用驼峰的方式使用组件，</span>    <span class="token comment" spellcheck="true">// 7、但是在普通的标签模板中，必须使用短横线的方式使用组件</span>     Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">'HelloWorld'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>      data<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token punctuation">{</span>          msg<span class="token punctuation">:</span> <span class="token string">'HelloWorld'</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      template<span class="token punctuation">:</span> <span class="token string">'&lt;div>{{msg}}&lt;/div>'</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">'button-counter'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 1、组件参数的data值必须是函数 </span>      <span class="token comment" spellcheck="true">// 同时这个函数要求返回一个对象  </span>      data<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token punctuation">{</span>          count<span class="token punctuation">:</span> <span class="token number">0</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token comment" spellcheck="true">//  2、组件模板必须是单个根元素</span>      <span class="token comment" spellcheck="true">//  3、组件模板的内容可以是模板字符串  </span>      template<span class="token punctuation">:</span> <span class="token template-string"><span class="token string">`        &lt;div>          &lt;button @click="handle">点击了{{count}}次&lt;/button>          &lt;button>测试123&lt;/button>            #  6 在字符串模板中可以使用驼峰的方式使用组件               &lt;HelloWorld>&lt;/HelloWorld>        &lt;/div>      `</span></span><span class="token punctuation">,</span>      methods<span class="token punctuation">:</span> <span class="token punctuation">{</span>        handle<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>count <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token keyword">var</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      el<span class="token punctuation">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span>      data<span class="token punctuation">:</span> <span class="token punctuation">{</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="局部注册"><a href="#局部注册" class="headerlink" title="局部注册"></a>局部注册</h3><blockquote><p><strong>局部注册的组件只能在当前注册它的vue实例中使用</strong></p></blockquote><pre class="line-numbers language-html"><code class="language-html"> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>hello-world</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>hello-world</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>hello-tom</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>hello-tom</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>hello-jerry</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>hello-jerry</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>test-com</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>test-com</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>js/vue.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token comment" spellcheck="true">/*      局部组件注册      局部组件只能在注册他的父组件中使用    */</span>    Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">'test-com'</span><span class="token punctuation">,</span><span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">//  hello-world中的内容不会被显示</span>      template<span class="token punctuation">:</span> <span class="token string">'&lt;div>Test&lt;hello-world>&lt;/hello-world>&lt;/div>'</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> HelloWorld <span class="token operator">=</span> <span class="token punctuation">{</span>      data<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token punctuation">{</span>          msg<span class="token punctuation">:</span> <span class="token string">'HelloWorld'</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      template<span class="token punctuation">:</span> <span class="token string">'&lt;div>{{msg}}&lt;/div>'</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> HelloTom <span class="token operator">=</span> <span class="token punctuation">{</span>      data<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token punctuation">{</span>          msg<span class="token punctuation">:</span> <span class="token string">'HelloTom'</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      template<span class="token punctuation">:</span> <span class="token string">'&lt;div>{{msg}}&lt;/div>'</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> HelloJerry <span class="token operator">=</span> <span class="token punctuation">{</span>      data<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token punctuation">{</span>          msg<span class="token punctuation">:</span> <span class="token string">'HelloJerry'</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      template<span class="token punctuation">:</span> <span class="token string">'&lt;div>{{msg}}&lt;/div>'</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      el<span class="token punctuation">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span>      data<span class="token punctuation">:</span> <span class="token punctuation">{</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">//定义局部组件</span>      components<span class="token punctuation">:</span> <span class="token punctuation">{</span>        <span class="token string">'hello-world'</span><span class="token punctuation">:</span> HelloWorld<span class="token punctuation">,</span>        <span class="token string">'hello-tom'</span><span class="token punctuation">:</span> HelloTom<span class="token punctuation">,</span>        <span class="token string">'hello-jerry'</span><span class="token punctuation">:</span> HelloJerry      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="vue组件间传值"><a href="#vue组件间传值" class="headerlink" title="vue组件间传值"></a>vue组件间传值</h2><h3 id="父组件向子组件传值"><a href="#父组件向子组件传值" class="headerlink" title="父组件向子组件传值"></a>父组件向子组件传值</h3><ul><li>父组件向子组件传值的形式是：以属性的形式绑定值到子组件身上，然后子组件使用属性props接受</li><li>在props中使用驼峰模式，模板中需要使用短横线形式；字符串形式的模板中没有限制</li></ul><pre class="line-numbers language-html"><code class="language-html">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>{{pmsg}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>     <span class="token comment" spellcheck="true">&lt;!--1、menu-item 在app中嵌套着 故menu-item为子组件      --></span>     <span class="token comment" spellcheck="true">&lt;!-- 给子组件传入一个静态的值 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>menu-item</span> <span class="token attr-name">title</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>来自父组件的值<span class="token punctuation">'</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>menu-item</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 2、需要动态的数据的时候,需要属性绑定的形式设置。此时ptitle来自父组件data中的数据，传的值可以是数字、对象、数组等等    --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>menu-item</span> <span class="token attr-name">:title</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>ptitle<span class="token punctuation">'</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>hello<span class="token punctuation">'</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>menu-item</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript">    Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">'menu-item'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 3、 子组件用属性props接收父组件传递过来的数据  </span>      props<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'title'</span><span class="token punctuation">,</span> <span class="token string">'content'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>      data<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token punctuation">{</span>          msg<span class="token punctuation">:</span> <span class="token string">'子组件本身的数据'</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      template<span class="token punctuation">:</span> <span class="token string">'&lt;div>{{msg + "----" + title + "-----" + content}}&lt;/div>'</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      el<span class="token punctuation">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span>      data<span class="token punctuation">:</span> <span class="token punctuation">{</span>        pmsg<span class="token punctuation">:</span> <span class="token string">'父组件中内容'</span><span class="token punctuation">,</span>        ptitle<span class="token punctuation">:</span> <span class="token string">'动态绑定属性'</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="子组件向父组件传值"><a href="#子组件向父组件传值" class="headerlink" title="子组件向父组件传值"></a>子组件向父组件传值</h3><ol><li>子组件使用 <code>$emit()</code> 触发事件</li><li><code>$emit(&#39;时间名&#39;,args)</code> 第一个参数为自定义事件名，第二个参数为需要传递的数据</li><li>父组件使用 <code>v-on</code> 监听子组件的事件</li></ol><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">:</span><span class="token style-attr language-css"><span class="token attr-name"><span class="token attr-name">style</span></span><span class="token punctuation">='</span><span class="token attr-value"><span class="token punctuation">{</span><span class="token property">fontSize</span><span class="token punctuation">:</span> fontSize + <span class="token string">"px"</span><span class="token punctuation">}</span></span><span class="token punctuation">'</span></span><span class="token punctuation">></span></span>{{pmsg}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>     <span class="token comment" spellcheck="true">&lt;!-- 2 父组件用v-on 监听子组件的事件        这里 enlarge-text  是从 $emit 中的第一个参数对应   handle 为对应的事件处理函数        --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>menu-item</span> <span class="token attr-name">:parr</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>parr<span class="token punctuation">'</span></span> <span class="token attr-name">@enlarge-text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>handle($event)<span class="token punctuation">'</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>menu-item</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>js/vue.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token comment" spellcheck="true">/*      子组件向父组件传值-携带参数    */</span>    Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">'menu-item'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>      props<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'parr'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>      template<span class="token punctuation">:</span> <span class="token template-string"><span class="token string">`        &lt;div>          &lt;ul>            &lt;li :key='index' v-for='(item,index) in parr'>{{item}}&lt;/li>          &lt;/ul>            ###  1、子组件用$emit()触发事件            ### 第一个参数为 自定义的事件名称   第二个参数为需要传递的数据            &lt;button @click='$emit("enlarge-text", 5)'>扩大父组件中字体大小&lt;/button>          &lt;button @click='$emit("enlarge-text", 10)'>扩大父组件中字体大小&lt;/button>        &lt;/div>      `</span></span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      el<span class="token punctuation">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span>      data<span class="token punctuation">:</span> <span class="token punctuation">{</span>        pmsg<span class="token punctuation">:</span> <span class="token string">'父组件中内容'</span><span class="token punctuation">,</span>        parr<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'apple'</span><span class="token punctuation">,</span><span class="token string">'orange'</span><span class="token punctuation">,</span><span class="token string">'banana'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        fontSize<span class="token punctuation">:</span> <span class="token number">10</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      methods<span class="token punctuation">:</span> <span class="token punctuation">{</span>        handle<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">{</span>          <span class="token comment" spellcheck="true">// 扩大字体大小</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>fontSize <span class="token operator">+</span><span class="token operator">=</span> val<span class="token punctuation">;</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="兄弟组件之间传递"><a href="#兄弟组件之间传递" class="headerlink" title="兄弟组件之间传递"></a>兄弟组件之间传递</h3><ol><li><p>兄弟之间传递数据需要借助于事件中心，通过事件中心传递数据</p><p>​    事件中心的定义方式：<code>var hub = new Vue();</code></p></li><li><p>传递数据方：通过一个事件触发 <code>hub.$emit(方法名，传递的数据)</code></p></li><li><p>接受数据方：通过 <code>mounted(){}</code> 钩子中触发 <code>hub.$on()</code>方法</p></li><li><p>销毁事件：通过 <code>hub.$off()</code> 方法销毁之后，无法进行数据传递</p></li></ol><pre class="line-numbers language-html"><code class="language-html"> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>父组件<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>handle<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>销毁事件<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>test-tom</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>test-tom</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>test-jerry</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>test-jerry</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>js/vue.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token comment" spellcheck="true">/*      兄弟组件之间数据传递    */</span>    <span class="token comment" spellcheck="true">//1、 提供事件中心</span>    <span class="token keyword">var</span> hub <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">'test-tom'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>      data<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token punctuation">{</span>          num<span class="token punctuation">:</span> <span class="token number">0</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      template<span class="token punctuation">:</span> <span class="token template-string"><span class="token string">`        &lt;div>          &lt;div>TOM:{{num}}&lt;/div>          &lt;div>            &lt;button @click='handle'>点击&lt;/button>          &lt;/div>        &lt;/div>      `</span></span><span class="token punctuation">,</span>      methods<span class="token punctuation">:</span> <span class="token punctuation">{</span>        handle<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>          <span class="token comment" spellcheck="true">//2、传递数据方，通过一个事件触发hub.$emit(方法名，传递的数据)   触发兄弟组件的事件</span>          hub<span class="token punctuation">.</span><span class="token function">$emit</span><span class="token punctuation">(</span><span class="token string">'jerry-event'</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      mounted<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>       <span class="token comment" spellcheck="true">// 3、接收数据方，通过mounted(){} 钩子中  触发hub.$on()方法</span>        hub<span class="token punctuation">.</span><span class="token function">$on</span><span class="token punctuation">(</span><span class="token string">'tom-event'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>val<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>num <span class="token operator">+</span><span class="token operator">=</span> val<span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">'test-jerry'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>      data<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token punctuation">{</span>          num<span class="token punctuation">:</span> <span class="token number">0</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      template<span class="token punctuation">:</span> <span class="token template-string"><span class="token string">`        &lt;div>          &lt;div>JERRY:{{num}}&lt;/div>          &lt;div>            &lt;button @click='handle'>点击&lt;/button>          &lt;/div>        &lt;/div>      `</span></span><span class="token punctuation">,</span>      methods<span class="token punctuation">:</span> <span class="token punctuation">{</span>        handle<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>          <span class="token comment" spellcheck="true">//2、传递数据方，通过一个事件触发hub.$emit(方法名，传递的数据)   触发兄弟组件的事件</span>          hub<span class="token punctuation">.</span><span class="token function">$emit</span><span class="token punctuation">(</span><span class="token string">'tom-event'</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      mounted<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 3、接收数据方，通过mounted(){} 钩子中  触发hub.$on()方法名</span>        hub<span class="token punctuation">.</span><span class="token function">$on</span><span class="token punctuation">(</span><span class="token string">'jerry-event'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>val<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>num <span class="token operator">+</span><span class="token operator">=</span> val<span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      el<span class="token punctuation">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span>      data<span class="token punctuation">:</span> <span class="token punctuation">{</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      methods<span class="token punctuation">:</span> <span class="token punctuation">{</span>        handle<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>          <span class="token comment" spellcheck="true">//4、销毁事件 通过hub.$off()方法名销毁之后无法进行传递数据  </span>          hub<span class="token punctuation">.</span><span class="token function">$off</span><span class="token punctuation">(</span><span class="token string">'tom-event'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          hub<span class="token punctuation">.</span><span class="token function">$off</span><span class="token punctuation">(</span><span class="token string">'jerry-event'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="组件插槽"><a href="#组件插槽" class="headerlink" title="组件插槽"></a>组件插槽</h2><blockquote><p>组件的最大特性就是复用性，而用好插槽能大大提高组件的可复用能力</p></blockquote><h3 id="匿名插槽"><a href="#匿名插槽" class="headerlink" title="匿名插槽"></a>匿名插槽</h3><pre class="line-numbers language-html"><code class="language-html">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 这里的所有组件标签中嵌套的内容会替换掉slot  如果不传值 则使用 slot 中的默认值  --></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>alert-box</span><span class="token punctuation">></span></span>有bug发生<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>alert-box</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>alert-box</span><span class="token punctuation">></span></span>有一个警告<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>alert-box</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>alert-box</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>alert-box</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token comment" spellcheck="true">/*      组件插槽：父组件向子组件传递内容    */</span>    Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">'alert-box'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>      template<span class="token punctuation">:</span> <span class="token template-string"><span class="token string">`        &lt;div>          &lt;strong>ERROR:&lt;/strong>        # 当组件渲染的时候，这个 &lt;slot> 元素将会被替换为“组件标签中嵌套的内容”。        # 插槽内可以包含任何模板代码，包括 HTML          &lt;slot>默认内容&lt;/slot>        &lt;/div>      `</span></span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      el<span class="token punctuation">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span>      data<span class="token punctuation">:</span> <span class="token punctuation">{</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="具名插槽"><a href="#具名插槽" class="headerlink" title="具名插槽"></a>具名插槽</h3><ul><li>具有名字的插槽</li><li>使用 <code>&lt;slot&gt;</code> 中的 <code>name</code> 属性绑定元素</li></ul><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>base-layout</span><span class="token punctuation">></span></span>       <span class="token comment" spellcheck="true">&lt;!-- 2、通过slot属性来指定, 这个slot的值必须和下面slot组件得name值对应上; 如果没有匹配到 则放到匿名的插槽中   --></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">slot</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>header<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>标题信息<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>主要内容1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>主要内容2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">slot</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>footer<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>底部信息信息<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>base-layout</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>base-layout</span><span class="token punctuation">></span></span>      <span class="token comment" spellcheck="true">&lt;!-- 注意点：template临时的包裹标签最终不会渲染到页面上     --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">slot</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>header<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>标题信息1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>标题信息2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>主要内容1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>主要内容2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">slot</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>footer<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>底部信息信息1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>底部信息信息2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>base-layout</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>js/vue.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token comment" spellcheck="true">/*      具名插槽    */</span>    Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">'base-layout'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>      template<span class="token punctuation">:</span> <span class="token template-string"><span class="token string">`        &lt;div>          &lt;header>            ###    1、 使用 &lt;slot> 中的 "name" 属性绑定元素 指定当前插槽的名字            &lt;slot name='header'>&lt;/slot>          &lt;/header>          &lt;main>            &lt;slot>&lt;/slot>          &lt;/main>          &lt;footer>            ###  注意点：             ###  具名插槽的渲染顺序，完全取决于模板，而不是取决于父组件中元素的顺序            &lt;slot name='footer'>&lt;/slot>          &lt;/footer>        &lt;/div>      `</span></span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      el<span class="token punctuation">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span>      data<span class="token punctuation">:</span> <span class="token punctuation">{</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="作用域插槽"><a href="#作用域插槽" class="headerlink" title="作用域插槽"></a>作用域插槽</h3><ul><li>父组件对子组件加工处理</li><li>既可以复用子组件 <code>slot</code> ,又可以使 <code>slot</code> 内容不一致</li></ul><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token style language-css">  <span class="token selector"><span class="token class">.current</span> </span><span class="token punctuation">{</span>    <span class="token property">color</span><span class="token punctuation">:</span> orange<span class="token punctuation">;</span>  <span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 1、当我们希望li 的样式由外部使用组件的地方定义，因为可能有多种地方要使用该组件，但样式希望不一样 这个时候我们需要使用作用域插槽 --></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>fruit-list</span> <span class="token attr-name">:list</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>list<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>       <span class="token comment" spellcheck="true">&lt;!-- 2、 父组件中使用了&lt;template>元素,而且包含scope="slotProps",            slotProps在这里只是临时变量   ---></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">slot-scope</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>slotProps<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>strong</span> <span class="token attr-name">v-if</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>slotProps.info.id<span class="token punctuation">=</span><span class="token punctuation">=</span>3<span class="token punctuation">'</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>current<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            {{slotProps.info.name}}                          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>strong</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">v-else</span><span class="token punctuation">></span></span>{{slotProps.info.name}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>fruit-list</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>js/vue.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token comment" spellcheck="true">/*      作用域插槽    */</span>    Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">'fruit-list'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>      props<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'list'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>      template<span class="token punctuation">:</span> <span class="token template-string"><span class="token string">`        &lt;div>          &lt;li :key='item.id' v-for='item in list'>        ###  3、 在子组件模板中,&lt;slot>元素上有一个类似props传递数据给组件的写法msg="xxx",        ###   插槽可以提供一个默认内容，如果如果父组件没有为这个插槽提供了内容，会显示默认的内容。如果父组件为这个插槽提供了内容，则默认的内容会被替换掉            &lt;slot :info='item'>{{item.name}}&lt;/slot>          &lt;/li>        &lt;/div>      `</span></span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      el<span class="token punctuation">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span>      data<span class="token punctuation">:</span> <span class="token punctuation">{</span>        list<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>          id<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span>          name<span class="token punctuation">:</span> <span class="token string">'apple'</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span>          id<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span>          name<span class="token punctuation">:</span> <span class="token string">'orange'</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span>          id<span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">,</span>          name<span class="token punctuation">:</span> <span class="token string">'banana'</span>        <span class="token punctuation">}</span><span class="token punctuation">]</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>案例-购物车：</strong> <a href="https://github.com/qlHuo/studyDemo/tree/master/vueModelTest/09购物车案例" target="_blank" rel="noopener">购物车案例</a></p><p>参考文章：<a href="https://blog.csdn.net/helloyongwei/article/details/82384551" target="_blank" rel="noopener">https://blog.csdn.net/helloyongwei/article/details/82384551</a></p><p>​                  <a href="https://www.jianshu.com/p/e10baeff888d" target="_blank" rel="noopener">https://www.jianshu.com/p/e10baeff888d</a></p>]]></content>
      
      
      <categories>
          
          <category> vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 组件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>js数组some()方法</title>
      <link href="/archives/41806ff3.html"/>
      <url>/archives/41806ff3.html</url>
      
        <content type="html"><![CDATA[<h3 id="some-方法"><a href="#some-方法" class="headerlink" title="some()方法"></a>some()方法</h3><ol><li><code>some()</code> 方法针对于数组中的每一个元素，只要有一个元素结果为true，就立即返回true，后续不再执行，反之所有的元素的比对的结果都为false返回值才为false。</li><li><code>some()</code> 方法会依次执行数组中的每个元素，但不会对空数组进行检测，即空数组使用some()返回值始终为 false</li><li><code>some()</code> 不会改变原数组</li></ol><p><strong>语法：</strong></p><p><code>array.some(function(currentValue,index,arr),thisValue)</code></p><p>参数描述：</p><p>​        <strong>回调函数：</strong>必填，数组中的每个元素都会执行这个回调函数</p><ol><li><p><code>currentValue</code> : 必填，当前元素的值</p></li><li><p><code>index</code> : 可选，当前索引值</p></li><li><p><code>arr</code>: 可选， 当前的数组</p><p><strong>thisValue：</strong>可选</p><p>执行 <code>callback</code> 时使用的 <code>this</code> 值</p></li></ol><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token keyword">var</span> b <span class="token operator">=</span> a<span class="token punctuation">.</span><span class="token function">some</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> x <span class="token operator">></span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">var</span> c <span class="token operator">=</span> a<span class="token punctuation">.</span><span class="token function">some</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> x <span class="token operator">></span> <span class="token number">5</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//这里返回false</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//这里返回true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>当 <code>return:true;</code> 执行之后，就终止了<code>some()</code>操作</p></blockquote><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">this</span><span class="token punctuation">.</span>books<span class="token punctuation">.</span><span class="token function">some</span><span class="token punctuation">(</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>item<span class="token punctuation">.</span>id <span class="token operator">==</span> <span class="token keyword">this</span><span class="token punctuation">.</span>id<span class="token punctuation">)</span> <span class="token punctuation">{</span>      item<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// 完成更新操作之后，需要终止循环</span>      <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>参考文章：<a href="https://blog.csdn.net/wh13267207590/article/details/80967216" target="_blank" rel="noopener">https://blog.csdn.net/wh13267207590/article/details/80967216</a></p>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数组 </tag>
            
            <tag> some() </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue基础(二)-常用特性</title>
      <link href="/archives/78d4747a.html"/>
      <url>/archives/78d4747a.html</url>
      
        <content type="html"><![CDATA[<h2 id="Vue常用特性"><a href="#Vue常用特性" class="headerlink" title="Vue常用特性"></a>Vue常用特性</h2><h3 id="表单操作"><a href="#表单操作" class="headerlink" title="表单操作"></a>表单操作</h3><h4 id="获取单选框中的值"><a href="#获取单选框中的值" class="headerlink" title="获取单选框中的值"></a>获取单选框中的值</h4><blockquote><p>通过<code>v-model</code></p></blockquote><ol><li>两个单选框需要同时通过 <code>v-model</code> 双向绑定一个值</li><li>每个单选框必须要有 <code>value</code> 属性，且 <code>value</code> 的值不能一样</li><li>当某一个单选框选中的时候 <code>v-model</code> 会将当前的 <code>value</code> 值改变为 data 中的值</li></ol><pre class="line-numbers language-html"><code class="language-html">     <span class="token comment" spellcheck="true">&lt;!-- gender 的值就是选中的值，我们只需要实时监控他的值就可以了--></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>radio<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>male<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>gender<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>male<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>男<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>radio<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>female<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>2<span class="token punctuation">"</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>gender<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>female<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>女<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>         data<span class="token punctuation">:</span> <span class="token punctuation">{</span>             <span class="token comment" spellcheck="true">// 默认会让当前的 value 值为 2 的单选框选中</span>                gender<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span>              <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="获取复选框中的值"><a href="#获取复选框中的值" class="headerlink" title="获取复选框中的值"></a>获取复选框中的值</h4><ol><li>通过v-model，和获取单选框中的值一样</li><li>复选框  <code>checkbox</code> 组合是，<code>data</code>中的对应的数据要设置成<strong>数组</strong>，否则无法实现多选</li></ol><pre class="line-numbers language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!-- hobby 的值就是选中的值，我们只需要实时监控他的值就可以了--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>爱好：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ball<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>hobby<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ball<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>篮球<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sing<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>2<span class="token punctuation">"</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>hobby<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sing<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>唱歌<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>code<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>3<span class="token punctuation">"</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>hobby<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>code<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>写代码<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>         data<span class="token punctuation">:</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 默认会让当前的 value 值为 2 和 3 的复选框选中</span>                hobby<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'2'</span><span class="token punctuation">,</span> <span class="token string">'3'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="获取下拉框和文本框中的值"><a href="#获取下拉框和文本框中的值" class="headerlink" title="获取下拉框和文本框中的值"></a>获取下拉框和文本框中的值</h4><ol><li>需要给 <code>select</code>  通过 <code>v-model</code> 双向绑定一个值</li><li>每一个 <code>option</code> 必须要有value属性，且value 值不能一样 </li><li>当某一个 <code>option</code> 选中的时候 <code>v-model</code> 会将当前的 value值改变 data 中的数据</li></ol><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>职业：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>       <span class="token comment" spellcheck="true">&lt;!-- occupation 的值就是选中的值，我们只需要实时监控他的值就可以了--></span>       <span class="token comment" spellcheck="true">&lt;!-- multiple  多选 --></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>occupation<span class="token punctuation">'</span></span> <span class="token attr-name">multiple</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>请选择职业...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>教师<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>软件工程师<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>3<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>律师<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span>         <span class="token comment" spellcheck="true">&lt;!-- textarea 是 一个双标签   不需要绑定value 属性的  --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>textarea</span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>desc<span class="token punctuation">'</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>textarea</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>         data<span class="token punctuation">:</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 默认会让当前的 value 值为 2 和 3 的下拉框选中</span>                 occupation<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'2'</span><span class="token punctuation">,</span> <span class="token string">'3'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                  desc<span class="token punctuation">:</span> <span class="token string">'nihao'</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="表单修饰符"><a href="#表单修饰符" class="headerlink" title="表单修饰符"></a>表单修饰符</h3><ul><li><p>.number  转换为数值</p><blockquote><p>当开始输入非数字的字符串时，因为Vue无法将字符串转换成数值，所以属性值将实时更新成相同的字符串。即使后面输入数字，也将被视作字符串。</p></blockquote></li><li><p>.trim  自动过滤用户输入的首尾空白字符</p><blockquote><p>只能去掉首尾的 不能去除中间的空格</p></blockquote></li><li><p>.lazy   将input事件切换成change事件</p><blockquote><p>.lazy 修饰符延迟了同步更新属性值的时机。即将原本绑定在 input 事件的同步逻辑转变为绑定在 change 事件上</p><p><strong>在失去焦点 或者 按下回车键时才更新</strong></p></blockquote></li></ul><pre class="line-numbers language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!-- 自动将用户的输入值转为数值类型 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">v-model.number</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>age<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>number<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!--自动过滤用户输入的首尾空白字符   --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">v-model.trim</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>msg<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- 在“change”时而非“input”时更新 --></span><span class="token comment" spellcheck="true">&lt;!-- 在失去焦点 或者 按下回车键时才更新 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">v-model.lazy</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>msg<span class="token punctuation">"</span></span> <span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="自定义指令"><a href="#自定义指令" class="headerlink" title="自定义指令"></a>自定义指令</h3><ol><li>内置指令不能满足我们特殊的需求</li><li>使用自定义的指令，只需在对用的元素中，加上’v-‘的前缀形成类似于内部指令’v-if’，’v-text’的形式。</li></ol><h4 id="Vue-directive-注册全局指令"><a href="#Vue-directive-注册全局指令" class="headerlink" title="Vue.directive 注册全局指令"></a>Vue.directive 注册全局指令</h4><p><strong>注意：</strong></p><blockquote><p>在自定义指令中,如果以驼峰命名的方式定义 如  <code>Vue.directive(&#39;focusA&#39;,function(){})</code>， 在HTML中使用的时候 只能通过 <code>v-focus-a</code> 来使用 </p></blockquote><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">v-focus</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript"><span class="token comment" spellcheck="true">// 注册一个全局自定义指令 v-focus</span>Vue<span class="token punctuation">.</span><span class="token function">directive</span><span class="token punctuation">(</span><span class="token string">'focus'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 当绑定元素插入到 DOM 中。 其中 el为dom元素</span>      inserted<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>el<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 聚焦元素,使用js原生的API</span>            el<span class="token punctuation">.</span><span class="token function">focus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>　　el<span class="token punctuation">:</span><span class="token string">'#app'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="Vue-directive注册全局指令-带参数"><a href="#Vue-directive注册全局指令-带参数" class="headerlink" title="Vue.directive注册全局指令(带参数)"></a>Vue.directive注册全局指令(带参数)</h4><ol><li><code>bind</code> 声明周期，只调用一次，指令第一次绑定到元素时调用。在这里可以进行一次性的初始化设置</li><li>el 为当前自定义指令的DOM元素</li><li><code>binding</code> 为自定义的函数<strong>形参</strong>，通过自定义属性传递过来的值 存在 <code>binding.value</code> 里面</li></ol><pre class="line-numbers language-html"><code class="language-html">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">v-color</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>msg<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>js/vue.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token comment" spellcheck="true">/*      自定义指令-带参数    */</span>    Vue<span class="token punctuation">.</span><span class="token function">directive</span><span class="token punctuation">(</span><span class="token string">'color'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>      bind<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span>el<span class="token punctuation">,</span> binding<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 根据指令的参数设置背景色</span>        <span class="token comment" spellcheck="true">// console.log(binding.value.color)</span>        el<span class="token punctuation">.</span>style<span class="token punctuation">.</span>backgroundColor <span class="token operator">=</span> binding<span class="token punctuation">.</span>value<span class="token punctuation">.</span>color<span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      el<span class="token punctuation">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span>      data<span class="token punctuation">:</span> <span class="token punctuation">{</span>        msg<span class="token punctuation">:</span> <span class="token punctuation">{</span>          color<span class="token punctuation">:</span> <span class="token string">'blue'</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="自定义指令-局部指令"><a href="#自定义指令-局部指令" class="headerlink" title="自定义指令-局部指令"></a>自定义指令-局部指令</h4><ul><li>局部指令，需要定义在  <code>directives</code> 的选项   用法和全局用法一样 </li><li>局部指令只能在当前组件里面使用</li><li>当全局指令和局部指令同名时以局部指令为准</li></ul><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">v-color</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>msg<span class="token punctuation">'</span></span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">v-focus</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token keyword">var</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      el<span class="token punctuation">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span>      data<span class="token punctuation">:</span> <span class="token punctuation">{</span>        msg<span class="token punctuation">:</span> <span class="token punctuation">{</span>          color<span class="token punctuation">:</span> <span class="token string">'red'</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>         <span class="token comment" spellcheck="true">//局部指令，需要定义在  directives 的选项</span>      directives<span class="token punctuation">:</span> <span class="token punctuation">{</span>        color<span class="token punctuation">:</span> <span class="token punctuation">{</span>          bind<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span>el<span class="token punctuation">,</span> binding<span class="token punctuation">)</span><span class="token punctuation">{</span>            el<span class="token punctuation">.</span>style<span class="token punctuation">.</span>backgroundColor <span class="token operator">=</span> binding<span class="token punctuation">.</span>value<span class="token punctuation">.</span>color<span class="token punctuation">;</span>          <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        focus<span class="token punctuation">:</span> <span class="token punctuation">{</span>          inserted<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span>el<span class="token punctuation">)</span> <span class="token punctuation">{</span>            el<span class="token punctuation">.</span><span class="token function">focus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="计算属性-computed"><a href="#计算属性-computed" class="headerlink" title="计算属性-computed"></a>计算属性-computed</h3><ul><li>模板中放入太多的逻辑会让模板过重且难以维护  使用计算属性可以让模板更加的简洁</li><li><strong>计算属性是基于它们的响应式依赖进行缓存的</strong></li><li>computed 比较适合对多个变量或者对象进行处理后返回一个结果值，也就是数多个变量中的某一个值发生了变化则我们监控的这个值也就会发生变化</li></ul><blockquote><p><strong>计算属性与方法的区别:计算属性是基于依赖进行缓存的，而方法不缓存</strong></p></blockquote><pre class="line-numbers language-html"><code class="language-html"> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>     <span class="token comment" spellcheck="true">&lt;!--          当多次调用 reverseString  的时候         只要里面的 num 值不改变 他会把第一次计算的结果直接返回        直到data 中的num值改变 计算属性才会重新发生计算     --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>{{reverseString}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>{{reverseString}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>     <span class="token comment" spellcheck="true">&lt;!-- 调用methods中的方法的时候  他每次会重新调用 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>{{reverseMessage()}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>{{reverseMessage()}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token comment" spellcheck="true">/*      计算属性与方法的区别:计算属性是基于依赖进行缓存的，而方法不缓存    */</span>    <span class="token keyword">var</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      el<span class="token punctuation">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span>      data<span class="token punctuation">:</span> <span class="token punctuation">{</span>        msg<span class="token punctuation">:</span> <span class="token string">'Nihao'</span><span class="token punctuation">,</span>        num<span class="token punctuation">:</span> <span class="token number">100</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      methods<span class="token punctuation">:</span> <span class="token punctuation">{</span>        reverseMessage<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>          console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'methods'</span><span class="token punctuation">)</span>          <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>msg<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token comment" spellcheck="true">//computed  属性定义和data、methods平级 </span>      computed<span class="token punctuation">:</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//  reverseString   这个是我们自己定义的名字 </span>        reverseString<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>          console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'computed'</span><span class="token punctuation">)</span>          <span class="token keyword">var</span> total <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">//  当data 中的 num 的值改变的时候  reverseString  会自动发生计算  </span>          <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span><span class="token keyword">this</span><span class="token punctuation">.</span>num<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            total <span class="token operator">+</span><span class="token operator">=</span> i<span class="token punctuation">;</span>          <span class="token punctuation">}</span>          <span class="token comment" spellcheck="true">// 这里一定要有return 否则 调用 reverseString 的 时候无法拿到结果    </span>          <span class="token keyword">return</span> total<span class="token punctuation">;</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="getter-和-setter"><a href="#getter-和-setter" class="headerlink" title="getter 和 setter"></a>getter 和 setter</h4><blockquote><p>computed中默认只有getter方法，不过我们在有需要的时候可以设置setter。</p><p>由于计算属性是依赖于与其相关的数据，所以当set中相关数据变化时会触发get</p></blockquote><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>demo<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        姓：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>firstName<span class="token punctuation">"</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>firstName<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>        名：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>lastName<span class="token punctuation">"</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>lastName<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>        姓名:<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>FullName<span class="token punctuation">"</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>fullName<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://cdn.jsdelivr.net/npm/vue/dist/vue.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token keyword">const</span> demo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        el <span class="token punctuation">:</span> <span class="token string">'#demo'</span><span class="token punctuation">,</span>        data <span class="token punctuation">:</span> <span class="token punctuation">{</span>            firstName <span class="token punctuation">:</span> <span class="token string">'A'</span><span class="token punctuation">,</span>            lastName <span class="token punctuation">:</span> <span class="token string">'B'</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">//计算属性相当于data里的属性</span>        computed <span class="token punctuation">:</span> <span class="token punctuation">{</span>            fullName<span class="token punctuation">:</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//回调函数 当需要读取当前属性值是执行，根据相关数据计算并返回当前属性的值</span>                <span class="token keyword">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>firstName <span class="token operator">+</span> <span class="token string">' '</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>lastName                <span class="token punctuation">}</span><span class="token punctuation">,</span>                <span class="token comment" spellcheck="true">//监视当前属性值的变化，当属性值发生变化时执行，更新相关的属性数据</span>                <span class="token keyword">set</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">//val就是fullName的最新属性值</span>                    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span>                    <span class="token keyword">const</span> names <span class="token operator">=</span> val<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">' '</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>names<span class="token punctuation">)</span>                    <span class="token keyword">this</span><span class="token punctuation">.</span>firstName <span class="token operator">=</span> names<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                    <span class="token keyword">this</span><span class="token punctuation">.</span>lastName <span class="token operator">=</span> names<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="侦听器-watch"><a href="#侦听器-watch" class="headerlink" title="侦听器-watch"></a>侦听器-watch</h3><ul><li>使用 <code>watch</code> 来响应<strong>数据</strong>的变化，就是说 <code>watch</code> 监听的是data中的数据的变化</li><li>一般用于异步或者开销较大的操作</li><li>watch中的属性 一定是data 中 已经存在的数据 </li><li><strong>当需要监听一个对象的改变时，普通的watch方法无法监听到对象内部属性的改变，只有data中的数据才能够监听到变化，此时就需要deep属性对对象进行深度监听</strong></li></ul><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>名：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>firstName<span class="token punctuation">'</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>姓：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>lastName<span class="token punctuation">'</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>{{fullName}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript">     <span class="token keyword">var</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>         el<span class="token punctuation">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span>         data<span class="token punctuation">:</span> <span class="token punctuation">{</span>             firstName<span class="token punctuation">:</span> <span class="token string">'Jim'</span><span class="token punctuation">,</span>             lastName<span class="token punctuation">:</span> <span class="token string">'Green'</span><span class="token punctuation">,</span>             <span class="token comment" spellcheck="true">// fullName: 'Jim Green'</span>         <span class="token punctuation">}</span><span class="token punctuation">,</span>         watch<span class="token punctuation">:</span> <span class="token punctuation">{</span>             <span class="token comment" spellcheck="true">//   注意：这里firstName  对应着data 中的 firstName </span>             <span class="token comment" spellcheck="true">//   当 firstName 值 改变的时候  会自动触发 watch</span>             firstName<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span> <span class="token punctuation">{</span>                 <span class="token keyword">this</span><span class="token punctuation">.</span>fullName <span class="token operator">=</span> val <span class="token operator">+</span> <span class="token string">' '</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>lastName<span class="token punctuation">;</span>             <span class="token punctuation">}</span><span class="token punctuation">,</span>             <span class="token comment" spellcheck="true">//   注意：这里 lastName 对应着data 中的 lastName </span>             lastName<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span> <span class="token punctuation">{</span>                 <span class="token keyword">this</span><span class="token punctuation">.</span>fullName <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>firstName <span class="token operator">+</span> <span class="token string">' '</span> <span class="token operator">+</span> val<span class="token punctuation">;</span>             <span class="token punctuation">}</span>         <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="过滤器"><a href="#过滤器" class="headerlink" title="过滤器"></a>过滤器</h3><ul><li>Vue.js允许自定义过滤器，可被<strong>用于一些常见的文本格式化</strong>。</li><li>过滤器可以用在两个地方：双花括号插值和v-bind表达式。</li><li>过滤器应该被添加在JavaScript表达式的尾部，由“管道”符号指示</li><li>支持级联操作</li><li>过滤器不改变真正的<code>data</code>，而只是改变渲染的结果，并返回过滤后的版本</li><li>全局注册时是filter，没有s的。而局部过滤器是filters，是有s的</li></ul><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>msg<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>      <span class="token comment" spellcheck="true">&lt;!-- upper 被定义为接收单个参数的过滤器函数，表达式  msg  的值将作为参数传入到函数中 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>{{msg | upper}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--        支持级联操作      upper  被定义为接收单个参数的过滤器函数，表达式msg 的值将作为参数传入到函数中。      然后继续调用同样被定义为接收单个参数的过滤器 lower ，将upper 的结果传递到lower中     --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>{{msg | upper | lower}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">:abc</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>msg | upper<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>测试数据<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript">   <span class="token comment" spellcheck="true">//  lower  为全局过滤器     </span>   Vue<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token string">'lower'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> val<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> val<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      el<span class="token punctuation">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span>      data<span class="token punctuation">:</span> <span class="token punctuation">{</span>        msg<span class="token punctuation">:</span> <span class="token string">''</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>       <span class="token comment" spellcheck="true">//filters  属性 定义 和 data 已经 methods 平级 </span>       <span class="token comment" spellcheck="true">//  定义filters 中的过滤器为局部过滤器 </span>      filters<span class="token punctuation">:</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//   upper  自定义的过滤器名字 </span>        <span class="token comment" spellcheck="true">//    upper 被定义为接收单个参数的过滤器函数，表达式  msg  的值将作为参数传入到函数中</span>        upper<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token comment" spellcheck="true">//  过滤器中一定要有返回值 这样外界使用过滤器的时候才能拿到结果</span>          <span class="token keyword">return</span> val<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> val<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="过滤器中传递参数"><a href="#过滤器中传递参数" class="headerlink" title="过滤器中传递参数"></a>过滤器中传递参数</h4><pre class="line-numbers language-html"><code class="language-html">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>box<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--            filterA 被定义为接收三个参数的过滤器函数。              其中 message 的值作为第一个参数，            普通字符串 'arg1' 作为第二个参数，表达式 arg2 的值作为第三个参数。        --></span>        {{ message | filterA('arg1', 'arg2') }}    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">        <span class="token comment" spellcheck="true">// 在过滤器中 第一个参数 对应的是  管道符前面的数据   n  此时对应 message</span>        <span class="token comment" spellcheck="true">// 第2个参数  a 对应 实参  arg1 字符串</span>        <span class="token comment" spellcheck="true">// 第3个参数  b 对应 实参  arg2 字符串</span>        Vue<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token string">'filterA'</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>n<span class="token operator">&lt;</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">return</span> n<span class="token operator">+</span>a<span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>                <span class="token keyword">return</span> n<span class="token operator">+</span>b<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>            el<span class="token punctuation">:</span><span class="token string">"#box"</span><span class="token punctuation">,</span>            data<span class="token punctuation">:</span><span class="token punctuation">{</span>                message<span class="token punctuation">:</span> <span class="token string">"哈哈哈"</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Vue生命周期"><a href="#Vue生命周期" class="headerlink" title="Vue生命周期"></a><a href="https://cn.vuejs.org/v2/guide/instance.html#%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E5%9B%BE%E7%A4%BA" target="_blank" rel="noopener">Vue生命周期</a></h3><p>Vue实例从创建到销毁的过程 ，这些过程中会伴随着一些函数的自调用。我们称这些函数为<strong>钩子函数</strong></p><p><strong>常用的钩子函数</strong></p><h4 id=""><a href="#" class="headerlink" title=""></a></h4><table><thead><tr><th></th><th>描述</th></tr></thead><tbody><tr><td>beforeCreate</td><td>在实例初始化之后，数据观测和事件配置之前被调用。此时data 和 methods 以及页面的DOM结构都没有初始化，什么都做不了</td></tr><tr><td>created</td><td>在实例创建完成后被立即调用此时data 和 methods已经可以使用  但是页面还没有渲染出来</td></tr><tr><td>beforeMount</td><td>在挂载开始之前被调用   此时页面上还看不到真实数据 只是一个模板页面而已</td></tr><tr><td>mounted</td><td>el被新创建的vm.$el替换，并挂载到实例上去之后调用该钩子。  数据已经真实渲染到页面上  在这个钩子函数里面我们可以使用一些第三方的插件</td></tr><tr><td>beforeUpdate</td><td>数据更新时调用，发生在虚拟DOM打补丁之前。   页面上数据还是旧的</td></tr><tr><td>updated</td><td>由于数据更改导致的虚拟DOM重新渲染和打补丁，在这之后会调用该钩子。 页面上数据已经替换成最新的</td></tr><tr><td>beforeDestroy</td><td>实例销毁之前调用</td></tr><tr><td>destroyed</td><td>实例销毁后调用</td></tr></tbody></table><h3 id="Vue数组处理"><a href="#Vue数组处理" class="headerlink" title="Vue数组处理"></a>Vue数组处理</h3><h4 id="变异方法"><a href="#变异方法" class="headerlink" title="变异方法"></a>变异方法</h4><ul><li>在vue中，直接修改对象属性的值无法触发响应式。当我们直接修改了对象属性的值，只有数据改变，但是页面的内容并没有改变</li><li>变异数组方法，即保持数组方法原有功能不变的前提下对其进行功能拓展</li></ul><table><thead><tr><th align="center">名称</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center"><code>push()</code></td><td align="center">往数组最后面添加一个元素，成功返回当前数组的长度</td></tr><tr><td align="center"><code>pop()</code></td><td align="center">删除数组的最后一个元素，成功返回删除元素的值</td></tr><tr><td align="center"><code>shift()</code></td><td align="center">删除数组的第一个元素，成功返回删除元素的值</td></tr><tr><td align="center"><code>unshift()</code></td><td align="center">往数组的最前面添加一个元素，成功返回当前数据的长度</td></tr><tr><td align="center"><code>splice()</code></td><td align="center">有三个参数，第一个是想要删除的元素的索引(必填)，第二个是想要删除的个数(必填)，第三个是删除后想要在原位置替换的值</td></tr><tr><td align="center"><code>sort()</code></td><td align="center">让数组按照字符编码默认从小到大排序，成功返回排序后的数组</td></tr><tr><td align="center"><code>reverse()</code></td><td align="center">reverse()将数组倒序，成功返回倒序后的数组</td></tr></tbody></table><h4 id="替换数组"><a href="#替换数组" class="headerlink" title="替换数组"></a>替换数组</h4><blockquote><p>不会改变原始数组，但总是返回一个新数组</p></blockquote><table><thead><tr><th align="center">方法</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">filter</td><td align="center">filter() 方法创建一个新的数组，新数组中的元素是通过检查指定数组中符合条件的所有元素。</td></tr><tr><td align="center">concat</td><td align="center">concat() 方法用于连接两个或多个数组。该方法不会改变现有的数组</td></tr><tr><td align="center">slice</td><td align="center">slice() 方法可从已有的数组中返回选定的元素。该方法并不会修改数组，而是返回一个子数组</td></tr></tbody></table><pre class="line-numbers language-html"><code class="language-html"> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>fname<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>add<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>添加<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>del<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>删除<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>change<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>替换<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">:key</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>index<span class="token punctuation">'</span></span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>(item,index) in list<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>{{item}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>js/vue.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token comment" spellcheck="true">/*      Vue数组操作      1、变异方法：会影响数组的原始数据的变化。      2、替换数组：不会影响原始的数组数据，而是形成一个新的数组。    */</span>    <span class="token keyword">var</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      el<span class="token punctuation">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span>      data<span class="token punctuation">:</span> <span class="token punctuation">{</span>        fname<span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">,</span>        list<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'apple'</span><span class="token punctuation">,</span><span class="token string">'orange'</span><span class="token punctuation">,</span><span class="token string">'banana'</span><span class="token punctuation">]</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      methods<span class="token punctuation">:</span> <span class="token punctuation">{</span>        add<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>list<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>fname<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        del<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>list<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        change<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>list <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>list<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="动态数组响应式数据"><a href="#动态数组响应式数据" class="headerlink" title="动态数组响应式数据"></a>动态数组响应式数据</h3><ul><li>Vue.set(a,b,c)    让 触发视图重新更新一遍，数据动态起来</li><li>a是要更改的数据 、   b是数据的第几项、   c是更改后的数据</li></ul><pre class="line-numbers language-html"><code class="language-html"> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>item in list<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>{{item}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>{{info.name}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>{{info.age}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>{{info.gender}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>js/vue.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token comment" spellcheck="true">/*      动态处理响应式数据    */</span>    <span class="token keyword">var</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      el<span class="token punctuation">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span>      data<span class="token punctuation">:</span> <span class="token punctuation">{</span>        list<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'apple'</span><span class="token punctuation">,</span> <span class="token string">'orange'</span><span class="token punctuation">,</span> <span class="token string">'banana'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        info<span class="token punctuation">:</span> <span class="token punctuation">{</span>          name<span class="token punctuation">:</span> <span class="token string">'lisi'</span><span class="token punctuation">,</span>          age<span class="token punctuation">:</span> <span class="token number">12</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// vm.list[1] = 'lemon';</span>    <span class="token comment" spellcheck="true">// Vue.set(vm.list, 2, 'lemon');</span>    vm<span class="token punctuation">.</span>$<span class="token keyword">set</span><span class="token punctuation">(</span>vm<span class="token punctuation">.</span>list<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'lemon'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// vm.info.gender = 'male';</span>    vm<span class="token punctuation">.</span>$<span class="token keyword">set</span><span class="token punctuation">(</span>vm<span class="token punctuation">.</span>info<span class="token punctuation">,</span> <span class="token string">'gender'</span><span class="token punctuation">,</span> <span class="token string">'female'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>案例-图书管理：<a href="https://github.com/qlHuo/studyDemo/tree/master/vueModelTest" target="_blank" rel="noopener">https://github.com/qlHuo/studyDemo/tree/master/vueModelTest</a></p>]]></content>
      
      
      <categories>
          
          <category> vue </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Vue基础(一)-模板语法</title>
      <link href="/archives/ce7946be.html"/>
      <url>/archives/ce7946be.html</url>
      
        <content type="html"><![CDATA[<p><strong>Vue是什么？</strong> Vue (读音 /vjuː/，类似于 <strong>view</strong>) 是一套用于构建用户界面的<strong>渐进式javascript框架</strong>；vue的核心库只关注<strong>视图层</strong>，不仅易于上手，还便于与第三方库或者已有项目整合。</p><h2 id="Vue的基本使用"><a href="#Vue的基本使用" class="headerlink" title="Vue的基本使用"></a>Vue的基本使用</h2><p><strong>1.引入vue.js</strong></p><pre class="line-numbers language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!-- 开发环境版本，包含了有帮助的命令行警告 官网提供的在线js文件--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://cdn.jsdelivr.net/npm/vue/dist/vue.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- 本地下载的js文件--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>js/vue.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>2.创建Vue实例对象(vm)，指定配置对象</strong></p><pre class="line-numbers language-html"><code class="language-html"> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript">        <span class="token keyword">var</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//指定DOM标签容器的选择器，一般使用id选择器</span>            el<span class="token punctuation">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span>            data<span class="token punctuation">:</span> <span class="token punctuation">{</span>               <span class="token comment" spellcheck="true">//页面中需要的数据</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            methods<span class="token punctuation">:</span> <span class="token punctuation">{</span>               <span class="token comment" spellcheck="true">//事件处理函数</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>3.在页面模板中使用Vue指令</strong></p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>{{num}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">v-text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>num<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- 插值表达式：{{}} --></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Vue内置指令"><a href="#Vue内置指令" class="headerlink" title="Vue内置指令"></a>Vue内置指令</h2><p>指令：</p><ul><li>指令的本质是自定义属性</li><li>Vue中指令都是以v-开头</li></ul><h3 id="v-cloak"><a href="#v-cloak" class="headerlink" title="v-cloak"></a>v-cloak</h3><blockquote><p> v-cloak作用：防止页面加载时出现闪烁问题</p></blockquote><p>基本使用：</p><pre class="line-numbers language-html"><code class="language-html"> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token style language-css">  <span class="token comment" spellcheck="true">/*     1、通过属性选择器 选择到 带有属性 v-cloak的标签  让他隐藏 */</span>  <span class="token selector"><span class="token attribute">[v-cloak]</span></span><span class="token punctuation">{</span>    <span class="token property">display</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 2、 让带有插值 语法的   添加 v-cloak 属性          在 数据渲染完场之后，v-cloak 属性会被自动去除，         v-cloak一旦移除也就是没有这个属性了  属性选择器就选择不到该标签         也就是对应的标签会变为可见    --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span>  <span class="token attr-name">v-cloak</span>  <span class="token punctuation">></span></span>{{msg}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>js/vue.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token keyword">var</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      el<span class="token punctuation">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span>      data<span class="token punctuation">:</span> <span class="token punctuation">{</span>        msg<span class="token punctuation">:</span> <span class="token string">'Hello Vue'</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="v-text"><a href="#v-text" class="headerlink" title="v-text"></a>v-text</h3><ul><li>-text指令用于将数据填充到标签中，作用于插值表达式类似，但是没有闪动问题</li><li>如果数据中有HTML标签会将html标签一并输出</li></ul><blockquote><p>注意：此处为单向绑定，数据对象上的值改变，插值会发生变化；但是当插值发生变化并不会影响数据对象的值</p></blockquote><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--          注意:在指令中不要写插值语法  直接写对应的变量名称         一般属性中不加 {{}}  直接写 对应 的数据名     --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">v-text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>msg<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- Vue  中只有在标签的 内容中 才用插值语法 --></span>        {{msg}}    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        el<span class="token punctuation">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span>        data<span class="token punctuation">:</span> <span class="token punctuation">{</span>            msg<span class="token punctuation">:</span> <span class="token string">'Hello Vue.js'</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="v-html"><a href="#v-html" class="headerlink" title="v-html"></a>v-html</h3><ul><li>用法和v-text 相似  但是他可以将HTML片段填充到标签中</li><li>可能有安全问题, 一般只在可信任内容上使用 <code>v-html</code>，<strong>永不</strong>用在用户提交的内容上</li></ul><blockquote><p>它与v-text区别在于v-text输出的是纯文本，浏览器不会对其再进行html解析，但v-html会将其当html标签解析后输出。</p></blockquote><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>     <span class="token comment" spellcheck="true">&lt;!-- 输出：html标签在渲染的时候被解析 --></span>　　<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">v-html</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>html<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 输出：&lt;span>通过双括号绑定&lt;/span> --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>{{message}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>     <span class="token comment" spellcheck="true">&lt;!-- 输出：&lt;span>html标签在渲染的时候被源码输出&lt;/span> --></span>　　<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">v-text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">　　<span class="token keyword">let</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>　　el<span class="token punctuation">:</span> <span class="token string">"#app"</span><span class="token punctuation">,</span>　　data<span class="token punctuation">:</span> <span class="token punctuation">{</span>　　　　message<span class="token punctuation">:</span> <span class="token string">"&lt;span>通过双括号绑定&lt;/span>"</span><span class="token punctuation">,</span>　　　　html<span class="token punctuation">:</span> <span class="token string">"&lt;span>html标签在渲染的时候被解析&lt;/span>"</span><span class="token punctuation">,</span>　　　　text<span class="token punctuation">:</span> <span class="token string">"&lt;span>html标签在渲染的时候被源码输出&lt;/span>"</span><span class="token punctuation">,</span>　　<span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="v-pre"><a href="#v-pre" class="headerlink" title="v-pre"></a>v-pre</h3><ul><li><strong>显示原始信息跳过编译过程</strong></li><li>跳过这个元素和它的子元素的编译过程。</li></ul><blockquote><p><strong>一些静态的内容不需要编译加这个指令可以加快渲染</strong></p></blockquote><pre class="line-numbers language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!--  显示的是{{ this will not be compiled }}  --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">v-pre</span><span class="token punctuation">></span></span>{{ this will not be compiled }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--   即使data里面定义了msg这里仍然是显示的{{msg}}  --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">v-pre</span><span class="token punctuation">></span></span>{{msg}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        el<span class="token punctuation">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span>        data<span class="token punctuation">:</span> <span class="token punctuation">{</span>            msg<span class="token punctuation">:</span> <span class="token string">'Hello Vue.js'</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="v-once"><a href="#v-once" class="headerlink" title="v-once"></a>v-once</h3><blockquote><p>执行一次性的插值【当数据改变时，插值处的内容不会继续更新】</p></blockquote><pre class="line-numbers language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!-- 即使data里面定义了msg 后期我们修改了 仍然显示的是第一次data里面存储的数据即 Hello Vue.js  --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">v-once</span><span class="token punctuation">></span></span>{{ msg}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        el<span class="token punctuation">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span>        data<span class="token punctuation">:</span> <span class="token punctuation">{</span>            msg<span class="token punctuation">:</span> <span class="token string">'Hello Vue.js'</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="双向数据绑定v-model"><a href="#双向数据绑定v-model" class="headerlink" title="双向数据绑定v-model"></a>双向数据绑定v-model</h3><ul><li>当数据发生变化时，视图也就发生变化</li><li>当视图发生变化时，数据也会发生变化</li></ul><blockquote><p><strong>v-model</strong>是一个指令，限制在 <code>&lt;input&gt;、&lt;select&gt;、&lt;textarea&gt;、components</code>中使用</p></blockquote><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>{{msg}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>          当输入框中内容改变的时候，  页面上的msg  会自动更新        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>msg<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>v-model的本质</strong></p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>{{msg}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">v-bind:</span>value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>msg<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">v-on:</span>input</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>handle<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">v-bind:</span>value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>msg<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">v-on:</span>input</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>msg<span class="token punctuation">=</span>$event.target.value<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>msg<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>js/vue.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token comment" spellcheck="true">/*      v-model指令的本质        底层就是通过v-bind:value和v-on:input实现的    */</span>    <span class="token keyword">var</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      el<span class="token punctuation">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span>      data<span class="token punctuation">:</span> <span class="token punctuation">{</span>        msg<span class="token punctuation">:</span> <span class="token string">'hello'</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      methods<span class="token punctuation">:</span> <span class="token punctuation">{</span>        handle<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span><span class="token punctuation">{</span>          <span class="token comment" spellcheck="true">// 使用输入域中的最新的数据覆盖原来的数据</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>msg <span class="token operator">=</span> event<span class="token punctuation">.</span>target<span class="token punctuation">.</span>value<span class="token punctuation">;</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="v-model的修饰符"><a href="#v-model的修饰符" class="headerlink" title="v-model的修饰符"></a>v-model的修饰符</h4><ul><li>v-model.lazy: 鼠标失去焦点时同步数据</li><li>v-model.number: 将输入的数字内容转换为number类型</li><li>v-model.trim: 去除输入框内容中的首尾空格</li></ul><h3 id="事件绑定v-on"><a href="#事件绑定v-on" class="headerlink" title="事件绑定v-on"></a>事件绑定v-on</h3><blockquote><p>v-on就是用来绑定事件的，形式v-on:click –&gt;可缩写为 @click</p></blockquote><pre class="line-numbers language-html"><code class="language-html"> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>{{num}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>            <span class="token comment" spellcheck="true">&lt;!-- 在html中使用data里面的数据不需要加this                 可以直接写事件处理逻辑，但是不推荐这么写            --></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name"><span class="token namespace">v-on:</span>click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>num++<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>点击<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>num++<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>点击1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>            <span class="token comment" spellcheck="true">&lt;!-- 这里的事件处理名称要和methods中函数名的一致--></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>handle<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>点击2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>            <span class="token comment" spellcheck="true">&lt;!-- 这里虽然写了handle()但是并不会调用函数，只有点击的时候才会调用函数--></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>handle()<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>点击3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>js/vue.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        var vm = new Vue({            el: '#app',            data: {                num: 0            }, // 注意点： 这里不要忘记加逗号             // methods  中 主要是定义一些函数            methods: {                handle: function() {                    // 这里的this是Vue的实例对象+                    console.log(this === vm)                        //   在函数中 想要使用data里面的数据 一定要加this                     this.num++;                }            }        });    &lt;/script<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>VUE methods的函数中的this是Vue的实例对象+</strong></p><h4 id="v-on事件函数中传入参数"><a href="#v-on事件函数中传入参数" class="headerlink" title="v-on事件函数中传入参数"></a>v-on事件函数中传入参数</h4><pre class="line-numbers language-html"><code class="language-html"> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>     <span class="token comment" spellcheck="true">&lt;!-- 如果事件直接绑定函数名称，那么默认会传递事件对象作为事件函数的第一个参数 --></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name"><span class="token namespace">v-on:</span>click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>handle1<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>点击1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>     <span class="token comment" spellcheck="true">&lt;!-- 2、如果事件绑定函数调用，那么事件对象必须作为最后一个参数显示传递，                 并且事件对象的名称必须是$event      --></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name"><span class="token namespace">v-on:</span>click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>handle2(123, 456, $event)<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>点击2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="事件修饰符"><a href="#事件修饰符" class="headerlink" title="事件修饰符"></a>事件修饰符</h4><ul><li><p>在事件处理程序中调用 <code>event.preventDefault()</code> 或 <code>event.stopPropagation()</code> 是非常常见的需求。</p></li><li><p>Vue 不推荐我们操作DOM    为了解决这个问题，Vue.js 为 <code>v-on</code> 提供了<a href="https://cn.vuejs.org/v2/api/#v-on" target="_blank" rel="noopener">事件修饰符</a></p></li><li><p>修饰符是由点开头的指令后缀来表示的</p></li><li><p><code>.stop</code> - 调用 <code>event.stopPropagation()</code>。</p></li><li><p><code>.prevent</code> - 调用 <code>event.preventDefault()</code>。</p></li></ul><pre class="line-numbers language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!-- 阻止事件冒泡 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name"><span class="token namespace">v-on:</span>click.stop</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>doThis<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- 阻止默认行为 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name"><span class="token namespace">v-on:</span>submit.prevent</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>onSubmit<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- 修饰符可以串联   即阻止冒泡也阻止默认事件 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name"><span class="token namespace">v-on:</span>click.stop.prevent</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>doThat<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- 只当在 event.target 是当前元素自身时触发处理函数 --></span><span class="token comment" spellcheck="true">&lt;!-- 即事件不是从内部元素触发的 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name"><span class="token namespace">v-on:</span>click.self</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>doThat<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>使用修饰符时，顺序很重要；相应的代码会以同样的顺序产生。因此，用 v-on:click.prevent.self 会阻止所有的点击，而 v-on:click.self.prevent 只会阻止对元素自身的点击。</p></blockquote><h4 id="按键修饰符"><a href="#按键修饰符" class="headerlink" title="按键修饰符"></a>按键修饰符</h4><p><strong>常用的按键修饰符</strong></p><ul><li>.enter ==== enter键</li><li>.tab ==== tab键</li><li>.delate ==== detele键</li><li>.esc ==== 取消键</li><li>.space ==== 空格键</li><li>.up ==== 上</li><li>.down ==== 下</li><li>.left ==== 左</li><li>.right ==== 右</li></ul><pre class="line-numbers language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!-- 只有在 `keyCode` 是 13 时调用 `vm.submit()` --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name"><span class="token namespace">v-on:</span>keyup.13</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- -当点击enter 时调用 `vm.submit()` --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name"><span class="token namespace">v-on:</span>keyup.enter</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!--当点击enter或者space时  时调用 `vm.alertMe()`   --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">v-on:</span>keyup.enter.space</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>alertMe<span class="token punctuation">"</span></span> <span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="自定义按键修饰符别名"><a href="#自定义按键修饰符别名" class="headerlink" title="自定义按键修饰符别名"></a>自定义按键修饰符别名</h4><p>在Vue中可以通过<code>config.keyCodes</code>自定义按键修饰符别名</p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 预先定义了keycode 116（即F5）的别名为f5，因此在文字输入框中按下F5，会触发prompt方法 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">v-on:</span>keydown.f5</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>prompt()<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">    Vue<span class="token punctuation">.</span>config<span class="token punctuation">.</span>keyCodes<span class="token punctuation">.</span>f5 <span class="token operator">=</span> <span class="token number">116</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        el<span class="token punctuation">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span>        methods<span class="token punctuation">:</span> <span class="token punctuation">{</span>            prompt<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'我是 F5！'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="属性绑定v-bind"><a href="#属性绑定v-bind" class="headerlink" title="属性绑定v-bind"></a>属性绑定v-bind</h3><ul><li>v-bind 指令被用来<strong>响应地更新</strong> HTML 属性值</li><li><code>v-bind:href</code>  可以缩写为 ===&gt;   <code>:href</code></li></ul><pre class="line-numbers language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!-- 绑定一个属性 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name"><span class="token namespace">v-bind:</span>src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>imageSrc<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- 缩写 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">:src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>imageSrc<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="v-bind-class-绑定对象"><a href="#v-bind-class-绑定对象" class="headerlink" title="v-bind:class 绑定对象"></a>v-bind:class 绑定对象</h4><ul><li>给v-bind:class 一个对象，以动态地切换class。</li><li>注意：v-bind:class指令可以与普通的class特性共存</li><li>如果绑定的是一个对象 则 键为 对应的类名  值 为对应data中的数据 </li></ul><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style language-css">    <span class="token selector"><span class="token class">.box</span></span><span class="token punctuation">{</span>        <span class="token property">border</span><span class="token punctuation">:</span><span class="token number">1</span>px dashed <span class="token hexcode">#f0f</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token selector"><span class="token class">.textColor</span></span><span class="token punctuation">{</span>        <span class="token property">color</span><span class="token punctuation">:</span><span class="token hexcode">#f00</span><span class="token punctuation">;</span>        <span class="token property">background-color</span><span class="token punctuation">:</span><span class="token hexcode">#eef</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token selector"><span class="token class">.textSize</span></span><span class="token punctuation">{</span>        <span class="token property">font-size</span><span class="token punctuation">:</span><span class="token number">30</span>px<span class="token punctuation">;</span>        <span class="token property">font-weight</span><span class="token punctuation">:</span>bold<span class="token punctuation">;</span>    <span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- isColor和isSize发生变化时，class列表会同步发生变化 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>box<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">v-bind:</span>class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{textColor:isColor, textSize:isSize}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>学习Vue<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>学习Node<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>学习React<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name"><span class="token namespace">v-bind:</span></span><span class="token style-attr language-css"><span class="token attr-name"><span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token punctuation">{</span><span class="token property">color</span><span class="token punctuation">:</span>activeColor,<span class="token property">fontSize</span><span class="token punctuation">:</span>activeSize<span class="token punctuation">}</span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>对象语法<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>sript</span><span class="token punctuation">></span></span>var vm= new Vue({    el:'.box',    data:{        isColor:true,        isSize:true，        activeColor:"red",        activeSize:"25px",    }})<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>sript</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="v-bind-class-绑定数组"><a href="#v-bind-class-绑定数组" class="headerlink" title="v-bind:class 绑定数组"></a>v-bind:class 绑定数组</h4><blockquote><p>v-bind 中支持绑定一个数组    数组中classA和 classB 对应为data中的数据</p></blockquote><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style language-css">    <span class="token selector"><span class="token class">.box</span></span><span class="token punctuation">{</span>        <span class="token property">border</span><span class="token punctuation">:</span><span class="token number">1</span>px dashed <span class="token hexcode">#f0f</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token selector"><span class="token class">.textColor</span></span><span class="token punctuation">{</span>        <span class="token property">color</span><span class="token punctuation">:</span><span class="token hexcode">#f00</span><span class="token punctuation">;</span>        <span class="token property">background-color</span><span class="token punctuation">:</span><span class="token hexcode">#eef</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token selector"><span class="token class">.textSize</span></span><span class="token punctuation">{</span>        <span class="token property">font-size</span><span class="token punctuation">:</span><span class="token number">30</span>px<span class="token punctuation">;</span>        <span class="token property">font-weight</span><span class="token punctuation">:</span>bold<span class="token punctuation">;</span>    <span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>box<span class="token punctuation">"</span></span> <span class="token attr-name">:class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>[classA, classB]<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>学习Vue<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>学习Node<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>学习React<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript"><span class="token keyword">var</span> vm<span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    el<span class="token punctuation">:</span><span class="token string">'.box'</span><span class="token punctuation">,</span>    data<span class="token punctuation">:</span><span class="token punctuation">{</span>        classA<span class="token punctuation">:</span> <span class="token string">"textColor"</span><span class="token punctuation">,</span>        classB<span class="token punctuation">:</span> <span class="token string">"textSize"</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="绑定对象和绑定数组-的区别"><a href="#绑定对象和绑定数组-的区别" class="headerlink" title="绑定对象和绑定数组 的区别"></a>绑定对象和绑定数组 的区别</h4><ul><li>绑定对象的时候 对象的属性 即要渲染的类名 对象的属性值对应的是 data 中的数据 </li><li>绑定数组的时候数组里面存的是data 中的数据 </li></ul><h4 id="绑定style"><a href="#绑定style" class="headerlink" title="绑定style"></a>绑定style</h4><pre class="line-numbers language-html"><code class="language-html"> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name"><span class="token namespace">v-bind:</span></span><span class="token style-attr language-css"><span class="token attr-name"><span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value">styleObject</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>绑定样式对象<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>'<span class="token comment" spellcheck="true">&lt;!-- CSS 属性名可以用驼峰式 (camelCase) 或短横线分隔 (kebab-case，记得用单引号括起来)    --></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name"><span class="token namespace">v-bind:</span></span><span class="token style-attr language-css"><span class="token attr-name"><span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token punctuation">{</span> <span class="token property">color</span><span class="token punctuation">:</span> activeColor, <span class="token property">fontSize</span><span class="token punctuation">:</span> fontSize,<span class="token property">background</span><span class="token punctuation">:</span><span class="token string">'red'</span> <span class="token punctuation">}</span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>内联样式<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!--组语法可以将多个样式对象应用到同一个元素 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name"><span class="token namespace">v-bind:</span></span><span class="token style-attr language-css"><span class="token attr-name"><span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value">[styleObj<span class="token number">1</span>, styleObj<span class="token number">2</span>]</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript"> <span class="token keyword">var</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>            el<span class="token punctuation">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span>            data<span class="token punctuation">:</span> <span class="token punctuation">{</span>                styleObject<span class="token punctuation">:</span> <span class="token punctuation">{</span>                    color<span class="token punctuation">:</span> <span class="token string">'green'</span><span class="token punctuation">,</span>                    fontSize<span class="token punctuation">:</span> <span class="token string">'30px'</span><span class="token punctuation">,</span>                    background<span class="token punctuation">:</span><span class="token string">'red'</span>                <span class="token punctuation">}</span><span class="token punctuation">,</span>                activeColor<span class="token punctuation">:</span> <span class="token string">'green'</span><span class="token punctuation">,</span>                fontSize<span class="token punctuation">:</span> <span class="token string">"30px"</span><span class="token punctuation">,</span>                styleObj1<span class="token punctuation">:</span> <span class="token punctuation">{</span>                    color<span class="token punctuation">:</span> <span class="token string">'red'</span>                <span class="token punctuation">}</span><span class="token punctuation">,</span>                styleObj2<span class="token punctuation">:</span> <span class="token punctuation">{</span>                    fontSize<span class="token punctuation">:</span> <span class="token string">'30px'</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="v-if和v-show"><a href="#v-if和v-show" class="headerlink" title="v-if和v-show"></a>v-if和v-show</h3><ul><li>多个元素 通过条件判断展示或者隐藏某个元素</li><li>两个视图之间的切换</li></ul><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">v-if</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>score<span class="token punctuation">></span><span class="token punctuation">=</span>90<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>优秀<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">v-else-if</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>score<span class="token punctuation">></span><span class="token punctuation">=</span>80<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>良好<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">v-else-if</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>score<span class="token punctuation">></span><span class="token punctuation">=</span>60<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>一般<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">v-else</span><span class="token punctuation">></span></span>比较差<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">v-show</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>flag<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>测试v-show<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name"><span class="token namespace">v-on:</span>click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>handle<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>点击<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>js/vue.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token comment" spellcheck="true">/*      分支结构      v-show的原理：控制元素样式是否显示 display:none    */</span>    <span class="token keyword">var</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      el<span class="token punctuation">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span>      data<span class="token punctuation">:</span> <span class="token punctuation">{</span>        score<span class="token punctuation">:</span> <span class="token number">10</span><span class="token punctuation">,</span>        flag<span class="token punctuation">:</span> <span class="token boolean">false</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      methods<span class="token punctuation">:</span> <span class="token punctuation">{</span>        handle<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>flag <span class="token operator">=</span> <span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>flag<span class="token punctuation">;</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>v-if和v-show之间的区别</strong></p><ul><li>v-show的本质就是把标签设置为<code>display:none;</code>,来控制显示隐藏</li><li>v-show只编译一次，后面其实就是控制css，而v-if在不停的销毁和创建，所以v-show的性能更高一点</li><li>v-if是动态的向DOM树内添加或者删除DOM元素</li><li>v-if切换的有一个局部编译/卸载的过程，切换过程中合适地销毁和重建内部的事件监听和子组件</li></ul><h3 id="循环结构"><a href="#循环结构" class="headerlink" title="循环结构"></a>循环结构</h3><h4 id="v-for"><a href="#v-for" class="headerlink" title="v-for"></a>v-for</h4><p>当 <code>v-if</code> 与 <code>v-for</code> 一起使用时，<code>v-for</code> 具有比 <code>v-if</code> 更高的优先级。</p><pre class="line-numbers language-html"><code class="language-html">  <span class="token comment" spellcheck="true">&lt;!--  循环结构-遍历对象        v 代表   对象的value        k  代表对象的 键         i  代表索引        ---></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">v-if</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>v<span class="token punctuation">=</span><span class="token punctuation">=</span>13<span class="token punctuation">'</span></span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>(v,k,i) in obj<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>{{v + '---' + k + '---' + i}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dvi</span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>item in items<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    {{ item.message }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript"> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  el<span class="token punctuation">:</span> <span class="token string">'#example-1'</span><span class="token punctuation">,</span>  data<span class="token punctuation">:</span> <span class="token punctuation">{</span>    items<span class="token punctuation">:</span> <span class="token punctuation">[</span>      <span class="token punctuation">{</span> message<span class="token punctuation">:</span> <span class="token string">'Foo'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token punctuation">{</span> message<span class="token punctuation">:</span> <span class="token string">'Bar'</span> <span class="token punctuation">}</span>    <span class="token punctuation">]</span><span class="token punctuation">,</span>    obj<span class="token punctuation">:</span> <span class="token punctuation">{</span>        uname<span class="token punctuation">:</span> <span class="token string">'zhangsan'</span><span class="token punctuation">,</span>        age<span class="token punctuation">:</span> <span class="token number">13</span><span class="token punctuation">,</span>        gender<span class="token punctuation">:</span> <span class="token string">'female'</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="key的作用"><a href="#key的作用" class="headerlink" title="key的作用"></a>key的作用</h4><ul><li><strong>key来给每个节点做一个唯一标识</strong></li><li><strong>key的作用主要是为了高效的更新虚拟DOM</strong></li></ul><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>item in items<span class="token punctuation">"</span></span> <span class="token attr-name">:key</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>item.id<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="理解MVVM"><a href="#理解MVVM" class="headerlink" title="理解MVVM"></a>理解MVVM</h2><ol><li>MVVM是前端视图层的概念，主要关注于 视图层分离，也就是说：MVVM把前端的视图层，分为了 三部分 Model, View , VM ViewModel</li><li>M：Model，<strong>数据层</strong> Vue中数据层都放在data里面</li><li>V：View，<strong>视图层</strong> 就是我们看到的html页面</li><li>VM：view-model，<strong>控制器</strong> 将数据和视图层建立联系</li></ol><p><img src="/medias/loading.gif" data-original="https://gitee.com/aurorapic/BlogPic/raw/master/img/20200430112628.png" alt="图解MVVM"></p><p>案例地址：<a href="https://github.com/qlHuo/studyDemo/tree/master/vueModelTest" target="_blank" rel="noopener">https://github.com/qlHuo/studyDemo/tree/master/vueModelTest</a></p>]]></content>
      
      
      <categories>
          
          <category> vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>jQuery学习</title>
      <link href="/archives/7a95906a.html"/>
      <url>/archives/7a95906a.html</url>
      
        <content type="html"><![CDATA[<h2 id="jQuery介绍"><a href="#jQuery介绍" class="headerlink" title="jQuery介绍"></a>jQuery介绍</h2><h3 id="jq和js的对比"><a href="#jq和js的对比" class="headerlink" title="jq和js的对比"></a>jq和js的对比</h3><p><strong>js的缺点：</strong></p><ol><li>查找元素的方法太少，而且麻烦</li><li>遍历伪数组麻烦，通常要嵌套一大堆的for循环</li><li>有兼容性问题，对于ie678需要写兼容代码</li><li>动画效果需要进行封装，也很麻烦</li><li>代码冗余</li></ol><p><strong>jq的优点</strong></p><p>jq demo：</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token function">$</span><span class="token punctuation">(</span>document<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ready</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#btn1"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token comment" spellcheck="true">//隐式迭代：偷偷的遍历，在jQuery中，不需要手动写for循环了，会自动进行遍历。</span>        <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"div"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#btn2"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"div"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token string">"我是内容"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>优点总结：</p><ol><li>查找元素的方法多种多样，非常灵活</li><li>有饮食迭代特性，不需要手写for循环</li><li>已经兼容ie，没有兼容性问题（1.xxx版本）</li><li>实现动画简单，而且动画效果丰富</li><li>代码简单，冗余少</li></ol><h3 id="什么是jquery？"><a href="#什么是jquery？" class="headerlink" title="什么是jquery？"></a>什么是jquery？</h3><p>jQuery是js的一个库，封装了开发时常用的功能，方便我们使用，提高开发效率。</p><p>jq相关网站：<a href="https://jquery.com/" target="_blank" rel="noopener">jQuery官网</a>        <a href="https://www.html.cn/jqapi-1.9/" target="_blank" rel="noopener">jQuery中文文档</a>    </p><p><strong>版本：</strong></p><ul><li>1.x版本：能够兼容IE678浏览器</li><li>2.x版本不兼容IE678浏览器</li><li>1.x和2.x版本的jq不再更新，现在只更新3.x版本（不兼容IE678，更加精简）</li></ul><blockquote><p>jquery-1.12.4.min.js:压缩版本，适用于生产环境，因为文件比较小，去除了注释、换行、空格等东西，但是基本没有颗阅读性。<br>jquery-1.12.4.js:未压缩版本，适用于学习与开发环境，源码清晰，易阅读。</p></blockquote><h3 id="如何使用？"><a href="#如何使用？" class="headerlink" title="如何使用？"></a>如何使用？</h3><ol><li>引入jq文件（引入的代码一定要放在js代码的最上面）</li><li>入口函数</li><li>功能实现代码（事件处理）</li></ol><h3 id="jQuery的两大特性"><a href="#jQuery的两大特性" class="headerlink" title="jQuery的两大特性"></a>jQuery的两大特性</h3><ol><li>链式编程：比如<code>.show()</code>和<code>.html()</code>可以连写成<code>.show().html()</code>。</li><li>隐式迭代：隐式 对应的是 显式。隐式迭代的意思是：在方法的内部进行循环遍历，而不用我们自己再进行循环，简化我们的操作，方便我们调用。</li></ol><blockquote><p>注意：链式编程的两个条件：设置行操作+返回值是jq对象，否则，如果是设置性操作或者返回值不是一个jq对象，那么就不能进行链式编程</p><p>end(); // end方法会改变jQuery对象的DOM对象，回复到上一次的状态，并且返回匹配元素之前的状态。</p></blockquote><h3 id="入口函数"><a href="#入口函数" class="headerlink" title="入口函数"></a>入口函数</h3><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//1.文档（DOM）加载完毕，执行这个函数（不包括图片和外链）</span><span class="token function">$</span><span class="token punctuation">(</span>document<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ready</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//2.文档（DOM）加载完毕，执行这个函数（不包括图片和外链）</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//3.文档加载完毕，图片也加载完毕的时候，在执行这个函数。</span><span class="token function">$</span><span class="token punctuation">(</span>window<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ready</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>jQuery入口函数和js入口函数的区别：</strong></p><p>区别一：书写个数不同：</p><ul><li>js的入口函数只能出现一次，出现多次会存在事件覆盖的问题。</li><li>jq的入口函数，可以出现多次，不存在事件覆盖的问题。</li></ul><p>区别二：执行的时机不同</p><ul><li>js的入口函数是在所有的文件资源加载完毕之后，才执行。这些文件资源包括：页面文档，外部js文件，外部css文件、图片等。</li><li>jq的入口函数是在文档加载完成后执行。即：DOM树加载完成后就可以操作DOM，不用等到所有的外部资源都加载完成。</li></ul><blockquote><p>文档加载的顺序：从上往下，变解析便执行。</p></blockquote><h3 id="jQuery的-符号"><a href="#jQuery的-符号" class="headerlink" title="jQuery的$符号"></a>jQuery的$符号</h3><p>$ 在jQuery中实际就是 jQuery对象。$符号实际上是一个函数的名字</p><pre class="line-numbers language-javascript"><code class="language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>$ <span class="token operator">===</span> jQuery<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//true</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>$符号冲突</strong></p><p>有时我们引入的其他js文件中也使用$符号，那么就会与jq中的$产生冲突。jq可以释放$符号的控制权，并且可以将$符号的功能转移到其它变量中。</p><pre class="line-numbers language-javascript"><code class="language-javascript"> <span class="token comment" spellcheck="true">//jQuery释放$的控制权,将$的功能转移到$$</span>    <span class="token keyword">var</span> $$ <span class="token operator">=</span> $<span class="token punctuation">.</span><span class="token function">noConflict</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token function">$$</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="jQuery对象与DOM对象的区别"><a href="#jQuery对象与DOM对象的区别" class="headerlink" title="jQuery对象与DOM对象的区别"></a>jQuery对象与DOM对象的区别</h2><ol><li>DOM对象：使用javascript中的方法获取页面中元素返回的对象，就是DOM对象</li><li>jQuery对象：就是使用jquery方法获取页面中元素返回的对象，就是jQuery对象</li><li>jQuery对象其实就是DOM对象的包装集（包装了DOM对象的集合（伪数组））</li><li>DOM对象与jQuery对象的方法不能混用</li></ol><p>DOM对象转换为jQuery对象：【联想记忆：花钱】</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">var</span> $obj <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span>domObj<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// $(document).ready(function(){});就是典型的DOM对象转jQuery对象</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>jQuery对象转换成DOM对象：</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">var</span> $li <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"li"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//$li 获取的是伪数组</span><span class="token comment" spellcheck="true">//第一种方法（推荐使用）</span>$li<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true">//第二种方法</span>$li<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>如果想要用哪种方式设置属性或方法，必须转换成该类型。</p></blockquote><h2 id="jQuery选择器"><a href="#jQuery选择器" class="headerlink" title="jQuery选择器"></a>jQuery选择器</h2><h3 id="什么是jQuery选择器"><a href="#什么是jQuery选择器" class="headerlink" title="什么是jQuery选择器"></a>什么是jQuery选择器</h3><p>jQuery选择器是jQuery为我们提供的一组方法，让我们更加方便的获取到页面中的元素。注意：jQuery选择器返回的是jQuery对象。</p><p>jQuery选择器有很多，基本兼容了CSS1到CSS3所有的选择器，并且jQuery还添加了很多更加复杂的选择器。<a href="https://www.html.cn/jqapi-1.9/" target="_blank" rel="noopener">查看jQuery文档</a></p><h3 id="基本选择器"><a href="#基本选择器" class="headerlink" title="基本选择器"></a>基本选择器</h3><table><thead><tr><th align="center">名称</th><th align="center">用法</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">ID选择器</td><td align="center">$(#”id”);</td><td align="center">获取指定的ID选择器</td></tr><tr><td align="center">类选择器</td><td align="center">$(“.class”);</td><td align="center">获取同一个类class的元素</td></tr><tr><td align="center">标签选择器</td><td align="center">$(“div”);</td><td align="center">获取同一类标签的所有元素</td></tr><tr><td align="center">并集选择器</td><td align="center">$(“div,p,li”);</td><td align="center">使用逗号分隔，只要符合条件之一即可。</td></tr><tr><td align="center">交集选择器</td><td align="center">$(“div.redClass”);</td><td align="center">获取class为redClass的div元素</td></tr></tbody></table><h3 id="层级选择器"><a href="#层级选择器" class="headerlink" title="层级选择器"></a>层级选择器</h3><table><thead><tr><th align="center">名称</th><th align="center">用法</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">子代选择器</td><td align="center">$(“ul&gt;li”);</td><td align="center">使用&gt; ,获取儿子层级的元素。</td></tr><tr><td align="center">后代选择器</td><td align="center">$(“ul li”);</td><td align="center">使用空格，选择后代元素。</td></tr></tbody></table><h3 id="过滤选择器"><a href="#过滤选择器" class="headerlink" title="过滤选择器"></a>过滤选择器</h3><blockquote><p>这类选择器都带冒号：还有很多其他的过滤选择器，可以到<a href="https://www.html.cn/jqapi-1.9/" target="_blank" rel="noopener">文档</a>中查看</p></blockquote><table><thead><tr><th align="center">名称</th><th align="center">用法</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">:eq(index)</td><td align="center">$(“li:eq(2)”).css(“color”,”red”);</td><td align="center">获取li元素中，索引为2的元素，索引从0开始</td></tr><tr><td align="center">:odd</td><td align="center">$(“li:odd”).css(“color”,”red”);</td><td align="center">获取li元素中，索引为奇数的元素</td></tr><tr><td align="center">:even</td><td align="center">$(“li:even”).css(“color”:”red”);</td><td align="center">获取li元素中，索引为偶数的元素</td></tr><tr><td align="center">:checked</td><td align="center">$(“div input:checked”).css(“color”,”red”);</td><td align="center">获取div元素中，input的checked值为true的元素</td></tr></tbody></table><h3 id="筛选选择器（方法）"><a href="#筛选选择器（方法）" class="headerlink" title="筛选选择器（方法）"></a>筛选选择器（方法）</h3><blockquote><p>筛选选择器的功能与过滤选择器有点类似，但是用法不一样，筛选选择器主要是<strong>方法</strong></p></blockquote><table><thead><tr><th align="center">名称</th><th align="center">用法</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">children(selector)</td><td align="center">$(“ul”).children(“li”);</td><td align="center">相当于$(“ul&gt;li”),子代选择器</td></tr><tr><td align="center">find(selector)</td><td align="center">$(“ul”).find(“li”);</td><td align="center">相当于$(“ul li”),后代选择器</td></tr><tr><td align="center">siblings(selector)</td><td align="center">$(“#first”).siblings(“li”);</td><td align="center">查找兄弟节点不包括自己本身</td></tr><tr><td align="center">parent()</td><td align="center">$(“#first”).parent();</td><td align="center">查找父亲节点</td></tr><tr><td align="center">eq(index)</td><td align="center">$(“li”).eq(2);</td><td align="center">相当于$(“li:eq(2)”),index 从0开始</td></tr><tr><td align="center">next()</td><td align="center">$(“li”).next();</td><td align="center">找下一个兄弟元素</td></tr><tr><td align="center">prev()</td><td align="center">$(“li”).prev();</td><td align="center">找上一级兄弟元素</td></tr></tbody></table><h2 id="jQuery属性操作"><a href="#jQuery属性操作" class="headerlink" title="jQuery属性操作"></a>jQuery属性操作</h2><h3 id="css"><a href="#css" class="headerlink" title="css()"></a>css()</h3><p>css()方法主要用来修改标签的样式：</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//修改单个样式，name:样式名    value：样式值</span><span class="token function">css</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"li"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">css</span><span class="token punctuation">(</span><span class="token string">"color"</span><span class="token punctuation">,</span><span class="token string">"red"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//修改多个样式,传入json格式的数据</span><span class="token function">css</span><span class="token punctuation">(</span>json<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"li"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">css</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    color<span class="token punctuation">:</span> <span class="token string">"red"</span><span class="token punctuation">,</span>    font<span class="token operator">-</span>size<span class="token punctuation">:</span> <span class="token string">"28px"</span><span class="token punctuation">,</span>    border<span class="token punctuation">:</span> <span class="token string">"1px solid #ccc"</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//获取元素的值的时候只会返回第一个元素的值。</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"li"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">css</span><span class="token punctuation">(</span><span class="token string">"font-size"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="class操作"><a href="#class操作" class="headerlink" title="class操作"></a>class操作</h3><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 添加一个类</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"li"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addClass</span><span class="token punctuation">(</span><span class="token string">"basic"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//移除一个类</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"li"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">removeClass</span><span class="token punctuation">(</span><span class="token string">"bigger"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//判断是否存在这个类</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"li"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">hasClass</span><span class="token punctuation">(</span><span class="token string">"bigger"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//判断li有没有basic类，如果有，就移除他，如果没有，添加他</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"li"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toggleClass</span><span class="token punctuation">(</span><span class="token string">"basic"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="attr-属性操作"><a href="#attr-属性操作" class="headerlink" title="attr()属性操作"></a>attr()属性操作</h3><p>用法和css()用法一致</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//设置单个属性</span><span class="token function">attr</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"img"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">attr</span><span class="token punctuation">(</span><span class="token string">"alt"</span><span class="token punctuation">,</span> <span class="token string">"图破了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"img"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">attr</span><span class="token punctuation">(</span><span class="token string">"title"</span><span class="token punctuation">,</span> <span class="token string">"错错错错"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//设置多个属性</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"img"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">attr</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    alt<span class="token punctuation">:</span><span class="token string">"图破了"</span><span class="token punctuation">,</span>    title<span class="token punctuation">:</span><span class="token string">"错错错"</span><span class="token punctuation">,</span>    aa<span class="token punctuation">:</span><span class="token string">"bb"</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//获取属性值</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"img"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">attr</span><span class="token punctuation">(</span><span class="token string">"title"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="removeAttr-移除属性"><a href="#removeAttr-移除属性" class="headerlink" title="removeAttr()移除属性"></a>removeAttr()移除属性</h3><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//删除单个属性</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'#box'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">removeAttr</span><span class="token punctuation">(</span><span class="token string">'name'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'#box'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">removeAttr</span><span class="token punctuation">(</span><span class="token string">'class'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//删除多个属性</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'#box'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">removeAttr</span><span class="token punctuation">(</span><span class="token string">'name class'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="prop-方法"><a href="#prop-方法" class="headerlink" title="prop()方法"></a>prop()方法</h3><blockquote><p>prop()方法用来设置 或 返回 被选元素的属性和值。</p></blockquote><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//返回属性的值，返回的是第一个匹配元素的值</span><span class="token function">$</span><span class="token punctuation">(</span>selector<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">prop</span><span class="token punctuation">(</span>property<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//设置属性单个属性值</span><span class="token function">$</span><span class="token punctuation">(</span>selector<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">prop</span><span class="token punctuation">(</span>property<span class="token punctuation">,</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//设置多个属性的值</span><span class="token function">$</span><span class="token punctuation">(</span>selector<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">prop</span><span class="token punctuation">(</span><span class="token punctuation">{</span>property<span class="token punctuation">:</span>value<span class="token punctuation">,</span>property<span class="token punctuation">:</span>value<span class="token punctuation">,</span><span class="token operator">...</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="attr-和prop-的区别"><a href="#attr-和prop-的区别" class="headerlink" title="attr()和prop()的区别"></a>attr()和prop()的区别</h3><ol><li>对于布尔类型的属性（属性值是true或false：checked），使用prop()设置或获取属性</li><li>对于非布尔类型的属性（alt，title等），使用attr()设置或获取属性</li></ol><blockquote><p>attr()和prop()是针对于 <strong>标签</strong> 的属性设置或者获取值，css()是针对于 <strong>样式</strong> 的属性设置值</p></blockquote><h3 id="html-方法"><a href="#html-方法" class="headerlink" title="html() 方法"></a>html() 方法</h3><p>类似于innerHTML()</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//获取标签元素中的所有内容</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'#box'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">html</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//设置值：设置该元素中的所有内容，会替换掉原来标签中的内容,不包含标签</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'#box'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">html</span><span class="token punctuation">(</span><span class="token string">'&lt;a href="https://www.baidu.com">百度一下&lt;/a>'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="text-方法"><a href="#text-方法" class="headerlink" title="text()方法"></a>text()方法</h3><p>类似于innerText()</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//获取元素中包含的文本内容</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'#box'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//设置该元素中的文本内容,包含标签元素</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'#box'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token string">'&lt;a href="https://www.baidu.com">百度一下&lt;/a>'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="val"><a href="#val" class="headerlink" title="val()"></a>val()</h3><blockquote><p>获取 或 设置 <strong>表单</strong>标签的value值的方法。.val() 不带参数是获取值，带参数是设置值</p></blockquote><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//获取值</span><span class="token function">$</span><span class="token punctuation">(</span>selector<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">val</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//设置值</span><span class="token function">$</span><span class="token punctuation">(</span>selector<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">val</span><span class="token punctuation">(</span><span class="token string">"哈哈哈"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="jQuery动画"><a href="#jQuery动画" class="headerlink" title="jQuery动画"></a>jQuery动画</h2><h3 id="显示和隐藏动画"><a href="#显示和隐藏动画" class="headerlink" title="显示和隐藏动画"></a>显示和隐藏动画</h3><h4 id="显示动画："><a href="#显示动画：" class="headerlink" title="显示动画："></a>显示动画：</h4><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//1.无参数，表示让指定的元素直接显示出来，底层通过display: block;实现</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"div"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//2.通过控制元素的宽高、透明度、display属性，逐渐显示，3秒后显示完毕</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//3.参数可以是：slow：600ms；normal：400ms；fast: 200ms;</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"div"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token string">"slow"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//show(毫秒值，回调函数);</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"div"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token number">5000</span><span class="token punctuation">,</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"动画执行完毕！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>上面的四种方式几乎一致：参数可以有两个，第一个是动画的执行时长，第二个是动画结束后执行的回调函数。</p></blockquote><h4 id="隐藏动画"><a href="#隐藏动画" class="headerlink" title="隐藏动画"></a>隐藏动画</h4><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//1.直接隐藏，相当于display: none;</span><span class="token function">$</span><span class="token punctuation">(</span>selector<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">hide</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//2.1s后隐藏完毕</span><span class="token function">$</span><span class="token punctuation">(</span>selector<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">hide</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//3.同show()一样</span><span class="token function">$</span><span class="token punctuation">(</span>selector<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">hide</span><span class="token punctuation">(</span><span class="token string">"slow"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//4.hide(动画时长,回调函数);</span><span class="token function">$</span><span class="token punctuation">(</span>selector<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">hide</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="开关式显示隐藏动画"><a href="#开关式显示隐藏动画" class="headerlink" title="开关式显示隐藏动画"></a>开关式显示隐藏动画</h4><blockquote><p>参数与show()和hide()一致，显示和隐藏的来回切换采用的是toggle()方法：就是先执行show()，再执行hide()。</p></blockquote><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'#box'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toggle</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="滑动和滑出"><a href="#滑动和滑出" class="headerlink" title="滑动和滑出"></a>滑动和滑出</h3><h4 id="滑入动画效果-类似于生活中的卷帘门"><a href="#滑入动画效果-类似于生活中的卷帘门" class="headerlink" title="滑入动画效果(类似于生活中的卷帘门)"></a>滑入动画效果(类似于生活中的卷帘门)</h4><blockquote><p>参数同 show()和hide()。省略参数或者传入不合法的字符串，那么则使用默认值：400毫秒（同样适用于fadeIn/slideDown/slideUp）</p></blockquote><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//下拉动画显示元素</span><span class="token function">$</span><span class="token punctuation">(</span>selector<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">slideDown</span><span class="token punctuation">(</span>speed<span class="token punctuation">,</span> 回调函数<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="滑出动画效果"><a href="#滑出动画效果" class="headerlink" title="滑出动画效果"></a>滑出动画效果</h4><pre class="line-numbers language-javascript"><code class="language-javascript"> <span class="token function">$</span><span class="token punctuation">(</span>selector<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">slideUp</span><span class="token punctuation">(</span>speed<span class="token punctuation">,</span> 回调函数<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="滑入滑出切换动画效果"><a href="#滑入滑出切换动画效果" class="headerlink" title="滑入滑出切换动画效果"></a>滑入滑出切换动画效果</h4><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token function">$</span><span class="token punctuation">(</span>selector<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">slideToggle</span><span class="token punctuation">(</span>speed<span class="token punctuation">,</span>回调函数<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="淡入淡出动画"><a href="#淡入淡出动画" class="headerlink" title="淡入淡出动画"></a>淡入淡出动画</h3><blockquote><p>参数同show()和hide();</p></blockquote><h4 id="淡入动画效果"><a href="#淡入动画效果" class="headerlink" title="淡入动画效果"></a>淡入动画效果</h4><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//让元素以淡淡的方式，逐渐展现。通过改变透明度实现 </span><span class="token function">$</span><span class="token punctuation">(</span>selector<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fadeIn</span><span class="token punctuation">(</span>speed<span class="token punctuation">,</span> callback<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="淡出动画效果"><a href="#淡出动画效果" class="headerlink" title="淡出动画效果"></a>淡出动画效果</h4><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//让元素以淡淡的方式，逐渐隐藏。通过改变透明度实现 </span><span class="token function">$</span><span class="token punctuation">(</span>selector<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fadeOut</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="淡入淡出切换动画效果"><a href="#淡入淡出切换动画效果" class="headerlink" title="淡入淡出切换动画效果"></a>淡入淡出切换动画效果</h4><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//作用：通过改变透明度，切换匹配元素的显示或隐藏状态。 </span><span class="token function">$</span><span class="token punctuation">(</span>selector<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fadeToggle</span><span class="token punctuation">(</span><span class="token string">'fast'</span><span class="token punctuation">,</span> callback<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="自定义动画"><a href="#自定义动画" class="headerlink" title="自定义动画"></a>自定义动画</h3><p>语法：</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//执行一组css属性自定义动画</span><span class="token function">$</span><span class="token punctuation">(</span>selector<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">animate</span><span class="token punctuation">(</span><span class="token punctuation">{</span>params<span class="token punctuation">}</span><span class="token punctuation">,</span> speed<span class="token punctuation">,</span>type<span class="token punctuation">,</span>callback<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>参数的含义：</p><ol><li>{params}: 对象，里面可以传需要动画的样式；必选；</li><li>speed: 动画执行的时间，默认是norma，可选slow, normal,fast,或者自定义时长；可选；</li><li>type:  表示过渡使用哪种缓动函数，jQuery自身提供”linear” 和 “swing”，默认是swing；可选参数；</li><li>callback：回调函数，在动画完成时执行。</li></ol><p>demo：</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//linear:线性 匀速</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#box3"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">animate</span><span class="token punctuation">(</span><span class="token punctuation">{</span>left<span class="token punctuation">:</span><span class="token number">800</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">8000</span><span class="token punctuation">,</span> <span class="token string">"linear"</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"hahaha"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="停止动画stop"><a href="#停止动画stop" class="headerlink" title="停止动画stop()"></a>停止动画stop()</h3><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token function">$</span><span class="token punctuation">(</span>selector<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">stop</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>stop()里面有两个参数：clearQueue和jumpToEnd</strong></p><ul><li>clearQueue：是否清除动画队列   </li><li>true： 后续动画不执行。</li><li>false：后续动画会执行。</li><li>jumpToEnd： 是否跳转到当前动画的最终效果 </li><li>true： 立即执行完成当前动画。 </li><li>false：立即停止当前动画。</li></ul><blockquote><p>参数默认是false，实际中直接写stop()多：停止之前的动画，然后执行后续动画。<strong>stop()函数要写在动画函数之前</strong></p></blockquote><h2 id="jQuery文档节点操作"><a href="#jQuery文档节点操作" class="headerlink" title="jQuery文档节点操作"></a>jQuery文档节点操作</h2><h3 id="插入操作"><a href="#插入操作" class="headerlink" title="插入操作"></a>插入操作</h3><h4 id="1-append"><a href="#1-append" class="headerlink" title="1.append()"></a>1.append()</h4><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//追加某元素，在父元素中添加新的子元素。子元素可以为：stirng | element（js对象） | jquery元素</span>父元素<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>子元素<span class="token punctuation">)</span>demo<span class="token punctuation">:</span><span class="token keyword">var</span> oli <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'li'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>oli<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token string">'哈哈哈'</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//string</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#box"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">'&lt;a href="http://baidu.com" target="_blank">百度&lt;/a>'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//js对象</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'ul'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>oli<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//jquery元素</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#box"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'.app'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-appendTo"><a href="#2-appendTo" class="headerlink" title="2.appendTo()"></a>2.appendTo()</h4><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//追加到某元素 子元素添加到父元素,作用同append</span>子元素<span class="token punctuation">.</span><span class="token function">appendTo</span><span class="token punctuation">(</span>父元素<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><blockquote><p>使用appendTo() 方式能够更好的利用链式编程的特性：先设置子元素的样式，然后将子元素添加到父元素中</p></blockquote><h4 id="3-prepend"><a href="#3-prepend" class="headerlink" title="3.prepend()"></a>3.prepend()</h4><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//前置添加， 添加到父元素的第一个位置</span>父元素<span class="token punctuation">.</span><span class="token function">prepend</span><span class="token punctuation">(</span>子元素<span class="token punctuation">)</span>；<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="4-prependTo"><a href="#4-prependTo" class="headerlink" title="4.prependTo()"></a>4.prependTo()</h4><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//前置添加，添加到父元素的第一个位置，用法同appendTo()</span>子元素<span class="token punctuation">.</span><span class="token function">prependTo</span><span class="token punctuation">(</span>父元素<span class="token punctuation">)</span>；<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="5-after-和insertAfter"><a href="#5-after-和insertAfter" class="headerlink" title="5.after()和insertAfter()"></a>5.after()和insertAfter()</h4><pre class="line-numbers language-javascript"><code class="language-javascript">兄弟元素<span class="token punctuation">.</span><span class="token function">after</span><span class="token punctuation">(</span>要插入的兄弟元素<span class="token punctuation">)</span>；要插入的兄弟元素<span class="token punctuation">.</span><span class="token function">inserAfter</span><span class="token punctuation">(</span>兄弟元素<span class="token punctuation">)</span>；<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><blockquote><p>在匹配的元素之后插入内容</p></blockquote><h4 id="6-before-和insertBefore"><a href="#6-before-和insertBefore" class="headerlink" title="6.before()和insertBefore()"></a>6.before()和insertBefore()</h4><pre class="line-numbers language-javascript"><code class="language-javascript">兄弟元素<span class="token punctuation">.</span><span class="token function">before</span><span class="token punctuation">(</span>要插入的兄弟元素<span class="token punctuation">)</span>；要插入的兄弟元素<span class="token punctuation">.</span><span class="token function">inserBefore</span><span class="token punctuation">(</span>兄弟元素<span class="token punctuation">)</span>；<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><blockquote><p>在匹配元素之前插入内容</p></blockquote><h3 id="克隆操作"><a href="#克隆操作" class="headerlink" title="克隆操作"></a>克隆操作</h3><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//克隆匹配的DOM元素</span><span class="token function">$</span><span class="token punctuation">(</span>selector<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>clone():可选参数true 或 false</p><ul><li>true：是深度复制，会复制事件</li><li>false：也是深度复制，但不会复制事件。false是默认值</li></ul><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'button'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 1.clone()：克隆匹配的DOM元素</span> <span class="token comment" spellcheck="true">// 2.clone(true)：元素以及其所有的事件处理并且选中这些克隆的副本(简言之，副本具有与真身一样的事件处理能力)</span>  <span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">insertAfter</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="修改操作"><a href="#修改操作" class="headerlink" title="修改操作"></a>修改操作</h3><h4 id="replaceWith"><a href="#replaceWith" class="headerlink" title="replaceWith()"></a>replaceWith()</h4><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//将所有匹配的元素替换成指定的string、js对象、jquery对象。</span><span class="token function">$</span><span class="token punctuation">(</span>selector<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">replaceWith</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//将所有的h5标题替换为a标签</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'h5'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">replaceWith</span><span class="token punctuation">(</span><span class="token string">'&lt;a href="#">hello world&lt;/a>'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//将所有h5标题标签替换成id为app的dom元素</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'h5'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">replaceWith</span><span class="token punctuation">(</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'#app'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="replaceAll"><a href="#replaceAll" class="headerlink" title="replaceAll()"></a>replaceAll()</h4><blockquote><p><code>.replaceAll()</code>和<code>.replaceWith()</code>功能类似，但是目标和源相反</p></blockquote><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token function">$</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">replaceAll</span><span class="token punctuation">(</span> target <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//替换所有。将所有的h2标签替换成p标签。</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'&lt;p>哈哈哈&lt;/p>'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">replaceAll</span><span class="token punctuation">(</span><span class="token string">'h2'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="删除操作"><a href="#删除操作" class="headerlink" title="删除操作"></a>删除操作</h3><h4 id="html-“”"><a href="#html-“”" class="headerlink" title="html(“”)"></a>html(“”)</h4><blockquote><p>将html设置为空字符串，可以清空元素的内容，但是：<strong>不会清空元素的事件，造成内存泄漏</strong></p></blockquote><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"div"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">html</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="detach"><a href="#detach" class="headerlink" title="detach()"></a>detach()</h4><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//一个选择表达式将需要移除的元素从匹配的元素中过滤出来。不会清空事件</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"div"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">detach</span><span class="token punctuation">(</span> <span class="token punctuation">[</span>selector<span class="token punctuation">]</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="empty"><a href="#empty" class="headerlink" title="empty()"></a>empty()</h4><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//解释：清空选中元素中的所有后代节点，清空事件</span><span class="token function">$</span><span class="token punctuation">(</span>selector<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//清空掉ul中的子元素，保留ul</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'ul'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="remove"><a href="#remove" class="headerlink" title="remove()"></a>remove()</h4><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//移除子元素和自己，自杀，清空所有元素和事件</span><span class="token function">$</span><span class="token punctuation">(</span>selector<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="jQuery的位置信息"><a href="#jQuery的位置信息" class="headerlink" title="jQuery的位置信息"></a>jQuery的位置信息</h2><p>js中可以通过offset、client、scroll等三大系列获取页面元素的位置信息等，但是原生js获取这些位置较为麻烦，而且还有兼容性的问题。jQuery将这些方法进行封装，简化了操作。</p><h3 id="宽度和高度相关"><a href="#宽度和高度相关" class="headerlink" title="宽度和高度相关"></a>宽度和高度相关</h3><h4 id="width"><a href="#width" class="headerlink" title="width()"></a>width()</h4><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//获取元素的宽度，返回的是 数字类型</span><span class="token function">$</span><span class="token punctuation">(</span>selector<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">width</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//设置宽度</span><span class="token function">$</span><span class="token punctuation">(</span>selector<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">width</span><span class="token punctuation">(</span> value <span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><code>.css(width)</code> 和 <code>.width()</code>之间的区别是后者返回一个没有单位的数值（例如，<code>400</code>），前者是返回带有完整单位的字符串（例如，<code>400px</code>）。当一个元素的宽度需要<strong>数学计算</strong>的时候推荐使用<code>.width()</code> 方法 。</p></blockquote><h4 id="heihgt"><a href="#heihgt" class="headerlink" title="heihgt()"></a>heihgt()</h4><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//获取元素的高度，返回的是 数字类型</span><span class="token function">$</span><span class="token punctuation">(</span>selector<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">height</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//设置高度度</span><span class="token function">$</span><span class="token punctuation">(</span>selector<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">height</span><span class="token punctuation">(</span> value <span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="innerHeight-和innerWidth"><a href="#innerHeight-和innerWidth" class="headerlink" title="innerHeight()和innerWidth()"></a>innerHeight()和innerWidth()</h4><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//为匹配的元素集合中获取第一个元素的当前计算宽度值: padding + width</span><span class="token function">$</span><span class="token punctuation">(</span>selector<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">innerWidth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//为匹配集合中的每个元素设置CSS内部宽度。如果这个“value”参数提供一个数字，jQuery会自动加上像素单位（px）</span><span class="token function">$</span><span class="token punctuation">(</span>selector<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">innerWidth</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//为匹配的元素集合中获取第一个元素的当前计算高度度值: padding + height</span><span class="token function">$</span><span class="token punctuation">(</span>selector<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">innerHeight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//为匹配集合中的每个元素设置CSS内部高度。如果这个“value”参数提供一个数字，jQuery会自动加上像素单位（px）</span><span class="token function">$</span><span class="token punctuation">(</span>selector<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">innerHeight</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="outerWidth-和outerHeight"><a href="#outerWidth-和outerHeight" class="headerlink" title="outerWidth()和outerHeight()"></a>outerWidth()和outerHeight()</h4><blockquote><p>includeMargin (默认: <code>false</code>)</p><p>类型： <code>Boolean</code></p><p>一个布尔值，表明是否在计算时包含元素的margin值,true就是包含margin值。</p></blockquote><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//获取匹配元素集合中第一个元素的当前计算外部宽度（包括padding，border和可选的margin）</span><span class="token function">$</span><span class="token punctuation">(</span>selector<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">outerWidth</span><span class="token punctuation">(</span> <span class="token punctuation">[</span>includeMargin <span class="token punctuation">]</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//为匹配集合中的每个元素设置CSS外部宽度。</span><span class="token function">$</span><span class="token punctuation">(</span>selector<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">outerWidth</span><span class="token punctuation">(</span> value <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//获取匹配元素集合中第一个元素的当前计算外部高度（包括padding，border和可选的margin）</span><span class="token function">$</span><span class="token punctuation">(</span>selector<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">outerHeight</span><span class="token punctuation">(</span> <span class="token punctuation">[</span>includeMargin <span class="token punctuation">]</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//为匹配集合中的每个元素设置CSS外部高度。</span><span class="token function">$</span><span class="token punctuation">(</span>selector<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">outerHeight</span><span class="token punctuation">(</span> value <span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="偏移"><a href="#偏移" class="headerlink" title="偏移"></a>偏移</h3><h4 id="获取"><a href="#获取" class="headerlink" title="获取"></a>获取</h4><p>返回值：Object。<code>.offset()</code>返回一个包含<code>top</code> 和 <code>left</code>属性的对象 。</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//描述：在匹配的元素集合中，获取的第一个元素的当前坐标，坐标相对于文档。</span><span class="token function">$</span><span class="token punctuation">(</span>selector<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">offset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><blockquote><p>注意：jQuery不支持获取隐藏元素的偏移坐标。同样的，也无法取得隐藏元素的 border, margin, 或 padding 信息。若元素的属性设置的是 <code>visibility:hidden</code>，那么我们依然可以取得它的坐标</p></blockquote><h3 id="on注册事件-重点"><a href="#on注册事件-重点" class="headerlink" title="on注册事件(重点)"></a>on注册事件(重点)</h3><blockquote><p>jQuery1.7之后，jQuery用on统一了所有事件的处理方法。推荐使用</p></blockquote><h4 id="on注册简单事件"><a href="#on注册简单事件" class="headerlink" title="on注册简单事件"></a>on注册简单事件</h4><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 表示给$(selector)绑定事件，并且由自己触发，不支持动态绑定。</span><span class="token function">$</span><span class="token punctuation">(</span>selector<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span> <span class="token string">"click"</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="on注册委托事件"><a href="#on注册委托事件" class="headerlink" title="on注册委托事件"></a>on注册委托事件</h4><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 表示给$(selector)绑定代理事件，当必须是它的内部元素span才能触发这个事件，支持动态绑定</span><span class="token function">$</span><span class="token punctuation">(</span>selector<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span> <span class="token string">"click"</span><span class="token punctuation">,</span><span class="token string">"span"</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="on注册事件的语法："><a href="#on注册事件的语法：" class="headerlink" title="on注册事件的语法："></a>on注册事件的语法：</h4><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 第一个参数：events，绑定事件的名称可以是由空格分隔的多个事件（标准事件或者自定义事件）</span><span class="token comment" spellcheck="true">// 第二个参数：selector, 执行事件的后代元素（可选），如果没有后代元素，那么事件将有自己执行。</span><span class="token comment" spellcheck="true">// 第三个参数：data，传递给处理函数的数据，事件触发的时候通过event.data来使用（不常使用）</span><span class="token comment" spellcheck="true">// 第四个参数：handler，事件处理函数</span><span class="token function">$</span><span class="token punctuation">(</span>selector<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span>events<span class="token punctuation">[</span><span class="token punctuation">,</span>selector<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">,</span>data<span class="token punctuation">]</span><span class="token punctuation">,</span>handler<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="事件解绑"><a href="#事件解绑" class="headerlink" title="事件解绑"></a>事件解绑</h3><h4 id="unbind方式（不用）"><a href="#unbind方式（不用）" class="headerlink" title="unbind方式（不用）"></a>unbind方式（不用）</h4><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token function">$</span><span class="token punctuation">(</span>selector<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unbind</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//解绑所有的事件</span><span class="token function">$</span><span class="token punctuation">(</span>selector<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unbind</span><span class="token punctuation">(</span><span class="token string">"click"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//解绑指定的事件</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="undelegate方式（不用）"><a href="#undelegate方式（不用）" class="headerlink" title="undelegate方式（不用）"></a>undelegate方式（不用）</h4><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">////解绑所有的delegate事件$( selector).undelegate( “click” ); //解绑所有的click事件</span><span class="token function">$</span><span class="token punctuation">(</span> selector <span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">undelegate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="off方式（推荐）"><a href="#off方式（推荐）" class="headerlink" title="off方式（推荐）"></a>off方式（推荐）</h4><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 解绑匹配元素的所有事件</span><span class="token function">$</span><span class="token punctuation">(</span>selector<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">off</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 解绑匹配元素的所有click事件</span><span class="token function">$</span><span class="token punctuation">(</span>selector<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">off</span><span class="token punctuation">(</span><span class="token string">"click"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="触发事件-trigger"><a href="#触发事件-trigger" class="headerlink" title="触发事件 trigger()"></a>触发事件 trigger()</h3><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token function">$</span><span class="token punctuation">(</span>selector<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//触发 click事件</span><span class="token function">$</span><span class="token punctuation">(</span>selector<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">trigger</span><span class="token punctuation">(</span><span class="token string">"click"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="jQuery-event对象"><a href="#jQuery-event对象" class="headerlink" title="jQuery event对象"></a>jQuery event对象</h2><p>jQuery的<code>Event</code>对象用于表示当前文档元素触发的DOM事件，它对JS原生的Event对象进行了封装，从而实现跨浏览器的兼容。</p><p>该对象主要用于获取事件的相关信息，或对该事件进行处理。</p><blockquote><p>除了下列属性和方法外，jQuery的<code>Event</code>对象还具备JS原生Event对象的属性和方法。</p></blockquote><h4 id="Event对象的属性"><a href="#Event对象的属性" class="headerlink" title="Event对象的属性"></a>Event对象的属性</h4><table><thead><tr><th align="left">属性</th><th align="left">初始版本</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"><a href="http://www.365mini.com/page/jquery-event-currenttarget.htm" target="_blank" rel="noopener">currentTarget</a></td><td align="left">1.3</td><td align="left">返回事件冒泡阶段中的当前DOM元素。</td></tr><tr><td align="left"><a href="http://www.365mini.com/page/jquery-event-data.htm" target="_blank" rel="noopener">data</a></td><td align="left">1.1</td><td align="left">返回绑定事件时传入的附加数据。</td></tr><tr><td align="left"><a href="http://www.365mini.com/page/jquery-event-delegatetarget.htm" target="_blank" rel="noopener">delegateTarget</a></td><td align="left">1.7</td><td align="left">返回”受委托”调用当前事件处理函数的DOM元素。</td></tr><tr><td align="left"><a href="http://www.365mini.com/page/jquery-event-metakey.htm" target="_blank" rel="noopener">metaKey</a></td><td align="left">1.0.4</td><td align="left">指示触发事件时是否按下了Meta键。</td></tr><tr><td align="left"><a href="http://www.365mini.com/page/jquery-event-namespace.htm" target="_blank" rel="noopener">namespace</a></td><td align="left">1.4.3</td><td align="left">返回触发事件时指定的命名空间。</td></tr><tr><td align="left"><a href="http://www.365mini.com/page/jquery-event-pagex.htm" target="_blank" rel="noopener">pageX</a></td><td align="left">1.0.4</td><td align="left">返回鼠标相对于当前文档的x坐标。</td></tr><tr><td align="left"><a href="http://www.365mini.com/page/jquery-event-pagey.htm" target="_blank" rel="noopener">pageY</a></td><td align="left">1.0.4</td><td align="left">返回鼠标相对于当前文档的y坐标。</td></tr><tr><td align="left"><a href="http://www.365mini.com/page/jquery-event-relatedtarget.htm" target="_blank" rel="noopener">relatedTarget</a></td><td align="left">1.1.4</td><td align="left">返回事件涉及到的其它DOM元素。</td></tr><tr><td align="left"><a href="http://www.365mini.com/page/jquery-event-result.htm" target="_blank" rel="noopener">result</a></td><td align="left">1.3</td><td align="left">返回当前事件绑定的上一个事件处理函数的返回值。</td></tr><tr><td align="left"><a href="http://www.365mini.com/page/jquery-event-target.htm" target="_blank" rel="noopener">target</a></td><td align="left">1.3</td><td align="left">最初触发该事件的DOM元素。</td></tr><tr><td align="left"><a href="http://www.365mini.com/page/jquery-event-timestamp.htm" target="_blank" rel="noopener">timeStamp</a></td><td align="left">1.2.6</td><td align="left">返回事件触发的当前时间与1970年1月1日午夜之间的毫秒数。</td></tr><tr><td align="left"><a href="http://www.365mini.com/page/jquery-event-type.htm" target="_blank" rel="noopener">type</a></td><td align="left">1.0</td><td align="left">返回事件的类型。例如:”click”、”focus”等。</td></tr><tr><td align="left"><a href="http://www.365mini.com/page/jquery-event-which.htm" target="_blank" rel="noopener">which</a></td><td align="left">1.1.3</td><td align="left">返回触发事件时按下的鼠标按钮或键盘按键。</td></tr></tbody></table><h3 id="Event-对象的方法"><a href="#Event-对象的方法" class="headerlink" title="Event 对象的方法"></a>Event 对象的方法</h3><table><thead><tr><th align="left">方法</th><th align="left">初始版本</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"><a href="http://www.365mini.com/page/jquery-event-isdefaultprevented.htm" target="_blank" rel="noopener">isDefaultPrevented()</a></td><td align="left">1.3</td><td align="left">是否调用了preventDefault()方法。</td></tr><tr><td align="left"><a href="http://www.365mini.com/page/jquery-event-isimmediatepropagationstopped.htm" target="_blank" rel="noopener">isImmediatePropagationStopped()</a></td><td align="left">1.3</td><td align="left">是否调用了stopImmediatePropagation()方法。</td></tr><tr><td align="left"><a href="http://www.365mini.com/page/jquery-event-ispropagationstopped.htm" target="_blank" rel="noopener">isPropagationStopped()</a></td><td align="left">1.3</td><td align="left">是否调用了stopPropagation()方法。</td></tr><tr><td align="left"><a href="http://www.365mini.com/page/jquery-event-preventdefault.htm" target="_blank" rel="noopener"><strong>preventDefault()</strong></a></td><td align="left">1.0</td><td align="left">阻止触发事件的默认行为。</td></tr><tr><td align="left"><a href="http://www.365mini.com/page/jquery-event-stopimmediatepropagation.htm" target="_blank" rel="noopener">stopImmediatePropagation()</a></td><td align="left">1.3</td><td align="left">阻止该元素当前触发事件剩余的事件处理函数的执行，并停止事件的冒泡传递。</td></tr><tr><td align="left"><a href="http://www.365mini.com/page/jquery-event-stoppropagation.htm" target="_blank" rel="noopener"><strong>stopPropagation()</strong></a></td><td align="left">1.0</td><td align="left">停止事件的冒泡传递。</td></tr></tbody></table><blockquote><p><code>return false;</code> 既能阻止事件冒泡，又能阻止浏览器的默认行为</p></blockquote><h2 id="其他常用方法"><a href="#其他常用方法" class="headerlink" title="其他常用方法"></a>其他常用方法</h2><h3 id="index-方法"><a href="#index-方法" class="headerlink" title="index()方法"></a>index()方法</h3><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//index()会返回当前元素在所有兄弟元素里面的索引。</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"li"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">index</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="each方法"><a href="#each方法" class="headerlink" title="each方法"></a>each方法</h3><blockquote><p>jQuery的隐式迭代会对所有的DOM对象设置相同的值，但是如果我们需要给每一个对象设置不同的值的时候，就需要自己进行迭代了。</p></blockquote><p>作用：遍历jQuery对象集合，为每个匹配的元素执行一个函数</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 参数一表示当前元素在所有匹配元素中的索引号</span><span class="token comment" spellcheck="true">// 参数二表示当前元素（DOM对象）</span><span class="token function">$</span><span class="token punctuation">(</span>selector<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">each</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span>element<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="delay方法"><a href="#delay方法" class="headerlink" title="delay方法"></a>delay方法</h3><blockquote><p>设置一个延时来推迟执行队列中后续的项。</p></blockquote><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//slideUp动画执行完毕，延迟800ms之后，执行fadeIn动画</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'#foo'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">slideUp</span><span class="token punctuation">(</span><span class="token number">300</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">800</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fadeIn</span><span class="token punctuation">(</span><span class="token number">400</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="jQuery插件"><a href="#jQuery插件" class="headerlink" title="jQuery插件"></a>jQuery插件</h2><blockquote><p>jquery不可能包含所有的功能，我们可以通过插件扩展jquery的功能。</p><p>jQuery有着丰富的插件，使用这些插件能给jQuery提供一些额外的功能</p></blockquote><p>插件的使用步骤：</p><ol><li>引入jquery文件</li><li>引入插件（如果有用到css的话，需要引入css）</li><li>使用插件</li></ol><h3 id="常用插件"><a href="#常用插件" class="headerlink" title="常用插件"></a>常用插件</h3><h4 id="jquery-color-js"><a href="#jquery-color-js" class="headerlink" title="jquery.color.js"></a>jquery.color.js</h4><blockquote><p>animate不支持颜色的渐变，但是使用了jquery.color.js后，就可以支持颜色的渐变了。</p></blockquote><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span><span class="token number">1</span><span class="token punctuation">.</span> 引入jquery的js文件<span class="token operator">--</span><span class="token operator">></span><span class="token operator">&lt;</span>script src<span class="token operator">=</span><span class="token string">"jquery-1.12.4.js"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span><span class="token number">2</span><span class="token punctuation">.</span> 引入插件的js文件<span class="token operator">--</span><span class="token operator">></span><span class="token operator">&lt;</span>script src<span class="token operator">=</span><span class="token string">"jquery.color.js"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span class="token operator">&lt;</span>script<span class="token operator">></span>  <span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//3. 直接使用即可。</span>    <span class="token comment" spellcheck="true">//颜色最好用16进制</span>    <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">animate</span><span class="token punctuation">(</span><span class="token punctuation">{</span>backgroundColor<span class="token punctuation">:</span><span class="token string">"#64ff4b"</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">3000</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"呵呵"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="jquery-lazyload-js"><a href="#jquery-lazyload-js" class="headerlink" title="jquery.lazyload.js"></a>jquery.lazyload.js</h4><p>图片懒加载插件</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//如果要使用懒加载，那么图片要放到 data-original属性中去</span><span class="token operator">&lt;</span>img <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"lazy"</span> data<span class="token operator">-</span>original<span class="token operator">=</span><span class="token string">"1.jpg"</span> alt<span class="token operator">=</span><span class="token string">""</span><span class="token operator">></span><span class="token operator">&lt;</span>script src<span class="token operator">=</span><span class="token string">"jquery-1.12.4.js"</span> type<span class="token operator">=</span><span class="token string">"text/javascript"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span class="token operator">&lt;</span>script src<span class="token operator">=</span><span class="token string">"jquery.lazyload.js"</span> type<span class="token operator">=</span><span class="token string">"text/javascript"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span class="token operator">&lt;</span>script<span class="token operator">></span>  <span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"img.lazy"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">lazyload</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="jquery-ui-js插件"><a href="#jquery-ui-js插件" class="headerlink" title="jquery.ui.js插件"></a>jquery.ui.js插件</h4><p>jQueryUI专指由jQuery官方维护的UI方向的插件。</p><p>官方API：<a href="http://api.jqueryui.com/category/all/" target="_blank" rel="noopener">http://api.jqueryui.com/category/all/</a></p><p>其他教程：<a href="http://www.runoob.com/jqueryui/jqueryui-tutorial.html" target="_blank" rel="noopener">jQueryUI教程</a></p><h3 id="自定义插件"><a href="#自定义插件" class="headerlink" title="自定义插件"></a>自定义插件</h3><blockquote><p>原理：jquery插件其实就是给jquery对象增加一个新的方法，让jquery对象拥有某一个功能。</p></blockquote><p><code>$.fn  ====  jQuery.prototype</code></p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//通过给$.fn添加方法就能够扩展jquery对象</span>$<span class="token punctuation">.</span>fn<span class="token punctuation">.</span> pluginName <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h2><h3 id="突出显示-排他功能"><a href="#突出显示-排他功能" class="headerlink" title="突出显示(排他功能)"></a>突出显示(排他功能)</h3><pre class="line-numbers language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token style language-css">    <span class="token selector">* </span><span class="token punctuation">{</span>      <span class="token property">margin</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>      <span class="token property">padding</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token selector">ul </span><span class="token punctuation">{</span>      <span class="token property">list-style</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token selector">body </span><span class="token punctuation">{</span>      <span class="token property">background</span><span class="token punctuation">:</span> <span class="token hexcode">#000</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token selector"><span class="token class">.wrap</span> </span><span class="token punctuation">{</span>      <span class="token property">margin</span><span class="token punctuation">:</span> <span class="token number">100</span>px auto <span class="token number">0</span><span class="token punctuation">;</span>      <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">630</span>px<span class="token punctuation">;</span>      <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">394</span>px<span class="token punctuation">;</span>      <span class="token property">padding</span><span class="token punctuation">:</span> <span class="token number">10</span>px <span class="token number">0</span> <span class="token number">0</span> <span class="token number">10</span>px<span class="token punctuation">;</span>      <span class="token property">background</span><span class="token punctuation">:</span> <span class="token hexcode">#000</span><span class="token punctuation">;</span>      <span class="token property">overflow</span><span class="token punctuation">:</span> hidden<span class="token punctuation">;</span>      <span class="token property">border</span><span class="token punctuation">:</span> <span class="token number">1</span>px solid <span class="token hexcode">#fff</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token selector"><span class="token class">.wrap</span> li </span><span class="token punctuation">{</span>      <span class="token property">float</span><span class="token punctuation">:</span> left<span class="token punctuation">;</span>      <span class="token property">margin</span><span class="token punctuation">:</span> <span class="token number">0</span> <span class="token number">10</span>px <span class="token number">10</span>px <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token selector"><span class="token class">.wrap</span> img </span><span class="token punctuation">{</span>      <span class="token property">display</span><span class="token punctuation">:</span> block<span class="token punctuation">;</span>      <span class="token property">border</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>../jquery-1.12.4.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//鼠标进入，让当前进入到的这li标签的透明度为1，兄弟元素变为0.4</span>      <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">".wrap>ul>li"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">mouseenter</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">css</span><span class="token punctuation">(</span><span class="token string">"opacity"</span><span class="token punctuation">,</span> <span class="token string">"1"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">siblings</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">css</span><span class="token punctuation">(</span><span class="token string">"opacity"</span><span class="token punctuation">,</span> <span class="token string">"0.4"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">".wrap"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">mouseleave</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//让所有的li都变亮</span>        <span class="token comment" spellcheck="true">//$(this).children().children("li");</span>        <span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token string">'li'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">css</span><span class="token punctuation">(</span><span class="token string">"opacity"</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>wrap<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>images/01.jpg<span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>images/02.jpg<span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>images/03.jpg<span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>images/04.jpg<span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>images/05.jpg<span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>images/06.jpg<span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="tab栏切换"><a href="#tab栏切换" class="headerlink" title="tab栏切换"></a>tab栏切换</h3><pre class="line-numbers language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token style language-css">    <span class="token selector">* </span><span class="token punctuation">{</span>      <span class="token property">margin</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>      <span class="token property">padding</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token selector">ul </span><span class="token punctuation">{</span>      <span class="token property">list-style</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token selector"><span class="token class">.wrapper</span> </span><span class="token punctuation">{</span>      <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">1000</span>px<span class="token punctuation">;</span>      <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">475</span>px<span class="token punctuation">;</span>      <span class="token property">margin</span><span class="token punctuation">:</span> <span class="token number">0</span> auto<span class="token punctuation">;</span>      <span class="token property">margin-top</span><span class="token punctuation">:</span> <span class="token number">100</span>px<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token selector"><span class="token class">.tab</span> </span><span class="token punctuation">{</span>      <span class="token property">border</span><span class="token punctuation">:</span> <span class="token number">1</span>px solid <span class="token hexcode">#ddd</span><span class="token punctuation">;</span>      <span class="token property">border-bottom</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>      <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">36</span>px<span class="token punctuation">;</span>      <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">320</span>px<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token selector"><span class="token class">.tab</span> li </span><span class="token punctuation">{</span>      <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span>      <span class="token property">float</span><span class="token punctuation">:</span> left<span class="token punctuation">;</span>      <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">80</span>px<span class="token punctuation">;</span>      <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">34</span>px<span class="token punctuation">;</span>      <span class="token property">line-height</span><span class="token punctuation">:</span> <span class="token number">34</span>px<span class="token punctuation">;</span>      <span class="token property">text-align</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>      <span class="token property">cursor</span><span class="token punctuation">:</span> pointer<span class="token punctuation">;</span>      <span class="token property">border-top</span><span class="token punctuation">:</span> <span class="token number">4</span>px solid <span class="token hexcode">#fff</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token selector"><span class="token class">.tab</span> span </span><span class="token punctuation">{</span>      <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>      <span class="token property">right</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>      <span class="token property">top</span><span class="token punctuation">:</span> <span class="token number">10</span>px<span class="token punctuation">;</span>      <span class="token property">background</span><span class="token punctuation">:</span> <span class="token hexcode">#ddd</span><span class="token punctuation">;</span>      <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">1</span>px<span class="token punctuation">;</span>      <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">14</span>px<span class="token punctuation">;</span>      <span class="token property">overflow</span><span class="token punctuation">:</span> hidden<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token selector"><span class="token class">.products</span> </span><span class="token punctuation">{</span>      <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">1002</span>px<span class="token punctuation">;</span>      <span class="token property">border</span><span class="token punctuation">:</span> <span class="token number">1</span>px solid <span class="token hexcode">#ddd</span><span class="token punctuation">;</span>      <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">476</span>px<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token selector"><span class="token class">.products</span> <span class="token class">.main</span> </span><span class="token punctuation">{</span>      <span class="token property">float</span><span class="token punctuation">:</span> left<span class="token punctuation">;</span>      <span class="token property">display</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token selector"><span class="token class">.products</span> <span class="token class">.main.selected</span> </span><span class="token punctuation">{</span>      <span class="token property">display</span><span class="token punctuation">:</span> block<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token selector"><span class="token class">.tab</span> li<span class="token class">.active</span> </span><span class="token punctuation">{</span>      <span class="token property">border-color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>      <span class="token property">border-bottom</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>../jquery-1.12.4.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">".tab-item"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">mouseenter</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//两件事件，当前鼠标进入的位置设置样式，它的兄弟元素移除样式</span>        <span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addClass</span><span class="token punctuation">(</span><span class="token string">"active"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">siblings</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">removeClass</span><span class="token punctuation">(</span><span class="token string">"active"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//获取当前位置的index</span>        <span class="token keyword">var</span> idx <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">index</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//对应位置的元素 添加样式，它的兄弟元素移除样式</span>        <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">".main"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span>idx<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addClass</span><span class="token punctuation">(</span><span class="token string">"selected"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">siblings</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">removeClass</span><span class="token punctuation">(</span><span class="token string">"selected"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>wrapper<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>tab<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>tab-item active<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>国际大牌<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>◆<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>tab-item<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>国妆名牌<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>◆<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>tab-item<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>清洁用品<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>◆<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>tab-item<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>男士精品<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>products<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>main selected<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>###<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>imgs/guojidapai.jpg<span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>main<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>###<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>imgs/guozhuangmingpin.jpg<span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>main<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>###<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>imgs/qingjieyongpin.jpg<span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>main<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>###<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>imgs/nanshijingpin.jpg<span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="京东轮播图"><a href="#京东轮播图" class="headerlink" title="京东轮播图"></a>京东轮播图</h3><pre class="line-numbers language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>zh-CN<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>京东商城<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style language-css">    <span class="token selector">* </span><span class="token punctuation">{</span>      <span class="token property">margin</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>      <span class="token property">padding</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>      <span class="token property">list-style</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token selector"><span class="token class">.slider</span> </span><span class="token punctuation">{</span>      <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">340</span>px<span class="token punctuation">;</span>      <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">790</span>px<span class="token punctuation">;</span>      <span class="token property">margin</span><span class="token punctuation">:</span> <span class="token number">100</span>px auto<span class="token punctuation">;</span>      <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token selector"><span class="token class">.slider</span> li </span><span class="token punctuation">{</span>      <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>      <span class="token property">display</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token selector"><span class="token class">.slider</span> li<span class="token pseudo-class">:first-child</span> </span><span class="token punctuation">{</span>      <span class="token property">display</span><span class="token punctuation">:</span> block<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token selector"><span class="token class">.arrow</span> </span><span class="token punctuation">{</span>      <span class="token property">display</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token selector"><span class="token class">.slider</span><span class="token pseudo-class">:hover</span> <span class="token class">.arrow</span> </span><span class="token punctuation">{</span>      <span class="token property">display</span><span class="token punctuation">:</span> block<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token selector"><span class="token class">.arrow-left</span>,    <span class="token class">.arrow-right</span> </span><span class="token punctuation">{</span>      <span class="token property">font-family</span><span class="token punctuation">:</span> <span class="token string">"SimSun"</span>, <span class="token string">"宋体"</span><span class="token punctuation">;</span>      <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">30</span>px<span class="token punctuation">;</span>      <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">60</span>px<span class="token punctuation">;</span>      <span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token function">rgba</span><span class="token punctuation">(</span><span class="token number">0</span>, <span class="token number">0</span>, <span class="token number">0</span>, <span class="token number">0.1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>      <span class="token property">top</span><span class="token punctuation">:</span> <span class="token number">50%</span><span class="token punctuation">;</span>      <span class="token property">margin-top</span><span class="token punctuation">:</span> -<span class="token number">30</span>px<span class="token punctuation">;</span>      <span class="token property">cursor</span><span class="token punctuation">:</span> pointer<span class="token punctuation">;</span>      <span class="token property">text-align</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>      <span class="token property">line-height</span><span class="token punctuation">:</span> <span class="token number">60</span>px<span class="token punctuation">;</span>      <span class="token property">color</span><span class="token punctuation">:</span> <span class="token hexcode">#fff</span><span class="token punctuation">;</span>      <span class="token property">font-weight</span><span class="token punctuation">:</span> <span class="token number">700</span><span class="token punctuation">;</span>      <span class="token property">font-size</span><span class="token punctuation">:</span> <span class="token number">30</span>px<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token selector"><span class="token class">.arrow-left</span><span class="token pseudo-class">:hover</span>,    <span class="token class">.arrow-right</span><span class="token pseudo-class">:hover</span> </span><span class="token punctuation">{</span>      <span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token function">rgba</span><span class="token punctuation">(</span><span class="token number">0</span>, <span class="token number">0</span>, <span class="token number">0</span>, <span class="token number">.5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token selector"><span class="token class">.arrow-left</span> </span><span class="token punctuation">{</span>      <span class="token property">left</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token selector"><span class="token class">.arrow-right</span> </span><span class="token punctuation">{</span>      <span class="token property">right</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>slider<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>images/1.jpg<span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>images/2.jpg<span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>images/3.jpg<span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>images/4.jpg<span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>images/5.jpg<span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>images/6.jpg<span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>images/7.jpg<span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>images/8.jpg<span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span>  <span class="token comment" spellcheck="true">&lt;!--箭头--></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>arrow<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>arrow-left<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token entity" title="&lt;">&amp;lt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>arrow-right<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token entity" title="&gt;">&amp;gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>jquery-1.12.4.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">  <span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">".arrow-right"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      count<span class="token operator">++</span><span class="token punctuation">;</span>      <span class="token keyword">if</span><span class="token punctuation">(</span>count <span class="token operator">==</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">".slider li"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">{</span>        count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token comment" spellcheck="true">//console.log(count);</span>      <span class="token comment" spellcheck="true">//让count渐渐的显示，其他兄弟渐渐的隐藏</span>      <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">".slider li"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fadeIn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">siblings</span><span class="token punctuation">(</span><span class="token string">"li"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fadeOut</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">".arrow-left"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      count<span class="token operator">--</span><span class="token punctuation">;</span>      <span class="token keyword">if</span><span class="token punctuation">(</span>count <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        count <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">".slider li"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//让count渐渐的显示，其他兄弟渐渐的隐藏</span>      <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">".slider li"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fadeIn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">siblings</span><span class="token punctuation">(</span><span class="token string">"li"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fadeOut</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="弹幕效果"><a href="#弹幕效果" class="headerlink" title="弹幕效果"></a>弹幕效果</h3><pre class="line-numbers language-html"><code class="language-html"><span class="token doctype">&lt;!doctype html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token style language-css">    <span class="token selector">html, body </span><span class="token punctuation">{</span>      <span class="token property">margin</span><span class="token punctuation">:</span> <span class="token number">0</span>px<span class="token punctuation">;</span>      <span class="token property">padding</span><span class="token punctuation">:</span> <span class="token number">0</span>px<span class="token punctuation">;</span>      <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">100%</span><span class="token punctuation">;</span>      <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">100%</span><span class="token punctuation">;</span>      <span class="token property">font-family</span><span class="token punctuation">:</span> <span class="token string">"微软雅黑"</span><span class="token punctuation">;</span>      <span class="token property">font-size</span><span class="token punctuation">:</span> <span class="token number">62.5%</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token selector"><span class="token class">.boxDom</span> </span><span class="token punctuation">{</span>      <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">100%</span><span class="token punctuation">;</span>      <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">100%</span><span class="token punctuation">;</span>      <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span>      <span class="token property">overflow</span><span class="token punctuation">:</span> hidden<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token selector"><span class="token class">.idDom</span> </span><span class="token punctuation">{</span>      <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">100%</span><span class="token punctuation">;</span>      <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">100</span>px<span class="token punctuation">;</span>      <span class="token property">background</span><span class="token punctuation">:</span> <span class="token hexcode">#666</span><span class="token punctuation">;</span>      <span class="token property">position</span><span class="token punctuation">:</span> fixed<span class="token punctuation">;</span>      <span class="token property">bottom</span><span class="token punctuation">:</span> <span class="token number">0</span>px<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token selector"><span class="token class">.content</span> </span><span class="token punctuation">{</span>      <span class="token property">display</span><span class="token punctuation">:</span> inline-block<span class="token punctuation">;</span>      <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">430</span>px<span class="token punctuation">;</span>      <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">40</span>px<span class="token punctuation">;</span>      <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>      <span class="token property">left</span><span class="token punctuation">:</span> <span class="token number">0</span>px<span class="token punctuation">;</span>      <span class="token property">right</span><span class="token punctuation">:</span> <span class="token number">0</span>px<span class="token punctuation">;</span>      <span class="token property">top</span><span class="token punctuation">:</span> <span class="token number">0</span>px<span class="token punctuation">;</span>      <span class="token property">bottom</span><span class="token punctuation">:</span> <span class="token number">0</span>px<span class="token punctuation">;</span>      <span class="token property">margin</span><span class="token punctuation">:</span> auto<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token selector"><span class="token class">.title</span> </span><span class="token punctuation">{</span>      <span class="token property">display</span><span class="token punctuation">:</span> inline<span class="token punctuation">;</span>      <span class="token property">font-size</span><span class="token punctuation">:</span> <span class="token number">4</span>em<span class="token punctuation">;</span>      <span class="token property">vertical-align</span><span class="token punctuation">:</span> bottom<span class="token punctuation">;</span>      <span class="token property">color</span><span class="token punctuation">:</span> <span class="token hexcode">#fff</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token selector"><span class="token class">.text</span> </span><span class="token punctuation">{</span>      <span class="token property">border</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>      <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">300</span>px<span class="token punctuation">;</span>      <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">30</span>px<span class="token punctuation">;</span>      <span class="token property">border-radius</span><span class="token punctuation">:</span> <span class="token number">5</span>px<span class="token punctuation">;</span>      <span class="token property">font-size</span><span class="token punctuation">:</span> <span class="token number">2.4</span>em<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token selector"><span class="token class">.btn</span> </span><span class="token punctuation">{</span>      <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">60</span>px<span class="token punctuation">;</span>      <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">30</span>px<span class="token punctuation">;</span>      <span class="token property">background</span><span class="token punctuation">:</span> <span class="token hexcode">#f90000</span><span class="token punctuation">;</span>      <span class="token property">border</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>      <span class="token property">color</span><span class="token punctuation">:</span> <span class="token hexcode">#fff</span><span class="token punctuation">;</span>      <span class="token property">font-size</span><span class="token punctuation">:</span> <span class="token number">2.4</span>em<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token selector">span </span><span class="token punctuation">{</span>      <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">300</span>px<span class="token punctuation">;</span>      <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">40</span>px<span class="token punctuation">;</span>      <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>      <span class="token property">overflow</span><span class="token punctuation">:</span> hidden<span class="token punctuation">;</span>      <span class="token property">color</span><span class="token punctuation">:</span> <span class="token hexcode">#000</span><span class="token punctuation">;</span>      <span class="token property">font-size</span><span class="token punctuation">:</span> <span class="token number">4</span>em<span class="token punctuation">;</span>      <span class="token property">line-height</span><span class="token punctuation">:</span> <span class="token number">1.5</span>em<span class="token punctuation">;</span>      <span class="token property">cursor</span><span class="token punctuation">:</span> pointer<span class="token punctuation">;</span>      <span class="token property">white-space</span><span class="token punctuation">:</span> nowrap<span class="token punctuation">;</span>    <span class="token punctuation">}</span>  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>boxDom<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>boxDom<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>idDom<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>idDom<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>content<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>title<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>吐槽:<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>btn<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>btn<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>发射<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>jquery-1.12.4.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">  <span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">var</span> colors <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"red"</span><span class="token punctuation">,</span> <span class="token string">"green"</span><span class="token punctuation">,</span> <span class="token string">"hotpink"</span><span class="token punctuation">,</span> <span class="token string">"pink"</span><span class="token punctuation">,</span> <span class="token string">"cyan"</span><span class="token punctuation">,</span> <span class="token string">"yellowgreen"</span><span class="token punctuation">,</span> <span class="token string">"purple"</span><span class="token punctuation">,</span> <span class="token string">"deepskyblue"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>      <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#btn"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">var</span> randomColor <span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">*</span>colors<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//颜色的随机数</span>        <span class="token keyword">var</span> randomY<span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">400</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//距离顶部的随机数</span>        <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"&lt;span>&lt;/span>"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//创建span</span>            <span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#text"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">val</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//设置内容</span>            <span class="token punctuation">.</span><span class="token function">css</span><span class="token punctuation">(</span><span class="token string">"color"</span><span class="token punctuation">,</span>colors<span class="token punctuation">[</span>randomColor<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//设置颜色</span>            <span class="token punctuation">.</span><span class="token function">css</span><span class="token punctuation">(</span><span class="token string">"left"</span><span class="token punctuation">,</span><span class="token string">"1400px"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//设置初始距离</span>            <span class="token punctuation">.</span><span class="token function">css</span><span class="token punctuation">(</span><span class="token string">"top"</span><span class="token punctuation">,</span>randomY<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//设置距离顶部的高度</span>            <span class="token punctuation">.</span><span class="token function">animate</span><span class="token punctuation">(</span><span class="token punctuation">{</span>left<span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">500</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token number">10000</span><span class="token punctuation">,</span><span class="token string">"linear"</span><span class="token punctuation">,</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//到了终点需要删除</span>                <span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">appendTo</span><span class="token punctuation">(</span><span class="token string">"#boxDom"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//将span添加到id为#boxDom的div中</span>          <span class="token comment" spellcheck="true">//将文本域内容设置为空</span>        <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#text"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">val</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//设置enter键抬起的时候执行上面的代码</span>      <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#text"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">keyup</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">if</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>key <span class="token operator">==</span> <span class="token string">"Enter"</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#btn"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="下拉菜单"><a href="#下拉菜单" class="headerlink" title="下拉菜单"></a>下拉菜单</h3><pre class="line-numbers language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token style language-css">    <span class="token selector">* </span><span class="token punctuation">{</span>      <span class="token property">margin</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>      <span class="token property">padding</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token selector">ul </span><span class="token punctuation">{</span>      <span class="token property">list-style</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token selector"><span class="token class">.wrap</span> </span><span class="token punctuation">{</span>      <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">330</span>px<span class="token punctuation">;</span>      <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">30</span>px<span class="token punctuation">;</span>      <span class="token property">margin</span><span class="token punctuation">:</span> <span class="token number">100</span>px auto <span class="token number">0</span><span class="token punctuation">;</span>      <span class="token property">padding-left</span><span class="token punctuation">:</span> <span class="token number">10</span>px<span class="token punctuation">;</span>      <span class="token property">background-image</span><span class="token punctuation">:</span> <span class="token url">url(imgs/bg.jpg)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token selector"><span class="token class">.wrap</span> li </span><span class="token punctuation">{</span>      <span class="token property">background-image</span><span class="token punctuation">:</span> <span class="token url">url(imgs/libg.jpg)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token selector"><span class="token class">.wrap</span> > ul > li </span><span class="token punctuation">{</span>      <span class="token property">float</span><span class="token punctuation">:</span> left<span class="token punctuation">;</span>      <span class="token property">margin-right</span><span class="token punctuation">:</span> <span class="token number">10</span>px<span class="token punctuation">;</span>      <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token selector"><span class="token class">.wrap</span> a </span><span class="token punctuation">{</span>      <span class="token property">display</span><span class="token punctuation">:</span> block<span class="token punctuation">;</span>      <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">30</span>px<span class="token punctuation">;</span>      <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">100</span>px<span class="token punctuation">;</span>      <span class="token property">text-decoration</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>      <span class="token property">color</span><span class="token punctuation">:</span> <span class="token hexcode">#000</span><span class="token punctuation">;</span>      <span class="token property">line-height</span><span class="token punctuation">:</span> <span class="token number">30</span>px<span class="token punctuation">;</span>      <span class="token property">text-align</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token selector"><span class="token class">.wrap</span> li ul </span><span class="token punctuation">{</span>      <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>      <span class="token property">top</span><span class="token punctuation">:</span> <span class="token number">30</span>px<span class="token punctuation">;</span>      <span class="token property">display</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>    <span class="token punctuation">}</span>  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>../jquery-1.12.4.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">var</span> $li <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">".wrap>ul>li"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//给li注册鼠标经过事件，让自己的ul显示出来</span>      $li<span class="token punctuation">.</span><span class="token function">mouseenter</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//找到所有的儿子，并且还得是ul</span>        <span class="token comment" spellcheck="true">//stop：停止当前正在执行的动画</span>        <span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">children</span><span class="token punctuation">(</span><span class="token string">"ul"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">slideDown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      $li<span class="token punctuation">.</span><span class="token function">mouseleave</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">children</span><span class="token punctuation">(</span><span class="token string">"ul"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">slideUp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>wrap<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>javascript:void(0);<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>一级菜单1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ul<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>javascript:void(0);<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>二级菜单11<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>javascript:void(0);<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>二级菜单12<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>javascript:void(0);<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>二级菜单13<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>javascript:void(0);<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>一级菜单2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>javascript:void(0);<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>二级菜单21<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>javascript:void(0);<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>二级菜单22<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>javascript:void(0);<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>二级菜单23<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>javascript:void(0);<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>一级菜单3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>javascript:void(0);<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>二级菜单31<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>javascript:void(0);<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>二级菜单32<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>javascript:void(0);<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>二级菜单33<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>相关案例github地址：<a href="https://github.com/qlHuo/studyDemo/tree/master/jQueryDemo" target="_blank" rel="noopener">https://github.com/qlHuo/studyDemo/tree/master/jQueryDemo</a></p><p>参考文章：</p><p><a href="https://blog.csdn.net/qq_42221612/article/details/81873307" target="_blank" rel="noopener">https://blog.csdn.net/qq_42221612/article/details/81873307</a></p><p><a href="https://blog.csdn.net/heyue_99/article/details/52595073" target="_blank" rel="noopener">https://blog.csdn.net/heyue_99/article/details/52595073</a></p><p><a href="https://blog.csdn.net/heyue_99/article/details/52595073" target="_blank" rel="noopener">https://blog.csdn.net/heyue_99/article/details/52595073</a></p>]]></content>
      
      
      <categories>
          
          <category> jQuery </category>
          
      </categories>
      
      
        <tags>
            
            <tag> jQuery </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ES6新增语法学习</title>
      <link href="/archives/434c94a1.html"/>
      <url>/archives/434c94a1.html</url>
      
        <content type="html"><![CDATA[<p>为什么使用ES6？</p><p>每一次标准的诞生都意味着语言的完善，功能的增强。JavaScript语言的本身也有一些不完善的地方。</p><ul><li>变量提升的特性增加了程序运行时的不可预测性</li><li>语法过于松散，实现相同的功能，不同的人可能会写出不同的代码。</li></ul><h3 id="ES6新增语法"><a href="#ES6新增语法" class="headerlink" title="ES6新增语法"></a>ES6新增语法</h3><h4 id="1-let"><a href="#1-let" class="headerlink" title="1.let"></a>1.let</h4><p>ES6中新增了用于声明变量的关键字</p><h5 id="let声明的变量只在所处于的块级有效"><a href="#let声明的变量只在所处于的块级有效" class="headerlink" title="let声明的变量只在所处于的块级有效"></a>let声明的变量只在所处于的块级有效</h5><pre class="line-numbers language-javascript"><code class="language-javascript"> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// a is not defined 报错</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>注意：使用let关键字声明的变量才具有块级作用域，使用var声明的变量不具备块级作用域特性。</p></blockquote><h5 id="不存在变量提升"><a href="#不存在变量提升" class="headerlink" title="不存在变量提升"></a>不存在变量提升</h5><pre class="line-numbers language-javascript"><code class="language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// a is not defined 报错</span><span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h5 id="暂时性死区"><a href="#暂时性死区" class="headerlink" title="暂时性死区"></a>暂时性死区</h5><p>只要在块级作用域利用let声明的变量，会绑定在这个块级作用域，不会受外界的影响</p><pre class="line-numbers language-javascript"><code class="language-javascript"> <span class="token keyword">var</span> tmp <span class="token operator">=</span> <span class="token number">123</span><span class="token punctuation">;</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>tmp<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//报错</span>     tmp <span class="token operator">=</span> <span class="token string">'abc'</span><span class="token punctuation">;</span>     <span class="token keyword">let</span> tmp<span class="token punctuation">;</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>案例：</p><pre class="line-numbers language-javascript"><code class="language-javascript"> <span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token comment" spellcheck="true">//for循环中将两个函数存进数组，而for中的函数不会执行，当for循环结束后i为2，所以调用的时候都为2。var没有块级作用域</span> arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//2</span> arr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript"><code class="language-javascript"> <span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span> <span class="token punctuation">}</span> arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//0</span> arr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//1</span><span class="token comment" spellcheck="true">//使用let生命的变量每次循环都会产生一个块级作用域，每个块级作用域中的变量都是不同的，函数执行时输出的是自己上一级（循环产生的块级作用域）作用域下的i值.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-const"><a href="#2-const" class="headerlink" title="2.const"></a>2.const</h4><p>声明常量，常量就是值（<strong>内存地址</strong>）不能变化的量。</p><h5 id="具有块级作用域"><a href="#具有块级作用域" class="headerlink" title="具有块级作用域"></a>具有块级作用域</h5><pre class="line-numbers language-javascript"><code class="language-javascript"> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// a is not defined 报错</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h5 id="声明常量是必须赋值"><a href="#声明常量是必须赋值" class="headerlink" title="声明常量是必须赋值"></a>声明常量是必须赋值</h5><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">const</span> PI<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// Missing initializer in const declaration 报错</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="常量赋值后，值（内存地址）不能修改"><a href="#常量赋值后，值（内存地址）不能修改" class="headerlink" title="常量赋值后，值（内存地址）不能修改"></a>常量赋值后，值（内存地址）不能修改</h5><blockquote><p>常量不能重新进行赋值，如果是基本数据类型，不能更改值；如果是复杂类型，不能更改地址值</p></blockquote><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">const</span> PI <span class="token operator">=</span> <span class="token number">3.14</span><span class="token punctuation">;</span>PI <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// Assignment to constant variable.</span><span class="token keyword">const</span> ary <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">]</span><span class="token punctuation">;</span>ary<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'a'</span><span class="token punctuation">;</span>ary<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'b'</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>ary<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// ['a', 'b']; </span>ary <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// Assignment to constant variable. 这就是更改了地址的值</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-let、const、var-的区别"><a href="#3-let、const、var-的区别" class="headerlink" title="3.let、const、var 的区别"></a>3.let、const、var 的区别</h4><ul><li>使用var声明的变量，其作用域为为全局 或者 该语句所在的函数内，且存在变量提升</li><li>使用let声明的变量，其作用域在该语句所在的代码块内，不存在变量提升</li><li>使用const声明的变量是常量，在后面出现的代码中不能再修改该常量的值</li></ul><h4 id="4-解构赋值"><a href="#4-解构赋值" class="headerlink" title="4.解构赋值"></a>4.解构赋值</h4><p>ES6中允许从数组中提取值，按照对应位置，对变量赋值，对象也可以实现解构</p><h5 id="数组解构"><a href="#数组解构" class="headerlink" title="数组解构"></a>数组解构</h5><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">let</span> <span class="token punctuation">[</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//1</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//2</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//3</span><span class="token comment" spellcheck="true">//如果解构不成功，变量的值为undefined</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="对象解构"><a href="#对象解构" class="headerlink" title="对象解构"></a>对象解构</h5><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">let</span> person <span class="token operator">=</span> <span class="token punctuation">{</span> name<span class="token punctuation">:</span> <span class="token string">'zhangsan'</span><span class="token punctuation">,</span> age<span class="token punctuation">:</span> <span class="token number">20</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token keyword">let</span> <span class="token punctuation">{</span> name<span class="token punctuation">,</span> age <span class="token punctuation">}</span> <span class="token operator">=</span> person<span class="token punctuation">;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 'zhangsan' </span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 20</span> <span class="token keyword">let</span> <span class="token punctuation">{</span>name<span class="token punctuation">:</span> myName<span class="token punctuation">,</span> age<span class="token punctuation">:</span> myAge<span class="token punctuation">}</span> <span class="token operator">=</span> person<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// myName myAge 属于别名</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>myName<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 'zhangsan' </span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>myAge<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 20</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h5><ul><li>解构赋值就是把数据结构分解，然后给变量进行赋值</li><li>如果解构不成功，当变量跟数值个数不匹配时，变量的值为undefined</li><li>数组解构中用中括号包裹，多个变量用逗号隔开；对象解构用花括号包裹，多个变量用逗号隔开</li><li>利用解构赋值能让我们方便的去取对象中的属性和方法</li></ul><h4 id="5-箭头函数"><a href="#5-箭头函数" class="headerlink" title="5.箭头函数"></a>5.箭头函数</h4><p>ES6中新增的定义函数的方式</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token comment" spellcheck="true">//()：代表是函数； =>：必须要的符号，指向哪一个代码块；{}：函数体</span><span class="token keyword">const</span> fn <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//代表把一个函数赋值给fn</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>函数体中只有一句代码，且代码的执行结果就是返回值，可以省略大括号</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">sum</span><span class="token punctuation">(</span>num1<span class="token punctuation">,</span> num2<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> num1 <span class="token operator">+</span> num2<span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token comment" spellcheck="true">//es6写法</span> <span class="token keyword">const</span> sum <span class="token operator">=</span> <span class="token punctuation">(</span>num1<span class="token punctuation">,</span> num2<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> num1 <span class="token operator">+</span> num2<span class="token punctuation">;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果形参只有一个，可以省略小括号</p><pre class="line-numbers language-javascript"><code class="language-javascript"> <span class="token keyword">function</span> fn <span class="token punctuation">(</span>v<span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token keyword">return</span> v<span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token comment" spellcheck="true">//es6写法</span> <span class="token keyword">const</span> fn <span class="token operator">=</span> v <span class="token operator">=</span><span class="token operator">></span> v<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>箭头函数不绑定this关键字，箭头函数中的this，指向的是函数定义位置的上下文this</strong></p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span> name<span class="token punctuation">:</span> <span class="token string">'张三'</span><span class="token punctuation">}</span>  <span class="token keyword">function</span> fn <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//this 指向 是obj对象</span>     <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>          console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//this 指向 的是箭头函数定义的位置，那么这个箭头函数定义在fn里面，而这个fn指向是的obj对象，所以这个this也指向是obj对象</span>     <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">const</span> resFn <span class="token operator">=</span> fn<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">resFn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>总结：</p><ul><li>箭头函数中不绑定this，箭头函数中的this指向的是它所定语的位置，可以简单的理解成：箭头函数中的作用域的this指向谁。</li><li>箭头函数的优点在于解决了this执行环境中所造成的一些问题。比如：解决了匿名函数this指向的问题（匿名函数的执行环境具有全局性），包括setTimeouthe setInterval中使用this所造成的问题。</li></ul><p><strong>面试题</strong></p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">var</span> age <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>    age<span class="token punctuation">:</span> <span class="token number">20</span><span class="token punctuation">,</span>    say<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token function">alert</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>age<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>obj<span class="token punctuation">.</span><span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//箭头函数this指向的是被声明的作用域里面，而对象没有作用域的，所以箭头函数虽然在对象中被定义，但是this指向的是全局作用域</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="剩余参数"><a href="#剩余参数" class="headerlink" title="剩余参数"></a>剩余参数</h4><p>剩余参数语法允许我们将一个不定数量的参数表示为一个数组，不定参数定义方式，这种方式很方便的去声明不知道参数情况下的一个函数</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">function</span> sum <span class="token punctuation">(</span>first<span class="token punctuation">,</span> <span class="token operator">...</span>args<span class="token punctuation">)</span> <span class="token punctuation">{</span>     console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>first<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 10</span>     console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [20, 30] </span> <span class="token punctuation">}</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="剩余参数和解构配合使用"><a href="#剩余参数和解构配合使用" class="headerlink" title="剩余参数和解构配合使用"></a>剩余参数和解构配合使用</h5><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">let</span> students <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'wangwu'</span><span class="token punctuation">,</span> <span class="token string">'zhangsan'</span><span class="token punctuation">,</span> <span class="token string">'lisi'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">let</span> <span class="token punctuation">[</span>s1<span class="token punctuation">,</span> <span class="token operator">...</span>s2<span class="token punctuation">]</span> <span class="token operator">=</span> students<span class="token punctuation">;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 'wangwu' </span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// ['zhangsan', 'lisi']</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="ES内置对象扩展"><a href="#ES内置对象扩展" class="headerlink" title="ES内置对象扩展"></a>ES内置对象扩展</h3><h4 id="Array的扩展方法"><a href="#Array的扩展方法" class="headerlink" title="Array的扩展方法"></a>Array的扩展方法</h4><h6 id="扩展运算符（展开语法）"><a href="#扩展运算符（展开语法）" class="headerlink" title="扩展运算符（展开语法）"></a>扩展运算符（展开语法）</h6><p>扩展运算符可以加进那个数组或者对象转为用逗号分割的参数序列</p><pre class="line-numbers language-javascript"><code class="language-javascript"> <span class="token keyword">let</span> ary <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token operator">...</span>ary  <span class="token comment" spellcheck="true">// 1, 2, 3</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token operator">...</span>ary<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 1 2 3,相当于下面的代码</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>扩展运算符可以用于合并数组</strong></p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 方法一 </span> <span class="token keyword">let</span> ary1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">let</span> ary2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">let</span> ary3 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span>ary1<span class="token punctuation">,</span> <span class="token operator">...</span>ary2<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 方法二 </span> ary1<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token operator">...</span>ary2<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>将类数组或者可遍历对象转换为真正的数组</strong></p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">let</span> oDivs <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> oDivs <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span>oDivs<span class="token punctuation">]</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h6 id="构造函数方法：Array-from"><a href="#构造函数方法：Array-from" class="headerlink" title="构造函数方法：Array.from()"></a>构造函数方法：Array.from()</h6><p>将伪数组或可遍历对象转换为真正的数组</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//定义一个集合</span><span class="token keyword">let</span> arrayLike <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token string">'0'</span><span class="token punctuation">:</span> <span class="token string">'a'</span><span class="token punctuation">,</span>    <span class="token string">'1'</span><span class="token punctuation">:</span> <span class="token string">'b'</span><span class="token punctuation">,</span>    <span class="token string">'2'</span><span class="token punctuation">:</span> <span class="token string">'c'</span><span class="token punctuation">,</span>    length<span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//转成数组</span><span class="token keyword">let</span> arr2 <span class="token operator">=</span> Array<span class="token punctuation">.</span><span class="token keyword">from</span><span class="token punctuation">(</span>arrayLike<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// ['a', 'b', 'c']</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>方法还可以接受第二个参数，作用类似于数组的map方法，用来对每个元素进行处理，将处理后的值放入返回的数组</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">let</span> arrayLike <span class="token operator">=</span> <span class="token punctuation">{</span>      <span class="token string">"0"</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span>     <span class="token string">"1"</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span>     <span class="token string">"length"</span><span class="token punctuation">:</span> <span class="token number">2</span> <span class="token punctuation">}</span> <span class="token keyword">let</span> newAry <span class="token operator">=</span> Array<span class="token punctuation">.</span><span class="token keyword">from</span><span class="token punctuation">(</span>arrayLike<span class="token punctuation">,</span> item <span class="token operator">=</span><span class="token operator">></span> item <span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//[2,4]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h6 id="实例方法：find"><a href="#实例方法：find" class="headerlink" title="实例方法：find()"></a>实例方法：find()</h6><p>用于找出第一个符合条件的数组成员，如果没有找到就返回undefined</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">let</span> ary <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>     id<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span>     name<span class="token punctuation">:</span> <span class="token string">'张三'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>      id<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span>     name<span class="token punctuation">:</span> <span class="token string">'李四'</span> <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">let</span> target <span class="token operator">=</span> ary<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">(</span>item<span class="token punctuation">,</span> index<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> item<span class="token punctuation">.</span>id <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//找数组里面符合条件的值，当数组中元素id等于2的查找出来，注意，只会匹配第一个</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h6 id="实例方法：findIndex"><a href="#实例方法：findIndex" class="headerlink" title="实例方法：findIndex()"></a>实例方法：findIndex()</h6><p>用于找出第一个符合条件的数组成员的位置，如果没有找到返回-1</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">let</span> ary <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">let</span> index <span class="token operator">=</span> ary<span class="token punctuation">.</span><span class="token function">findIndex</span><span class="token punctuation">(</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span> index<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> value <span class="token operator">></span> <span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h6 id="实例方法：includes"><a href="#实例方法：includes" class="headerlink" title="实例方法：includes()"></a>实例方法：includes()</h6><p>判断某个数组是否包含给定的值，返回布尔值</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// true </span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// false</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="String的扩展方法"><a href="#String的扩展方法" class="headerlink" title="String的扩展方法"></a>String的扩展方法</h4><h5 id="模板字符串"><a href="#模板字符串" class="headerlink" title="模板字符串"></a>模板字符串</h5><p>ES6新增的创建字符串的方式，使用反引号定义</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">let</span> name <span class="token operator">=</span> <span class="token template-string"><span class="token string">`zhangsan`</span></span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h6 id="模板字符串中可以解析变量"><a href="#模板字符串中可以解析变量" class="headerlink" title="模板字符串中可以解析变量"></a>模板字符串中可以解析变量</h6><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">let</span> name <span class="token operator">=</span> <span class="token string">'zhangsan'</span><span class="token punctuation">;</span> <span class="token keyword">let</span> sayHello <span class="token operator">=</span> <span class="token template-string"><span class="token string">`hello,my name is </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// hello, my name is zhangsan</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h6 id="模板字符串中可以换行"><a href="#模板字符串中可以换行" class="headerlink" title="模板字符串中可以换行"></a>模板字符串中可以换行</h6><pre class="line-numbers language-javascript"><code class="language-javascript"> <span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token punctuation">{</span>      name<span class="token punctuation">:</span> <span class="token string">'zhangsan'</span><span class="token punctuation">,</span>      age<span class="token punctuation">:</span> <span class="token number">20</span><span class="token punctuation">,</span>     sex<span class="token punctuation">:</span> <span class="token string">'男'</span>  <span class="token punctuation">}</span>  <span class="token keyword">let</span> html <span class="token operator">=</span> <span class="token template-string"><span class="token string">` &lt;div>     &lt;span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>result<span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&lt;/span>     &lt;span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>result<span class="token punctuation">.</span>age<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&lt;/span>     &lt;span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>result<span class="token punctuation">.</span>sex<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&lt;/span> &lt;/div> `</span></span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h6 id="在模板字符串中可以调用函数"><a href="#在模板字符串中可以调用函数" class="headerlink" title="在模板字符串中可以调用函数"></a>在模板字符串中可以调用函数</h6><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">const</span> sayHello <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token keyword">return</span> <span class="token string">'哈哈哈哈 追不到我吧 我就是这么强大'</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token keyword">let</span> greet <span class="token operator">=</span> <span class="token template-string"><span class="token string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> 哈哈哈哈`</span></span><span class="token punctuation">;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>greet<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 哈哈哈哈 追不到我吧 我就是这么强大 哈哈哈哈</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="实例方法：startsWith-和-endsWith"><a href="#实例方法：startsWith-和-endsWith" class="headerlink" title="实例方法：startsWith() 和 endsWith()"></a>实例方法：startsWith() 和 endsWith()</h5><ul><li>startsWith():表示参数字符串是否在源字符串的头部，返回布尔值</li><li>endsWith(): 表示参数字符串是否在源字符串的尾部，返回布尔值</li></ul><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">'Hello world!'</span><span class="token punctuation">;</span>str<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">'Hello'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// true </span>str<span class="token punctuation">.</span><span class="token function">endsWith</span><span class="token punctuation">(</span><span class="token string">'!'</span><span class="token punctuation">)</span>       <span class="token comment" spellcheck="true">// true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h5 id="实例方法-repeat"><a href="#实例方法-repeat" class="headerlink" title="实例方法: repeat()"></a>实例方法: repeat()</h5><p>repeat()方法表示将源字符串重复n次，返回一个新的字符串</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token string">'x'</span><span class="token punctuation">.</span><span class="token function">repeat</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>      <span class="token comment" spellcheck="true">// "xxx" </span><span class="token string">'hello'</span><span class="token punctuation">.</span><span class="token function">repeat</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// "hellohello"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="Set数据结构"><a href="#Set数据结构" class="headerlink" title="Set数据结构"></a>Set数据结构</h4><p>ES6提供了新的数据结构Set。它类似于数组，但是成员的值都是唯一的，没有重复的值。</p><p>Set本身是一个构造函数，用来生成Set数据结构。</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">const</span> s <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>Set函数可以接受一个数组作为参数，用来初始化。</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token keyword">set</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//{1, 2, 3, 4}</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="实例方法"><a href="#实例方法" class="headerlink" title="实例方法"></a>实例方法</h4><ul><li>add(value): 添加某个值，返回Set结构本身</li><li>delete(value): 删除某个值，返回一个布尔值，表示删除是否成功</li><li>has(value): 返回一个布尔值，表示该值是否为Set的成员</li><li>clear(): 清除所有的成员，没有返回值</li></ul><pre class="line-numbers language-javascript"><code class="language-javascript"> <span class="token keyword">const</span> s <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> s<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 向 set 结构中添加值 </span> s<span class="token punctuation">.</span><span class="token keyword">delete</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>             <span class="token comment" spellcheck="true">// 删除 set 结构中的2值   </span> s<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>                <span class="token comment" spellcheck="true">// 表示 set 结构中是否有1这个值 返回布尔值 </span> s<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span>               <span class="token comment" spellcheck="true">// 清除 set 结构中的所有值</span> <span class="token comment" spellcheck="true">//注意：删除的是元素的值，不是代表的索引</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="遍历"><a href="#遍历" class="headerlink" title="遍历"></a>遍历</h5><p>Set结构的实例与数组是一样的，也拥有forEach()方法，用于对每个成员执行某种操作，没有返回值。</p><pre class="line-numbers language-javascript"><code class="language-javascript">s<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>value <span class="token operator">=</span><span class="token operator">></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>参考文章：</p><p><a href="https://www.cnblogs.com/bokeyanghao/p/11147304.html" target="_blank" rel="noopener">暂时性死区的理解</a></p><p><a href="https://blog.csdn.net/w390058785/article/details/82884032" target="_blank" rel="noopener">箭头函数的this指向</a></p>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ES6 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>js内置对象</title>
      <link href="/archives/ec6bfcc0.html"/>
      <url>/archives/ec6bfcc0.html</url>
      
        <content type="html"><![CDATA[<p>js中有三种对象：</p><ol><li>内置对象—-js自带对象</li><li>自定义对象—-自己定义的构造函数创建对象</li><li>浏览器对象—BOM</li></ol><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//如何验证变量是不是对象</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Array <span class="token keyword">instanceof</span> <span class="token class-name">Object</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> obj<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj <span class="token keyword">instanceof</span> <span class="token class-name">Object</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>实例对象：通过构造函数创建出来的对象，叫做实例化对象</p><p>静态对象：不需要创建直接就是一个对象（Math）</p><p>实例方法必须通过实例对象调用</p><p>静态方法必须通过大写的对象进行调用</p><h3 id="Math"><a href="#Math" class="headerlink" title="Math"></a>Math</h3><p>Math是一个对象，但不是一个函数；Math对象下的属性和方法都是静态的</p><p><strong>Math常用的方法</strong></p><table><thead><tr><th align="center">用法</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">Math.ceil()</td><td align="center">向上取整</td></tr><tr><td align="center">Math.floor()</td><td align="center">向下取整</td></tr><tr><td align="center">Math.PI</td><td align="center">圆周率的值</td></tr><tr><td align="center">Math.Max()</td><td align="center">取一组数字中的最大值</td></tr><tr><td align="center">Math.Min()</td><td align="center">取一组数字中的最小值</td></tr><tr><td align="center">Math.abs()</td><td align="center">绝对值</td></tr><tr><td align="center">Math.random()</td><td align="center">0~1之间的随机数字</td></tr><tr><td align="center">Math.sqrt()</td><td align="center">开平方</td></tr><tr><td align="center">Math.pow(x,y)</td><td align="center">x的y次方</td></tr></tbody></table><p>Math对象函数的案例</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//自己定义一个对象，实现系统的min方法</span>    <span class="token keyword">function</span> MyMath <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>getMin <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">var</span> min <span class="token operator">=</span> arguments<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arguments<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>min <span class="token operator">></span> arguments<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    min <span class="token operator">=</span> arguments<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> min<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//首先实例化对象</span>    <span class="token keyword">var</span> mt <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyMath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//调用函数的实现找到最小值的方法</span>    <span class="token keyword">var</span> result <span class="token operator">=</span> mt<span class="token punctuation">.</span><span class="token function">getMin</span><span class="token punctuation">(</span><span class="token number">23</span><span class="token punctuation">,</span><span class="token number">11</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">34</span><span class="token punctuation">,</span><span class="token number">45</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Date"><a href="#Date" class="headerlink" title="Date"></a>Date</h3><p><code>var dt = new Date();</code></p><table><thead><tr><th align="center">用法</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">dt.getFullYear()</td><td align="center">年</td></tr><tr><td align="center">dt.getMonth()</td><td align="center">月份（从0开始）</td></tr><tr><td align="center">dt.getDate()</td><td align="center">日</td></tr><tr><td align="center">dt.getHours()</td><td align="center">小时</td></tr><tr><td align="center">dt.getMinutes()</td><td align="center">分钟</td></tr><tr><td align="center">dt.getSeconds()</td><td align="center">秒</td></tr><tr><td align="center">dt.getDay()</td><td align="center">星期</td></tr><tr><td align="center">dt.toDateString()</td><td align="center">日期</td></tr><tr><td align="center">dt.toLocaleDateString()</td><td align="center">日期</td></tr><tr><td align="center">dt.toTimeString()</td><td align="center">时间</td></tr><tr><td align="center">dt.toLocaleTimeString()</td><td align="center">时间</td></tr><tr><td align="center">dt.valueOf()</td><td align="center">毫秒数</td></tr></tbody></table><p>格式化时间函数</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//格式化后的指定格式的日期和时间---封装一个函数</span><span class="token comment" spellcheck="true">/** * 获取指定格式的时间 * @param dt 日期的对象 * @returns {string} 返回的是字符串的日期时间 */</span><span class="token keyword">function</span> <span class="token function">getDate</span><span class="token punctuation">(</span>dt<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//获取年</span>    <span class="token keyword">var</span> year <span class="token operator">=</span> dt<span class="token punctuation">.</span><span class="token function">getFullYear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//获取月</span>    <span class="token keyword">var</span> month <span class="token operator">=</span> dt<span class="token punctuation">.</span><span class="token function">getMonth</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//获取日</span>    <span class="token keyword">var</span> day <span class="token operator">=</span> dt<span class="token punctuation">.</span><span class="token function">getDate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//获取小时</span>    <span class="token keyword">var</span> hour <span class="token operator">=</span> dt<span class="token punctuation">.</span><span class="token function">getHours</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//获取分钟</span>    <span class="token keyword">var</span> minute <span class="token operator">=</span> dt<span class="token punctuation">.</span><span class="token function">getMinutes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//获取秒</span>    <span class="token keyword">var</span> second <span class="token operator">=</span> dt<span class="token punctuation">.</span><span class="token function">getSeconds</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">/* month = month &lt; 10 ? "0" + month : month;    day = day &lt; 10 ? "0" + day : day;    hour = hour &lt; 10 ? "0" + hour : hour;    minute = minute &lt; 10 ? "0" + minute : minute;    second = second &lt; 10 ? "0" + second : second;*/</span>    <span class="token comment" spellcheck="true">//将需要判断数值的数据，放进数组里面</span>    <span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span>month<span class="token punctuation">,</span>day<span class="token punctuation">,</span>hour<span class="token punctuation">,</span>minute<span class="token punctuation">,</span>second<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> <span class="token number">10</span> <span class="token operator">?</span> <span class="token string">"0"</span><span class="token operator">+</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">:</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>   <span class="token comment" spellcheck="true">// return year + "年" + month + "月" + day + "日 " + hour + ":" + minute + ":" + second;</span>    <span class="token keyword">return</span> year <span class="token operator">+</span> <span class="token string">"年"</span> <span class="token operator">+</span> arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">"月"</span> <span class="token operator">+</span> arr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">"日 "</span> <span class="token operator">+</span> arr<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">":"</span> <span class="token operator">+</span> arr<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">":"</span> <span class="token operator">+</span> arr<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span>   console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">getDate</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="String"><a href="#String" class="headerlink" title="String"></a>String</h3><p><strong>字符串的特性：</strong> 不可变性，字符串的值是不能改变的</p><blockquote><p>字符串的值之所以看起来是改变的，那是因为指向发生了改变，并不是改变了</p></blockquote><p><code>var str = &quot;hello&quot;;</code></p><table><thead><tr><th align="center">常用方法/属性</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">str.length</td><td align="center">获取字符串的长度</td></tr><tr><td align="center">str.charAt(索引)</td><td align="center">返回值是指定索引位置的字符串,超出索引,结果是空字符串</td></tr><tr><td align="center">str.fromCharCode(数字值,可以是多个参数)</td><td align="center">返回的是ASCII码对应的值—是静态方法</td></tr><tr><td align="center">str.concat(字符串1,字符串2,…)</td><td align="center">返回的是拼接之后的新的字符串</td></tr><tr><td align="center">str.indexOf(要找的字符串,从某个位置开始的索引)</td><td align="center">返回的是这个字符串的索引值,没找到则返回-<strong>1</strong></td></tr><tr><td align="center">str.lastIndexOf(要找的字符串)</td><td align="center">从后向前找,但是索引仍然是从左向右的方式,找不到则返回-1</td></tr><tr><td align="center">str.replace(“原来的字符串”,”新的字符串”)</td><td align="center">用来替换字符串的</td></tr><tr><td align="center">str.slice(开始的索引,结束的索引)</td><td align="center">返回从开始的索引到结束的索引之间的字符串</td></tr><tr><td align="center">str.split(“要干掉的字符串”)</td><td align="center">切割字符串</td></tr><tr><td align="center">str.substr(开始的位置,个数)</td><td align="center">返回的是截取后的新的字符串</td></tr><tr><td align="center">str.substring(开始的索引,结束的索引)</td><td align="center">返回截取后的字符串,不包含结束的索引的字符串</td></tr><tr><td align="center">str.toLocaleLowerCase()||str..toLowerCase()</td><td align="center">转小写</td></tr><tr><td align="center">str.toLocaleUpperCase()||str.toUpperCase()</td><td align="center">转大写</td></tr><tr><td align="center">str..trim()</td><td align="center">干掉字符串两端的空格</td></tr></tbody></table><p>字符串案例：</p><pre class="line-numbers language-javascript"><code class="language-javascript"> <span class="token comment" spellcheck="true">//截取指定位置的字符串</span>    <span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">"Hello world, I'm coming"</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> key <span class="token operator">=</span> <span class="token string">"wo"</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//先获取要截取的字符串的索引位置</span>    <span class="token keyword">var</span> index <span class="token operator">=</span>str<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//从指定的位置开始截取,截取两个，如果没有写截取的数目，会把其后的所有截取</span>    str <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//案例2:找到这个字符串中所有的 o 出现的位置</span><span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">"hello pop do done wo"</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> key <span class="token operator">=</span> <span class="token string">"o"</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token operator">/</span><span class="token operator">!</span><span class="token operator">*</span>    <span class="token operator">*</span> str<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span>index<span class="token punctuation">)</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">></span>求str中出现o的索引值，如果有o则返回索引值，没有o则返回<span class="token operator">-</span><span class="token number">1</span>    <span class="token operator">*</span> 因此，当index 的值为<span class="token operator">-</span><span class="token number">1</span>时，说明，o的值找完了    <span class="token operator">*</span>    <span class="token operator">*</span> <span class="token operator">*</span><span class="token operator">!</span><span class="token operator">/</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>index <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>        index <span class="token operator">+</span><span class="token operator">=</span>key<span class="token punctuation">.</span>length<span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token comment" spellcheck="true">// 案例3:找到这个字符串中每个字符串出现了多少次</span> <span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">"ASdfsgfgjASLsd"</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//先将字符串转换为小写</span>    str<span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//创建一个新对象，用来存储每个字符及其对应的个数</span>    <span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//遍历字符串</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> str<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//定义一个变量用来接收字符串中的字母</span>        <span class="token keyword">var</span> key <span class="token operator">=</span> str<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//判断obj中有没有key存的这个字母这个属性</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>obj<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            obj<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//如果没有的话，那就给他赋值为1，就相当于增加了一个属性和值</span>            obj<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//遍历这个对象</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> key <span class="token keyword">in</span> obj<span class="token punctuation">)</span><span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>key<span class="token operator">+</span><span class="token string">"----"</span><span class="token operator">+</span>obj<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Array"><a href="#Array" class="headerlink" title="Array"></a>Array</h3><p><code>var arr = [];</code></p><table><thead><tr><th align="center">属性或方法</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">Array.isArray(对象)</td><td align="center">判断这个对象是不是数组</td></tr><tr><td align="center">arr.concat(数组,数组,数组,…)</td><td align="center">组合成一个新数组</td></tr><tr><td align="center">.every(函数)</td><td align="center">返回值是布尔类型,函数作为参数使用,函数中有三个参数,第一个参数是元素的值，第二个参数是索引值,第三个参数是原来的数组(没用)</td></tr><tr><td align="center">.filter(回调函数)</td><td align="center">返回的是数组中每一个元素都符合条件的元素,组成了一个新的数组</td></tr><tr><td align="center">.push(值)</td><td align="center">把值追加到数组中,加到最后了—返回值也是追加数据之后的数组长度</td></tr><tr><td align="center">.pop()</td><td align="center">删除数组中最后一个元素,返回值就是删除的这个值</td></tr><tr><td align="center">.shift()</td><td align="center">删除数组中第一个元素,返回值就是删除的这个值</td></tr><tr><td align="center">.unshift()</td><td align="center">向数组的第一个元素前面插入一个新的元素,—-返回值是插入后的长度</td></tr><tr><td align="center">.forEach(函数)</td><td align="center">遍历数组用—相当于for循环</td></tr><tr><td align="center">.indexOf(元素值)</td><td align="center">返回的是索引,没有则是-1</td></tr><tr><td align="center">.join(“字符串”)</td><td align="center">返回的是一个字符串</td></tr><tr><td align="center">.map(函数)</td><td align="center">数组中的每个元素都要执行这个函数,把执行后的结果重新的全部的放在一个新的数组中</td></tr><tr><td align="center">.reverse()</td><td align="center">反转数组</td></tr><tr><td align="center">.sort()</td><td align="center">排序的,可能不稳定,如果不稳定,请写MDN中的那个固定的代码</td></tr><tr><td align="center">arr.slice(开始的索引,结束的索引)</td><td align="center">截取的数组的值放在一个新的数组中,但是不包含结束的索引对应的元素值</td></tr><tr><td align="center">.splice(开始的位置,要删除的个数,替换的元素的值);</td><td align="center">一般是用于删除数组中的元素,或者是替换元素,或者是插入元素</td></tr></tbody></table><p>Array案例</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//将一个字符串数组输出为|分割的形式，比如“刘备|张飞|关羽”。使用两种方式实现</span><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">'-'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token keyword">function</span> myJoin <span class="token punctuation">(</span>arr<span class="token punctuation">,</span>sep<span class="token punctuation">)</span><span class="token punctuation">{</span>           <span class="token keyword">this</span><span class="token punctuation">.</span>arr <span class="token operator">=</span> arr <span class="token operator">||</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>           <span class="token keyword">this</span><span class="token punctuation">.</span>sep <span class="token operator">=</span> sep <span class="token operator">||</span> <span class="token string">","</span><span class="token punctuation">;</span>           <span class="token comment" spellcheck="true">//如果是空数组，那么返回空，不再往下执行</span>           <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>arr<span class="token punctuation">.</span>length<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>               <span class="token keyword">return</span> <span class="token string">''</span><span class="token punctuation">;</span>           <span class="token punctuation">}</span>           <span class="token keyword">var</span> str <span class="token operator">=</span>arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>           <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>               str <span class="token operator">+</span><span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>sep <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>           <span class="token punctuation">}</span>           <span class="token keyword">return</span> str<span class="token punctuation">;</span>       <span class="token punctuation">}</span>       console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">myJoin</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span><span class="token string">"|"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//将一个字符串数组的元素的顺序进行反转。["a", "b", "c", "d"] -> [ "d","c","b","a"]。使用两种种方式实现。提示：第i个和第length-i-1个进行交换</span><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"a"</span><span class="token punctuation">,</span> <span class="token string">"b"</span><span class="token punctuation">,</span> <span class="token string">"c"</span><span class="token punctuation">,</span> <span class="token string">"d"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">function</span> <span class="token function">ArrReverse</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>ArrRe <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">var</span> temp <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>                arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>length<span class="token operator">-</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                arr<span class="token punctuation">[</span>length<span class="token operator">-</span>i<span class="token number">-1</span><span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> arr<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 函数ArrReverse有返回值，需要接收</span>    <span class="token keyword">var</span> result <span class="token operator">=</span> <span class="token function">ArrReverse</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// console.log(ArrReverse(arr));</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//工资的数组[1500, 1200, 2000, 2100, 1800],把工资超过2000的删除</span><span class="token comment" spellcheck="true">//方式1</span>    <span class="token keyword">var</span> salary <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1500</span><span class="token punctuation">,</span> <span class="token number">1200</span><span class="token punctuation">,</span> <span class="token number">2000</span><span class="token punctuation">,</span> <span class="token number">2100</span><span class="token punctuation">,</span> <span class="token number">1800</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> tempArr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> salary<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>salary<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> <span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            tempArr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>salary<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>tempArr<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//方法二</span>    salary <span class="token operator">=</span> salary<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>elements<span class="token punctuation">,</span>index<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>elements <span class="token operator">&lt;</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>salary<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// ["c", "a", "z", "a", "x", "a"]找到数组中每一个a出现的位置</span><span class="token keyword">var</span> array <span class="token operator">=</span>  <span class="token punctuation">[</span><span class="token string">'c'</span><span class="token punctuation">,</span> <span class="token string">'s'</span><span class="token punctuation">,</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'q'</span><span class="token punctuation">,</span><span class="token string">'z'</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'x'</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">do</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//indexOf("要查找的元素"，"开始查找的位置")</span>        <span class="token keyword">var</span> index <span class="token operator">=</span> array<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">,</span>index <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span>index <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//编写一个方法去掉一个数组的重复元素</span> <span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'c'</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'z'</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'x'</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>   <span class="token keyword">function</span> clear <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>       <span class="token comment" spellcheck="true">//创建一个对象，用来存储数组中每个元素出现的次数</span>       <span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>       <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>           <span class="token keyword">var</span> item <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>           <span class="token comment" spellcheck="true">//如果对象里面有item（arr[i]）这个属性，就++</span>           <span class="token keyword">if</span> <span class="token punctuation">(</span>obj<span class="token punctuation">[</span>item<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>               obj<span class="token punctuation">[</span>item<span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>           <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>               <span class="token comment" spellcheck="true">//如果对象里面没有item（arr[i]）这个属性就就1赋给item这个属性</span>               obj<span class="token punctuation">[</span>item<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>           <span class="token punctuation">}</span>       <span class="token punctuation">}</span>       <span class="token comment" spellcheck="true">//定义一个数组用来接收去掉重复元素后的值</span>       <span class="token keyword">var</span> tempArr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">//遍历对象中的属性及其值</span>       <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> key <span class="token keyword">in</span> obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token comment" spellcheck="true">/* //如果对象里面的属性值是1，就说明没有重复的值，直接把对象里面的属性加到数组里面           if (obj[key]==1){               tempArr.push(key);           }else{//否则，对象里面的属性值不等于1，也就是出现了多次               //并且这个属性在数组里面也没有出现               if(tempArr.indexOf(key) == -1){               }           }*/</span>          <span class="token comment" spellcheck="true">//直接把obj对象中的属性加到数组里面</span>           tempArr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">}</span>       <span class="token keyword">return</span> tempArr<span class="token punctuation">;</span>   <span class="token punctuation">}</span>   console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">clear</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="基本包装类型"><a href="#基本包装类型" class="headerlink" title="基本包装类型"></a>基本包装类型</h3><p>为了方便操作基本数据类型，JavaScript三个特殊的引用类型，String/Number/Boolean</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// s1是基本类型，基本类型是没有方法的</span><span class="token keyword">var</span> s1 <span class="token operator">=</span> <span class="token string">'zhangsan'</span><span class="token punctuation">;</span><span class="token keyword">var</span> s2 <span class="token operator">=</span> s1<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 当调用s1.substring(5)的时候，先把s1包装成String类型的临时对象，再调用substring方法，最后销毁临时对象, 相当于：</span><span class="token keyword">var</span> s1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">'zhangsan'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> s2 <span class="token operator">=</span> s1<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>s1 <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 创建基本包装类型的对象</span><span class="token keyword">var</span> num <span class="token operator">=</span> <span class="token number">18</span><span class="token punctuation">;</span>                  <span class="token comment" spellcheck="true">//数值，基本类型</span><span class="token keyword">var</span> num <span class="token operator">=</span> <span class="token function">Number</span><span class="token punctuation">(</span><span class="token string">'18'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//类型转换</span><span class="token keyword">var</span> num <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Number</span><span class="token punctuation">(</span><span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//基本包装类型，对象</span><span class="token comment" spellcheck="true">// Number和Boolean基本包装类型基本不用，使用的话可能会引起歧义。例如：</span><span class="token keyword">var</span> b1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Boolean</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> b2 <span class="token operator">=</span> b1 <span class="token operator">&amp;&amp;</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Array </tag>
            
            <tag> Math </tag>
            
            <tag> String </tag>
            
            <tag> Date </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>作用域和预解析</title>
      <link href="/archives/c7272050.html"/>
      <url>/archives/c7272050.html</url>
      
        <content type="html"><![CDATA[<h3 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h3><p>作用域就是使用范围。</p><ul><li>全局变量：声明变量是使用var且不在函数体内的变量，或者使用let/const在大括号外面声明的变量叫做全局变量。这个变量能在页面的任何位置使用</li><li>局部变量：在函数内部定义的变量，或者使用let/cons在大括号内声明的变量是局部变量。这个变量只能在大括号或者函数体内使用</li><li>隐式全局变量：声明变量没有加关键字</li></ul><blockquote><p>全局变量，如果页面不关闭，那么就不会被释放，就会占用空间消耗内存</p></blockquote><p>块级作用域：一对大括号就可以看做是一块，在这块区域中使用let/const定义的变量,只能在这一区域中使用。</p><blockquote><p>使用var在块级作用域定义的变量，外部也能使用</p></blockquote><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//全局变量是不能被删除的，隐式全局变量可以被删除。</span><span class="token keyword">function</span> <span class="token function">f1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>   number<span class="token operator">=</span><span class="token number">1000</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//是隐式全局变量</span> <span class="token punctuation">}</span> <span class="token function">f1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>number<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">var</span> num1<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">;</span> num2<span class="token operator">=</span><span class="token number">20</span><span class="token punctuation">;</span> <span class="token keyword">delete</span> num1<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//把num1删除了</span> <span class="token keyword">delete</span> num2<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//把num2删除了</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> num1<span class="token punctuation">)</span><span class="token punctuation">;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num1<span class="token operator">+</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> num2<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="作用域链"><a href="#作用域链" class="headerlink" title="作用域链"></a>作用域链</h3><p>一个函数就形成一个作用域，如果这个函数中还有函数，那么这个函数就构成另一个作用域…</p><p>将多有的作用域列出来，可以有一个结构，函数内指向函数外的链式结构，就称作作用域链。</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">var</span> num<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">;</span>    <span class="token keyword">function</span> <span class="token function">f1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">var</span> num<span class="token operator">=</span><span class="token number">20</span><span class="token punctuation">;</span>      <span class="token keyword">function</span> <span class="token function">f2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">var</span> num<span class="token operator">=</span><span class="token number">30</span><span class="token punctuation">;</span>        <span class="token keyword">function</span> <span class="token function">f3</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">var</span> num<span class="token operator">=</span><span class="token number">50</span><span class="token punctuation">;</span>          console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token function">f3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token function">f2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">f1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果当前作用域没有这个变量，就向上一级作用域查找，直到查到这个变量。如果在全局作用域仍然没有找到这个变量，那就是undefined。</p><h3 id="预解析"><a href="#预解析" class="headerlink" title="预解析"></a>预解析</h3><blockquote><p>注意：ES6不存在预解析，也就是说let和const不会有变量的提升</p></blockquote><p>预解析的过程：</p><ol><li>把变量的声明提升到作用域的最前面，只会<strong>提升声明</strong>，不会提升赋值</li><li>把函数的声明提升到当前作用域的最前面，只会提升声明，<strong>不会提升调用</strong></li><li>先提升var，在提升function</li></ol><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">25</span><span class="token punctuation">;</span><span class="token keyword">function</span> abc <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token function">alert</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//undefined</span>  <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">abc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 如果变量和函数同名的话，函数先打印</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'aaaaa'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 作用域 </tag>
            
            <tag> 预解析 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数组、函数和对象</title>
      <link href="/archives/bfe8a210.html"/>
      <url>/archives/bfe8a210.html</url>
      
        <content type="html"><![CDATA[<h3 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h3><p>数组：数组就是一组有序的数据</p><p>数组的作用：可以一次性存储多个数据</p><p>数组的索引（下标）：从0开始，到arr.length-1结束</p><p>数组元素：数组中存储的每个数据，都是数组的元素</p><p>数组长度：就是数组元素的个数（使用arr.length获取）</p><h4 id="1-通过构造函数定义数组"><a href="#1-通过构造函数定义数组" class="headerlink" title="1. 通过构造函数定义数组"></a>1. 通过构造函数定义数组</h4><p>语法： <code>var 数组名 = new Array();</code></p><p>数组的名字可以直接输出，如果有数据可以把数组中的数据显示出来，如果没有就看不到数据</p><p><code>var 数组名 = new Array(长度);</code></p><ul><li>如果数组中没有数据，但是有长度，那么数组中的每个值就是 undefined</li><li>使用构造函数创建数组的时候，如果Array(一个数字)—那么这个数字就表示的是数组的长度</li><li>如果Array(多个值)，那么这些值就是数组中的数据，数据的长度就是这些数据的个数</li></ul><h4 id="2-通过字面量的方式创建数组"><a href="#2-通过字面量的方式创建数组" class="headerlink" title="2. 通过字面量的方式创建数组"></a>2. 通过字面量的方式创建数组</h4><p><code>var数组名 = [];</code></p><p>如何设置数组中某个位置的值：</p><p>数组名[下标] = 值———<code>arr[3] = 10;</code></p><p>如何获取数组中某个位置的值：</p><p><code>console.log(arr[3]);</code></p><blockquote><p>数组中存储的数据类型可以不一样—六种数据类型都可以设置</p><p>数组的长度可以该变—可以设置值</p></blockquote><h4 id="3-冒泡排序"><a href="#3-冒泡排序" class="headerlink" title="3. 冒泡排序"></a>3. 冒泡排序</h4><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//冒泡排序：把一组数据，按照一定的顺序进行排列（从大到小，或者从小到大）</span><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//外层循环控制比较的轮数 一共比较： arr.length-1 轮</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token number">-1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">-</span> i<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">></span> arr<span class="token punctuation">{</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">var</span> temp <span class="token operator">=</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>            arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            arr<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><p>函数：把一段代码封装，在需要的时候调用</p><p>函数的作用：代码的重用（复用）</p><p>函数的定义（es5）：</p><p>​        function 函数名 （）{<br>​                函数体；</p><p>​        }    </p><p>函数的调用：</p><p>​        函数名();</p><p><strong>注意：</strong></p><ul><li>函数需要先定义，才能使用</li><li>函数的命名要按照驼峰模式命名，即首字母小写后面每个单词的首字母大写</li><li>函数一旦重名，后面的函数会把前面的覆盖</li><li>一个函数最好一个功能</li></ul><h4 id="函数的参数"><a href="#函数的参数" class="headerlink" title="函数的参数"></a>函数的参数</h4><p>函数在定义时，函数后面的小括号里面的变量就是参数，目的是在函数调用的时候，用户传进来的值操作；</p><p>函数调用的时候，按照提示的方式给变量赋值，这个过程叫做传值，也就是把值传进了参数中</p><p><strong>形参：</strong> 函数在定义的时候小括号里面的变量就是形参</p><p><strong>实参：</strong> 函数在调用的时候小括号里面传入的值就是实参，实参可以时变量也可以时值。</p><blockquote><p>形参和实参的个数可以不一致</p></blockquote><h4 id="函数返回值"><a href="#函数返回值" class="headerlink" title="函数返回值"></a>函数返回值</h4><p>在函数内部又 <code>return</code> 关键字，并且在 <code>return</code> 之后又内容，这个内容就被返回了。</p><p>当函数调用之后，需要这个返回值，那么定义变量接受即可。</p><ul><li><p>如果一个函数有return，那么这个函数就有返回值，如果没有return，那么就没有返回值。</p></li><li><p>如果一个函数中，没有明确的返回值，如果调用后接收了，结果就是undefined。。</p></li><li><p>变量声明，没有赋值也是undefined</p></li><li><p>没有明确的返回值指：函数中有return，但是return后面没有内容，或者函数中没有return就是没明确的返回值</p><blockquote><p>return后面的代码不会被执行—-相当于结束语句</p></blockquote></li></ul><h4 id="函数案例"><a href="#函数案例" class="headerlink" title="函数案例"></a>函数案例</h4><p><strong>质数判断：</strong></p><p>质数定义：只能被1和其自身整除，质数是从2开始的</p><p>判断方法：用这个数字和其前面的所有数字做除法运算，如果都不能被整除就是质数，否则就不是质数。</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">isPrimeNumber</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span> num <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>num<span class="token operator">%</span>i<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>          <span class="token comment" spellcheck="true">//说明有一个数字整除了,就没有必要向后继续整除了,此时就已经验证出不是质数</span>          <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span>      <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">isPrimeNumber</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token string">"是质数"</span><span class="token punctuation">:</span><span class="token string">"不是质数"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>数组反转</strong></p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">reverseArray</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">var</span> temp <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>arr<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">-</span> i<span class="token punctuation">]</span><span class="token punctuation">;</span>        arr<span class="token punctuation">[</span>arr<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">-</span> i<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">return</span> arr<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">reverseArray</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>斐波那契数列</strong></p><pre class="line-numbers language-javascript"><code class="language-javascript"> <span class="token comment" spellcheck="true">//1 1 2 3 5 8 13 21 34 55 89 144</span>        <span class="token keyword">function</span> <span class="token function">getFib</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">var</span> num1 <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">var</span> num2 <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">var</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> num<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//第三个数是前两个数之和</span>                sum <span class="token operator">=</span> num1 <span class="token operator">+</span> num2<span class="token punctuation">;</span>                num1 <span class="token operator">=</span> num2<span class="token punctuation">;</span>                num2 <span class="token operator">=</span> sum<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> sum<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">getFib</span><span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="arguments对象"><a href="#arguments对象" class="headerlink" title="arguments对象"></a>arguments对象</h4><p>定义一个函数如果不确定用户是否传入了参数，或者说不知道用户传入了几个参数，没法计算；但是如果在函数中知道了参数的个数和值，可以直接使用</p><pre class="line-numbers language-javascript"><code class="language-javascript"> <span class="token keyword">function</span> <span class="token function">f1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">//arguments----->数组使用------伪数组---</span>      <span class="token keyword">var</span> sum<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//arguments-----传入的数组</span>      <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>arguments<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        sum<span class="token operator">+</span><span class="token operator">=</span>arguments<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">return</span> sum<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">f1</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="函数的其他定义方式"><a href="#函数的其他定义方式" class="headerlink" title="函数的其他定义方式"></a>函数的其他定义方式</h4><p>1.命名函数：如果函数有名字就是命名函数</p><p>2.匿名函数：如果函数没有名字就是匿名函数</p><p>函数的另一种定义方式：</p><p>把一个函数给一个变量，<strong>此时形成了函数表达式</strong></p><p>var 变量名 = 匿名函数；</p><p>例子：</p><p>var f1 = function (){</p><p>};</p><p>f1();</p><p>定义一个变量f1用来接收后面的函数表达式，那么这个变量就相当于是一个函数，可以直接加（）进行调用；</p><blockquote><p>函数表达式后面，赋值结束后，大括号要加上分号，相当于是为变量赋值，所以函数也是一种数据类型</p></blockquote><p><strong>函数的自调用:</strong> 一次性的函数</p><p> <code>(function(){console.log(&quot;函数自调用&quot;)；})();</code></p><h4 id="回调函数"><a href="#回调函数" class="headerlink" title="回调函数"></a>回调函数</h4><p>函数可以作为参数使用，如果一个函数作为参数使用了，那么这个函数就是回调函数</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//此时参数应该是一个函数体</span> <span class="token keyword">function</span> <span class="token function">sayHi</span><span class="token punctuation">(</span>fn<span class="token punctuation">)</span> <span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"您好啊"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//fn此时应该是一个函数</span>    <span class="token punctuation">}</span>    <span class="token keyword">function</span> <span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"你好啊"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//传入的实际上是函数体</span>    <span class="token function">sayHi</span><span class="token punctuation">(</span>sayHello<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="函数作为返回值使用"><a href="#函数作为返回值使用" class="headerlink" title="函数作为返回值使用"></a>函数作为返回值使用</h4><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//结论:函数是可以作为返回值使用的:</span>    <span class="token keyword">function</span> <span class="token function">f1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"f1函数调用了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"这是一个函数"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token comment" spellcheck="true">//调用，也就是把函数f1的返回值赋给了ff变量，又因为函数f1的返回值是一个匿名函数，就相当于把这个匿名函数赋给了ff变量</span>    <span class="token keyword">var</span> ff<span class="token operator">=</span><span class="token function">f1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//ff就是一个函数了</span>    <span class="token function">ff</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h3><ul><li>面向过程:凡事都要亲力亲为,每件事的具体过程都要知道,注重的是过程</li><li>面向对象:根据需求找对象,所有的事都用对象来做,注重的是结果</li><li>面向对象特性:封装,继承,多态 (抽象性)</li><li>js不是面向对象的语言,但是可以模拟面向对象的思想</li><li>js是一门基于对象的语言.</li><li>对象：有属性和方法，是具体特指的某一个事物</li></ul><h4 id="创建对象的四种方式："><a href="#创建对象的四种方式：" class="headerlink" title="创建对象的四种方式："></a>创建对象的四种方式：</h4><h5 id="1-调用系统的构造函数进行创建"><a href="#1-调用系统的构造函数进行创建" class="headerlink" title="1. 调用系统的构造函数进行创建"></a>1. 调用系统的构造函数进行创建</h5><p><code>var obj = new Object();</code></p><pre class="line-numbers language-javascript"><code class="language-javascript">    <span class="token comment" spellcheck="true">//练习:创建一个手机对象,手机有型号,有颜色,可以打电话和发短信</span>    <span class="token keyword">var</span> phone<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    phone<span class="token punctuation">.</span>size<span class="token operator">=</span><span class="token string">"iphone8"</span><span class="token punctuation">;</span>    phone<span class="token punctuation">.</span>color<span class="token operator">=</span><span class="token string">"黑色"</span><span class="token punctuation">;</span>    phone<span class="token punctuation">.</span>call<span class="token operator">=</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"打电话"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    phone<span class="token punctuation">.</span>sendMessage<span class="token operator">=</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"你好"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    phone<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    phone<span class="token punctuation">.</span><span class="token function">sendMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="2-通过工厂模式创建对象（第一种方式的变形）"><a href="#2-通过工厂模式创建对象（第一种方式的变形）" class="headerlink" title="2.通过工厂模式创建对象（第一种方式的变形）"></a>2.通过工厂模式创建对象（第一种方式的变形）</h5><p>​        function 函数名 （参数）{</p><p>​                var 变量名 = new Object();</p><p>​                属性；</p><p>​                方法；    </p><p>​                return 变量名；</p><p>​        }</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//工厂模式创建对象</span>    <span class="token keyword">function</span> <span class="token function">createObject</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span>age<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//创建对象</span>      <span class="token comment" spellcheck="true">//添加属性</span>      obj<span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>      obj<span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//添加方法</span>      obj<span class="token punctuation">.</span>sayHi <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"我叫:"</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">"我今年:"</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> obj<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//创建人的对象</span>    <span class="token keyword">var</span> per1 <span class="token operator">=</span> <span class="token function">createObject</span><span class="token punctuation">(</span><span class="token string">"小芳"</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    per1<span class="token punctuation">.</span><span class="token function">sayHi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//创建一个人的对象</span>    <span class="token keyword">var</span> per2 <span class="token operator">=</span> <span class="token function">createObject</span><span class="token punctuation">(</span><span class="token string">"小红"</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    per2<span class="token punctuation">.</span><span class="token function">sayHi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="3-自定义构造函数创建对象"><a href="#3-自定义构造函数创建对象" class="headerlink" title="3. 自定义构造函数创建对象"></a>3. 自定义构造函数创建对象</h5><p>function 函数名 (参数) {</p><p>​    属性；</p><p>​    方法；</p><p>}</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//函数和构造函数的区别；名字是不是大写(首字母是大写)</span>    <span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span>age<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token operator">=</span>name<span class="token punctuation">;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>age<span class="token operator">=</span>age<span class="token punctuation">;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>sayHi<span class="token operator">=</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"我叫:"</span><span class="token operator">+</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token operator">+</span><span class="token string">",年龄是:"</span><span class="token operator">+</span><span class="token keyword">this</span><span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//自定义构造函数创建对象:先自定义一个构造函数,创建对象</span>    <span class="token keyword">var</span> obj<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"小明"</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>    obj<span class="token punctuation">.</span><span class="token function">sayHi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> obj2<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"小红"</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj2<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj2<span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>    obj2<span class="token punctuation">.</span><span class="token function">sayHi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="4-通过字面量的方式创建对象"><a href="#4-通过字面量的方式创建对象" class="headerlink" title="4.通过字面量的方式创建对象"></a>4.通过字面量的方式创建对象</h5><p>var 变量名 = {</p><p>​    属性；</p><p>​    方法；</p><p>}；</p><p>字面量创建对象的缺陷：一次性的对象</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//第一种方式</span><span class="token keyword">var</span> obj<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    obj<span class="token punctuation">.</span>name<span class="token operator">=</span><span class="token string">"小白"</span><span class="token punctuation">;</span>    obj<span class="token punctuation">.</span>age<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">;</span>    obj<span class="token punctuation">.</span>sayHi<span class="token operator">=</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"我是:"</span><span class="token operator">+</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    obj<span class="token punctuation">.</span><span class="token function">sayHi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//第二种方式</span><span class="token keyword">var</span> obj2<span class="token operator">=</span><span class="token punctuation">{</span>    name<span class="token punctuation">:</span><span class="token string">"小明"</span><span class="token punctuation">,</span>    age<span class="token punctuation">:</span><span class="token number">20</span><span class="token punctuation">,</span>    sayHi<span class="token punctuation">:</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"我是:"</span><span class="token operator">+</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    eat<span class="token punctuation">:</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"吃了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    obj2<span class="token punctuation">.</span><span class="token function">sayHi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    obj2<span class="token punctuation">.</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="设置和获取对象属性的另一种方式"><a href="#设置和获取对象属性的另一种方式" class="headerlink" title="设置和获取对象属性的另一种方式"></a>设置和获取对象属性的另一种方式</h5><p>obj[“属性名”] == obj.name;</p><h4 id="json格式的数据"><a href="#json格式的数据" class="headerlink" title="json格式的数据"></a>json格式的数据</h4><p>json也是一个对象，数据都是成对的，一般json格式的数据无论是键还是值都是用双引号的括起来的</p><pre class="line-numbers language-javascript"><code class="language-javascript"> <span class="token keyword">var</span> json <span class="token operator">=</span> <span class="token punctuation">{</span>      <span class="token string">"name"</span><span class="token punctuation">:</span> <span class="token string">"小明"</span><span class="token punctuation">,</span>      <span class="token string">"age"</span><span class="token punctuation">:</span> <span class="token string">"10"</span><span class="token punctuation">,</span>      <span class="token string">"sex"</span><span class="token punctuation">:</span> <span class="token string">"男"</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//遍历对象,是不能通过for循环遍历,无序</span>      <span class="token comment" spellcheck="true">//key是一个变量,这个变量中存储的是该对象的所有的属性的名字</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> key <span class="token keyword">in</span> json<span class="token punctuation">)</span> <span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>key <span class="token operator">+</span> <span class="token string">"==========="</span> <span class="token operator">+</span> json<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="简单类型和复杂类型"><a href="#简单类型和复杂类型" class="headerlink" title="简单类型和复杂类型"></a>简单类型和复杂类型</h3><p>js原始数据类型：string，number， boolean，null，undefined， object</p><p>基本类型（简单类型，值类型）：number， boolean， string</p><p>复杂类型（引用类型）：object</p><p>空类型：undefined，null</p><p>值类型：</p><ul><li>值类型的值在栈中存储</li><li>值类型之间传递的是值</li></ul><p>引用类型：</p><ul><li><p>引用类型的对象在堆上存储，地址在栈上存储</p></li><li><p>引用类型之间传递的是<strong>地址</strong></p><p><strong>值类型在栈上存储</strong></p></li></ul><p><img src="/medias/loading.gif" data-original="https://gitee.com/aurorapic/BlogPic/raw/master/img/20200412154426.png" alt="值类型在栈上存储"></p><p><strong>引用类型在堆上存储</strong></p><p><img src="/medias/loading.gif" data-original="https://gitee.com/aurorapic/BlogPic/raw/master/img/20200412160234.png" alt="引用类型在堆上存储"></p><blockquote><p>new的执行过程—-new的时候系统做了什么？</p><p>1.开辟空间，存储创建的新的对象</p><p>2.把this设置为当前的对象</p><p>3.设置属性和方法的值</p><p>4.返回当前的新的对象</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数组 </tag>
            
            <tag> 函数 </tag>
            
            <tag> 对象 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>js基础语法</title>
      <link href="/archives/6e47d1b5.html"/>
      <url>/archives/6e47d1b5.html</url>
      
        <content type="html"><![CDATA[<h3 id="js数据类型"><a href="#js数据类型" class="headerlink" title="js数据类型"></a>js数据类型</h3><pre class="line-numbers language-javascript"><code class="language-javascript">js中原始数据类型有：number，string，boolean，<span class="token keyword">null</span>，undefined，object<span class="token number">1</span><span class="token punctuation">.</span>number：数字类型（包括整数和小数）<span class="token number">2</span><span class="token punctuation">.</span>string：字符串数据类型<span class="token number">3</span><span class="token punctuation">.</span>boolean：布尔数据类型（只有两个值：<span class="token boolean">true</span>（<span class="token number">1</span>），<span class="token boolean">false</span>（<span class="token number">0</span>））<span class="token number">4</span><span class="token punctuation">.</span><span class="token keyword">null</span>：空类型，值只有一个：<span class="token keyword">null</span>（一个对象的指向为空，此时赋值为<span class="token keyword">null</span>）<span class="token number">5</span><span class="token punctuation">.</span>undefined：未定义，值只有一个，undefined；    什么情况下结果是undefined？    a<span class="token punctuation">.</span>变量声明了，但是没有赋值    b<span class="token punctuation">.</span>函数没有明确返回值，但是却接收了    c<span class="token punctuation">.</span>如果一个变量是undefined和一个数字进行计算，结果是：<span class="token number">NaN</span>（not a number） 不是一个数字，也没有意义<span class="token number">6</span><span class="token punctuation">.</span>object 对象如何获取这个变量的数据类型是什么？ 使用 <span class="token keyword">typeof</span> 来获取语法：<span class="token keyword">typeof</span> 变量名     <span class="token keyword">typeof</span><span class="token punctuation">(</span>变量名<span class="token punctuation">)</span>在控制台中输出：<span class="token keyword">var</span> num <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="数字类型（number）"><a href="#数字类型（number）" class="headerlink" title="数字类型（number）"></a>数字类型（number）</h4><p>在js中所有的数字都属于number类型，包括整数和小数。</p><pre><code>进制：二进制:遇到2进一  00000001-----1  00000010-----2  00000011-----3  00000100-----4  00000101----5  00000110----6  00000111-----7  00001000-----8  00001001----9八进制:遇到8进一  00000001  00000002  00000003  00000004  00000005  00000006  00000007  00000010-----8  00000011-----9  00000012-----10十进制:遇到10进一  0  1  2  3  4  5  6  7  8  9  10十六进制:遇到f进一 （f--15）0000000100000002000000030000000400000005000000060000000700000008000000090000000a----100000000b---110000000c----120000000d---130000000e---140000000f---1500000010---1600000011---1700000012---180f12ajs中可以表示那些进制？var num = 10;//十进制var num1 = 012;//八进制中的10    var num2 = 0x10//十六进制中的16</code></pre><blockquote><p>八进制以0开头，逢8进1，如果最后一位数字大于等于8会被当做十进制执行</p></blockquote><p>数字的注意内容：</p><pre class="line-numbers language-javascript"><code class="language-javascript">数字类型有范围：最大值和最小值console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Number<span class="token punctuation">.</span>MAX_VALUE<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//数字类型的最大值</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Number<span class="token punctuation">.</span>MIN_VALUE<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//数字类型的最小值</span>不要用小数去验证小数：<span class="token keyword">var</span> num1 <span class="token operator">=</span> <span class="token number">0.1</span><span class="token punctuation">;</span><span class="token keyword">var</span> num2 <span class="token operator">=</span> <span class="token number">0.2</span><span class="token punctuation">;</span><span class="token keyword">var</span> result <span class="token operator">=</span> num1 <span class="token operator">+</span> num2<span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token operator">==</span><span class="token number">0.3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//自带的bug 结果为flase</span><span class="token function">如何验证这个结果是不是NaN，应该使用isNaN</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> num<span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">isNaN</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//num 是 undefined 不是一个数字---> NaN true</span>console<span class="token punctuation">,</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">isNaN</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//false NaN不是一个数字  10是一个数字 flase</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h4><pre class="line-numbers language-javascript"><code class="language-javascript">获取字符串的长度：变量名<span class="token punctuation">.</span>lengtheg<span class="token punctuation">:</span>    <span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">"asdfghjk"</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//获取字符串的长度</span>字符串的拼接：<span class="token number">1</span><span class="token punctuation">.</span>使用 <span class="token operator">+</span> 可以把多个字符串放在一起形成一个字符串<span class="token number">2</span><span class="token punctuation">.</span>如果只有一个是字符串其他的是数字，那么结果也是拼接，不是相加<span class="token number">3</span><span class="token punctuation">.</span>如果有一个是字符串，另一个不是字符串，使用 <span class="token operator">-</span> 号，此时会发生计算（<span class="token operator">*</span> 、<span class="token operator">/</span> 也是一样的）    <span class="token keyword">var</span> str1<span class="token operator">=</span><span class="token string">"10"</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> str2<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str1<span class="token operator">*</span>str2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token number">4</span><span class="token punctuation">.</span>浏览器帮我们自动把字符串类型转换成了数字类型，称作：隐式转换<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h4><pre class="line-numbers language-javascript"><code class="language-javascript">一 其他类型转成数字类型    <span class="token number">1</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//转整数</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token string">"10"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//10</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token string">"10asd"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//10</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token string">"10.25"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//10</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token string">"1afd0"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//1</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token string">"a10"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//NaN</span>    <span class="token number">2</span><span class="token punctuation">.</span><span class="token function">parseFloat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//转小数</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">parseFloat</span><span class="token punctuation">(</span><span class="token string">"10"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//10</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">parseFloat</span><span class="token punctuation">(</span><span class="token string">"10.456"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//10.466</span>    <span class="token number">3</span><span class="token punctuation">.</span><span class="token function">Number</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//转数字</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token string">"10"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//10</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token string">"10asd"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//NaN</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token string">"10.25"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//10.25</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token string">"1afd0"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//NaN</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token string">"a10"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//NaN</span>总结<span class="token punctuation">:</span><span class="token function">想要转成整数parseInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">转小数parseFloat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">想要转成数字类型Number</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">--</span><span class="token operator">></span>比前两种严格二 其他类型转成字符串    <span class="token number">1</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> num <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//转成字符串类型</span>    <span class="token number">2</span><span class="token punctuation">.</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> num <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>        console<span class="token punctuation">,</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">String</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>注意： 如果变量有意义调用<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>转换      如果没有意义 <span class="token function">调用String</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>转换三 其他类型转成Boolean类型    <span class="token function">Boolean</span><span class="token punctuation">(</span>值<span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">Boolean</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//true</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">Boolean</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//false</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">Boolean</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//true</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">Boolean</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//true</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">Boolean</span><span class="token punctuation">(</span><span class="token string">"哈哈"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//true</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">Boolean</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//false</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">Boolean</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//false</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">Boolean</span><span class="token punctuation">(</span>undefined<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//false</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="操作符"><a href="#操作符" class="headerlink" title="操作符"></a>操作符</h4><pre class="line-numbers language-javascript"><code class="language-javascript">算术运算符：<span class="token operator">+</span> <span class="token operator">-</span> <span class="token operator">*</span> <span class="token operator">/</span>算术运算表达式：有算术运算符连接起起来的表达式一元运算符：这个操作符只需一个操作数就可以运算的符号    <span class="token operator">++</span> <span class="token operator">--</span>a<span class="token operator">++</span> 先参与运算，再加<span class="token number">1</span>     <span class="token operator">++</span>a先自身加<span class="token number">1</span>，再参与运算a<span class="token operator">--</span> 先参与运算，再减<span class="token number">1</span>     <span class="token operator">++</span>a先自身减<span class="token number">1</span>，再参与运算二元运算符：这个操作符由两个操作数连接起来运算    a <span class="token operator">+</span> b三元运算符：表达式<span class="token operator">?</span> 条件<span class="token number">1</span><span class="token punctuation">:</span>条件<span class="token number">2</span>复合运算符：<span class="token operator">+</span><span class="token operator">=</span> <span class="token operator">-</span><span class="token operator">=</span> <span class="token operator">/</span><span class="token operator">=</span> <span class="token operator">*</span><span class="token operator">=</span> <span class="token operator">%</span><span class="token operator">=</span>复合运算表达式：由复合运算符连接起来的表达式      <span class="token keyword">var</span> num <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>    num <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//num = num + 10;</span>关系运算符：<span class="token operator">></span>  <span class="token operator">&lt;</span>  <span class="token operator">>=</span>   <span class="token operator">&lt;=</span>   <span class="token operator">==</span>  <span class="token operator">===</span>  <span class="token operator">!=</span> <span class="token operator">!==</span>关系运算表达式：由关系运算符连接起来的表达式，关系运算表达式的值是布尔类型的逻辑运算符：    <span class="token operator">&amp;&amp;</span> <span class="token operator">--</span>逻辑与<span class="token operator">--</span>并且的意思<span class="token operator">||</span> <span class="token operator">--</span>逻辑或<span class="token operator">--</span>或者的意思<span class="token operator">!</span> <span class="token operator">--</span>逻辑非<span class="token operator">--</span>取反的意思逻辑运算表达式：由逻辑运算符连接起来的表达式表达式<span class="token number">1</span> <span class="token operator">&amp;&amp;</span> 表达式<span class="token number">2</span>     一假则假表达式<span class="token number">1</span> <span class="token operator">||</span> 表达式<span class="token number">2</span>     一真则真<span class="token operator">!</span>表达式如果表达式的结果为<span class="token boolean">true</span>，那么整体结果是<span class="token boolean">false</span>；反之为<span class="token boolean">true</span>赋值运算符： <span class="token operator">=</span>字面量<span class="token punctuation">:</span>把一个值直接赋值给某一个变量（声明变量并初始化）    <span class="token keyword">var</span> num <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="流程控制"><a href="#流程控制" class="headerlink" title="流程控制"></a>流程控制</h3><p>1.顺序结构：从上到下，从左到右依次执行。</p><p>2.分支结构：if 语句   if-else 语句  if  else-if  else-if else 语句  switch-case  三元运算表达式</p><p>3.循环结构：while循环       do-while 循环     for循环      for-in循环</p><h4 id="分支结构"><a href="#分支结构" class="headerlink" title="分支结构"></a>分支结构</h4><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token number">1</span><span class="token punctuation">.</span><span class="token keyword">if</span> 语句： 主要用来判断    语法： <span class="token keyword">if</span>（表达式）<span class="token punctuation">{</span>            代码块；        <span class="token punctuation">}</span>执行过程：先判断表达式结果是<span class="token boolean">true</span>还是flase，如果是<span class="token boolean">true</span>那么执行大括号里面的代码块，如果是<span class="token boolean">false</span>就不执行大括号里面的内容<span class="token number">2</span><span class="token punctuation">.</span><span class="token keyword">if</span><span class="token operator">-</span><span class="token keyword">else</span> 语句    语法：    <span class="token keyword">if</span><span class="token punctuation">(</span>表达式<span class="token punctuation">)</span><span class="token punctuation">{</span>        代码块<span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>        代码块<span class="token number">2</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>执行过程：先判断表达式结果是<span class="token boolean">true</span>还是<span class="token boolean">false</span>，如果是<span class="token boolean">true</span>那就执行大括号里面的代码块，如果是<span class="token boolean">false</span>就执行<span class="token keyword">else</span>里面的代码块<span class="token number">3</span><span class="token punctuation">.</span>三元表达式：    <span class="token operator">?</span> <span class="token punctuation">:</span>    语法：    <span class="token keyword">var</span> 变量 <span class="token operator">=</span> 表达式<span class="token number">1</span> <span class="token operator">?</span> 表达式<span class="token number">2</span> <span class="token punctuation">:</span> 表达式<span class="token number">3</span><span class="token punctuation">;</span>执行过程： 表达式<span class="token number">1</span> 的结果是<span class="token boolean">true</span>，那么执行表达式<span class="token number">2</span>，并把结果赋值给变量；         如果是<span class="token boolean">false</span>那么执行表达式<span class="token number">3</span>，并把结果赋值给变量<span class="token punctuation">.</span>ps：绝大多数情况下，<span class="token keyword">if</span><span class="token operator">-</span><span class="token keyword">else</span>语句都可以用三元表达式来替换。<span class="token number">4</span><span class="token punctuation">.</span><span class="token keyword">if</span> <span class="token keyword">else</span><span class="token operator">-</span><span class="token keyword">if</span> <span class="token keyword">else</span><span class="token operator">-</span><span class="token keyword">if</span> <span class="token operator">...</span> <span class="token keyword">else</span> 语句    语法：    <span class="token keyword">if</span><span class="token punctuation">(</span>表达式<span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        代码块<span class="token number">1</span>；    <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>表达式<span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        代码块<span class="token number">2</span>；    <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>表达式<span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        代码块<span class="token number">3</span>；    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>        代码块<span class="token number">4</span>；    <span class="token punctuation">}</span>执行过程：如果表达式<span class="token number">1</span>为<span class="token boolean">true</span>，那么执行代码块<span class="token number">1</span>；如果表达式<span class="token number">1</span>为<span class="token boolean">false</span>，那么判断表达式<span class="token number">2</span>，如果表达式<span class="token number">2</span>为<span class="token boolean">true</span>，则执行代码块<span class="token number">2</span>；如果表达式<span class="token number">2</span>为<span class="token boolean">false</span>，那么判断表达式<span class="token number">3</span>，如果为<span class="token boolean">true</span>，那么执行代码块<span class="token number">3</span>；如果为<span class="token boolean">false</span>那么执行代码块<span class="token number">4</span>，结束分支判断<span class="token punctuation">.</span>    ps：<span class="token keyword">else</span><span class="token operator">-</span><span class="token keyword">if</span> 可以写多个，具体写几个看需求        <span class="token keyword">else</span> 可以不用写，具体也看需求<span class="token number">5</span><span class="token punctuation">.</span><span class="token keyword">switch</span><span class="token operator">-</span><span class="token keyword">case</span> 语句    语法：    <span class="token keyword">switch</span><span class="token punctuation">(</span>表达式<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">case</span> 值<span class="token number">1</span><span class="token punctuation">:</span>            代码<span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> 值<span class="token number">2</span><span class="token punctuation">:</span>            代码<span class="token number">2</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> 值<span class="token number">3</span><span class="token punctuation">:</span>            代码<span class="token number">3</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token operator">...</span> <span class="token operator">...</span>        <span class="token keyword">default</span><span class="token punctuation">:</span>代码<span class="token number">5</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>执行过程：获取表达式的值，然后和值<span class="token number">1</span> 比较，如果一样，则执行代码<span class="token number">1</span>，遇到<span class="token keyword">break</span>跳出整个语句，后面的代码不执行；        如果表达式的值和值<span class="token number">1</span>不一样，则和值<span class="token number">2</span>比较，如果一样，就执行代码<span class="token number">2</span>，遇到<span class="token keyword">break</span>跳出整个语句；        如果表达式的值和值<span class="token number">2</span>不一样，则和值<span class="token number">3</span>比较，如果一样，就执行代码<span class="token number">3</span>，遇到<span class="token keyword">break</span>跳出整个语句；        ···        如果表达式的值和所有<span class="token keyword">case</span>的值都不一样，则执行<span class="token keyword">default</span>后面的代码<span class="token number">5</span>，然后跳出整个语句ps：<span class="token keyword">default</span>后面的<span class="token keyword">break</span>可以省略，<span class="token keyword">default</span>也可以省略    <span class="token keyword">switch</span><span class="token operator">-</span><span class="token keyword">case</span>语句中和<span class="token keyword">case</span>后面的值比较时使用的是严格模式，<span class="token operator">===</span>总结：        <span class="token number">1</span><span class="token punctuation">.</span>分支语句可能有多个分支，但最终只执行一个分支        <span class="token number">2</span><span class="token punctuation">.</span><span class="token keyword">switch</span><span class="token operator">-</span><span class="token keyword">case</span> 必须有<span class="token keyword">break</span>；        <span class="token number">3</span><span class="token punctuation">.</span>三元表达式和<span class="token keyword">if</span><span class="token operator">-</span><span class="token keyword">else</span>是对两个分支的判断        <span class="token number">4</span><span class="token punctuation">.</span><span class="token keyword">if</span> <span class="token keyword">else</span><span class="token operator">-</span><span class="token keyword">if</span> ··· <span class="token keyword">else</span>：一般是对范围的判断        <span class="token number">5</span><span class="token punctuation">.</span><span class="token keyword">switch</span><span class="token operator">-</span><span class="token keyword">case</span>：一般是对具体的值的判断<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="循环语句"><a href="#循环语句" class="headerlink" title="循环语句"></a>循环语句</h4><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token number">1</span><span class="token punctuation">.</span><span class="token keyword">while</span> 循环    语法：    <span class="token keyword">var</span> 变量 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//这是定义一个计数器</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>循环的条件<span class="token punctuation">)</span><span class="token punctuation">{</span>        循环体；        计数器<span class="token operator">++</span>；<span class="token comment" spellcheck="true">//不能忘了</span>    <span class="token punctuation">}</span>执行过程：先判断条件是否为<span class="token boolean">true</span>，如果是<span class="token boolean">false</span>，那么循环的代码不执行；如果是<span class="token boolean">true</span>，那么执行循环语句，计数器<span class="token operator">++</span>，然后回到循环条件再次判断，成立就继续执行循环体，否则跳出循环体；     <span class="token comment" spellcheck="true">//求帐号和密码是否一致,登录的效果实现</span>    <span class="token comment" spellcheck="true">//提示用户输入帐号</span>    <span class="token comment" spellcheck="true">//提示用户输入密码</span>    <span class="token comment" spellcheck="true">//如果帐号或者密码不对,则一直提示用户输入帐号和密码</span>    <span class="token comment" spellcheck="true">//帐号--admin</span>    <span class="token comment" spellcheck="true">//密码--123---字符串类型</span>    <span class="token keyword">var</span> userName<span class="token operator">=</span><span class="token function">prompt</span><span class="token punctuation">(</span><span class="token string">"请您输入帐号"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//存储帐号的</span>    <span class="token keyword">var</span> userPwd<span class="token operator">=</span><span class="token function">prompt</span><span class="token punctuation">(</span><span class="token string">"请您输入密码"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//存储密码</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>userName<span class="token operator">!=</span><span class="token string">"admin"</span><span class="token operator">||</span>userPwd<span class="token operator">!=</span><span class="token string">"123"</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">//变量的重新赋值</span>       userName<span class="token operator">=</span><span class="token function">prompt</span><span class="token punctuation">(</span><span class="token string">"请您输入帐号"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//存储帐号的</span>       userPwd<span class="token operator">=</span><span class="token function">prompt</span><span class="token punctuation">(</span><span class="token string">"请您输入密码"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//存储密码</span>    <span class="token punctuation">}</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"登录成功"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token number">2</span><span class="token punctuation">.</span><span class="token keyword">do</span><span class="token operator">-</span><span class="token keyword">while</span> 循环    语法：    <span class="token keyword">var</span> 变量名 <span class="token operator">=</span> <span class="token number">0</span>；<span class="token comment" spellcheck="true">//定义一个计数器</span>    <span class="token keyword">do</span><span class="token punctuation">{</span>        循环体；        计数器<span class="token operator">++</span>    <span class="token punctuation">}</span><span class="token keyword">while</span><span class="token punctuation">(</span>循环条件<span class="token punctuation">)</span><span class="token punctuation">;</span>执行过程：先执行一次循环体，然后判断条件是否成立，不成立，则跳出循环体，成立就继续执行···总结：<span class="token keyword">while</span>  先判断 再执行，循环体有可能一次也不执行     <span class="token keyword">do</span><span class="token operator">-</span><span class="token keyword">while</span> 先执行一次循环体，再判断，至少执行一次循环体。<span class="token number">3</span><span class="token punctuation">.</span><span class="token keyword">for</span>循环    语法：    <span class="token keyword">for</span><span class="token punctuation">(</span>表达式<span class="token number">1</span>；表达式<span class="token number">2</span>；表达式<span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        循环体；    <span class="token punctuation">}</span>执行过程：先执行一次表达式<span class="token number">1</span>，然后判断表达式<span class="token number">2</span>，如果不成立直接跳出循环        如果表达式<span class="token number">2</span>成立，执行循环体的代码，结束后，跳到表达式<span class="token number">3</span>，然后跳到表达式<span class="token number">2</span>，判断表达式<span class="token number">2</span>是否成立，不成立则跳出循环。        如果表达式<span class="token number">2</span> 成立，则执行循环体，然后再跳到表达式<span class="token number">3</span>，再跳到表达式<span class="token number">2</span>，判断是否成立，一直如此。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="调试"><a href="#调试" class="headerlink" title="调试"></a>调试</h4><blockquote><p>写代码—&gt;打开浏览器—&gt;F12(开发者工具)—&gt;Sources—&gt;双击文件，在某一行代码的前面点击一下（出现的就是断点）—&gt;可以选择右上角的↓和watch监控具体的执行过程</p></blockquote><h4 id="break和continue"><a href="#break和continue" class="headerlink" title="break和continue"></a>break和continue</h4><ul><li><strong>break</strong>： 如果在循环中遇到了break，会立即跳出循环体</li><li><strong>continue</strong>： 如果在循环中遇到了continue，会直接进入下一次循环</li></ul>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mysql常用命令</title>
      <link href="/archives/4ab1a8de.html"/>
      <url>/archives/4ab1a8de.html</url>
      
        <content type="html"><![CDATA[<ol><li><p>显示所有数据库 </p><p> <code>show databases;</code></p></li><li><p>显示数据库中的数据表</p><p> <code>use 数据库名;</code> </p><p> <code>show tables;</code></p></li><li><p>显示数据表的结构</p><p><code>describe 表名;</code></p></li><li><p>新建数据库</p><p><code>create database 数据库名;</code></p></li><li><p>新建表格</p><p><code>use 数据库名;</code> <code>create table 表名(字段1 数据类型 字段属性,字段2 数据类型 字段属性,...);</code></p></li><li><p>删除数据库</p><p>  <code>drop database 数据库名;</code></p></li><li><p>删除表格</p><p> <code>drop table 表名;</code></p></li><li><p>将表中记录清空</p><p> <code>delete from 表名;</code> </p></li><li><p>显示表中的数据</p><p> <code>select * from 表名；</code></p></li></ol><p>转载于：<a href="https://www.cnblogs.com/shuaiwl/p/5534187.html" target="_blank" rel="noopener">https://www.cnblogs.com/shuaiwl/p/5534187.html</a></p><p>详解数据库文章：<a href="https://blog.csdn.net/qq_42992643/article/details/82959720" target="_blank" rel="noopener">https://blog.csdn.net/qq_42992643/article/details/82959720</a></p>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo主题更换（matery）</title>
      <link href="/archives/9fe51d8f.html"/>
      <url>/archives/9fe51d8f.html</url>
      
        <content type="html"><![CDATA[<p>博客搭建有一段时间了，之前也选择了好几个主题进行测试，最后选定了<code>next</code> 但总觉得不那么好看（主要还是因为自己不会修改吧…）。最近偶然看到了 <a href="https://blinkfox.github.io/" target="_blank" rel="noopener">闪烁之狐</a> 的博客，心动了，就下载更换了博客 <a href="https://github.com/blinkfox/hexo-theme-matery" target="_blank" rel="noopener">主题</a>，根据博客提供的教程和 <a href="https://sunhwee.com/posts/6e8839eb.html" target="_blank" rel="noopener">这篇文章</a> 修改了主题样式，挺满意的。教程很详细，但是有一些小问题，然后找了其他的一些文章进行参考，记录在下面。</p><h3 id="记录过程"><a href="#记录过程" class="headerlink" title="记录过程"></a>记录过程</h3><p>1.博客双部署及绑定域名</p><p><a href="https://blog.csdn.net/qq_42567023/article/details/102999624" target="_blank" rel="noopener">https://blog.csdn.net/qq_42567023/article/details/102999624</a></p><p><a href="https://www.renke666.top/2020/01/27/hexo部署到coding并开启https/" target="_blank" rel="noopener">https://www.renke666.top/2020/01/27/hexo%E9%83%A8%E7%BD%B2%E5%88%B0coding%E5%B9%B6%E5%BC%80%E5%90%AFhttps/</a></p><p>2.网站SEO优化</p><p><a href="https://luanzhuxian.github.io/post/82d92ad4.html" target="_blank" rel="noopener">https://luanzhuxian.github.io/post/82d92ad4.html</a></p><p>3.备份hexo博客源文件</p><p>手动备份</p><p><a href="https://wugenqiang.gitee.io/articles/manual_backup_blog_source_files.html" target="_blank" rel="noopener">https://wugenqiang.gitee.io/articles/manual_backup_blog_source_files.html</a></p><p>自动备份</p><p><a href="https://wugenqiang.gitee.io/articles/auto_backup_blog_source_files.html" target="_blank" rel="noopener">https://wugenqiang.gitee.io/articles/auto_backup_blog_source_files.html</a></p><p>4.博客静态资源压缩</p><p>基本都推荐使用gulp，但网上的方法总是出错，没有使用。还有一款hexo-neat插件，也能实现压缩。</p><p><a href="https://hasaik.com/posts/495d0b23.html" target="_blank" rel="noopener">https://hasaik.com/posts/495d0b23.html</a></p><p>5.PicGo+gitee图床实现</p><p><a href="https://blog.csdn.net/disILLL/article/details/103962241" target="_blank" rel="noopener">https://blog.csdn.net/disILLL/article/details/103962241</a></p><p>6.如何写好技术文章</p><p><a href="https://fedoryx.github.io/如何写好技术博客/" target="_blank" rel="noopener">https://fedoryx.github.io/%E5%A6%82%E4%BD%95%E5%86%99%E5%A5%BD%E6%8A%80%E6%9C%AF%E5%8D%9A%E5%AE%A2/</a></p>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>字体图标的使用</title>
      <link href="/archives/9e385e6b.html"/>
      <url>/archives/9e385e6b.html</url>
      
        <content type="html"><![CDATA[<h3 id="阿里图标库的使用"><a href="#阿里图标库的使用" class="headerlink" title="阿里图标库的使用"></a>阿里图标库的使用</h3><ol><li><p>进入阿里图标库官网 <a href="https://www.iconfont.cn/" target="_blank" rel="noopener">https://www.iconfont.cn/</a></p></li><li><p>搜索所需要的图标并添加至项目</p></li><li><p>在图标管理中查看我的项目</p><p><img src="/medias/loading.gif" data-original="https://gitee.com/aurorapic/BlogPic/raw/master/img/icon1.png" alt=""></p></li></ol><p>前端开发的三种引用方式（可进入使用帮助查看）：</p><h4 id="unicode引用"><a href="#unicode引用" class="headerlink" title="unicode引用"></a>unicode引用</h4><p>unicode是字体在网页端最原始的应用方式，特点是：</p><ul><li>兼容性最好，支持ie6+，及所有现代浏览器。</li><li>支持按字体的方式去动态调整图标大小，颜色等等。</li><li>但是因为是字体，所以不支持多色。只能使用平台里单色的图标，就算项目里有多色图标也会自动去色。</li></ul><blockquote><p>注意：新版iconfont支持多色图标，这些多色图标在unicode模式下将不能使用，如果有需求建议使用symbol的引用方式</p></blockquote><p>第一步：拷贝项目下面生成的font-face</p><blockquote><p>注意：在具体引用的时候要加上https:</p></blockquote><pre class="line-numbers language-css"><code class="language-css"><span class="token atrule"><span class="token rule">@font-face</span></span> <span class="token punctuation">{</span><span class="token property">font-family</span><span class="token punctuation">:</span> <span class="token string">'iconfont'</span><span class="token punctuation">;</span>    <span class="token property">src</span><span class="token punctuation">:</span> <span class="token url">url('iconfont.eot')</span><span class="token punctuation">;</span>    <span class="token property">src</span><span class="token punctuation">:</span> <span class="token url">url('iconfont.eot?#iefix')</span> <span class="token function">format</span><span class="token punctuation">(</span><span class="token string">'embedded-opentype'</span><span class="token punctuation">)</span>,    <span class="token url">url('iconfont.woff')</span> <span class="token function">format</span><span class="token punctuation">(</span><span class="token string">'woff'</span><span class="token punctuation">)</span>,    <span class="token url">url('iconfont.ttf')</span> <span class="token function">format</span><span class="token punctuation">(</span><span class="token string">'truetype'</span><span class="token punctuation">)</span>,    <span class="token url">url('iconfont.svg#iconfont')</span> <span class="token function">format</span><span class="token punctuation">(</span><span class="token string">'svg'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>第二步：定义iconfont的样式</p><pre class="line-numbers language-css"><code class="language-css"><span class="token selector"><span class="token class">.iconfont</span></span><span class="token punctuation">{</span>    <span class="token property">font-family</span><span class="token punctuation">:</span><span class="token string">"iconfont"</span> <span class="token important">!important</span><span class="token punctuation">;</span>    <span class="token property">font-size</span><span class="token punctuation">:</span><span class="token number">16</span>px<span class="token punctuation">;</span><span class="token property">font-style</span><span class="token punctuation">:</span>normal<span class="token punctuation">;</span>    <span class="token property">-webkit-font-smoothing</span><span class="token punctuation">:</span> antialiased<span class="token punctuation">;</span>    <span class="token property">-webkit-text-stroke-width</span><span class="token punctuation">:</span> <span class="token number">0.2</span>px<span class="token punctuation">;</span>    <span class="token property">-moz-osx-font-smoothing</span><span class="token punctuation">:</span> grayscale<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>第三步：挑选相应图标并获取字体编码，应用于页面</p><pre><code>&lt;i class=&quot;iconfont&quot;&gt;&amp;#x33;&lt;/i&gt;</code></pre><p>demo:</p><pre class="line-numbers language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>字体图标使用<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style language-css">        <span class="token comment" spellcheck="true">/*             第一步：               在样式里面申明字体             * */</span>        <span class="token atrule"><span class="token rule">@font-face</span></span> <span class="token punctuation">{</span>            <span class="token property">font-family</span><span class="token punctuation">:</span> <span class="token string">'iconfont'</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">/* project id 1721642 */</span>            <span class="token property">src</span><span class="token punctuation">:</span> <span class="token url">url('https://at.alicdn.com/t/font_1721642_nv7hpyrxz0i.eot')</span><span class="token punctuation">;</span>            <span class="token property">src</span><span class="token punctuation">:</span> <span class="token url">url('https://at.alicdn.com/t/font_1721642_nv7hpyrxz0i.eot?#iefix')</span> <span class="token function">format</span><span class="token punctuation">(</span><span class="token string">'embedded-opentype'</span><span class="token punctuation">)</span>, <span class="token url">url('https://at.alicdn.com/t/font_1721642_nv7hpyrxz0i.woff2')</span> <span class="token function">format</span><span class="token punctuation">(</span><span class="token string">'woff2'</span><span class="token punctuation">)</span>, <span class="token url">url('https://at.alicdn.com/t/font_1721642_nv7hpyrxz0i.woff')</span> <span class="token function">format</span><span class="token punctuation">(</span><span class="token string">'woff'</span><span class="token punctuation">)</span>, <span class="token url">url('https://at.alicdn.com/t/font_1721642_nv7hpyrxz0i.ttf')</span> <span class="token function">format</span><span class="token punctuation">(</span><span class="token string">'truetype'</span><span class="token punctuation">)</span>, <span class="token url">url('https://at.alicdn.com/t/font_1721642_nv7hpyrxz0i.svg#iconfont')</span> <span class="token function">format</span><span class="token punctuation">(</span><span class="token string">'svg'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token selector"><span class="token class">.iconfont</span> </span><span class="token punctuation">{</span>            <span class="token property">font-family</span><span class="token punctuation">:</span> <span class="token string">"iconfont"</span> <span class="token important">!important</span><span class="token punctuation">;</span>            <span class="token property">font-size</span><span class="token punctuation">:</span> <span class="token number">16</span>px<span class="token punctuation">;</span>            <span class="token property">font-style</span><span class="token punctuation">:</span> normal<span class="token punctuation">;</span>            <span class="token property">-webkit-font-smoothing</span><span class="token punctuation">:</span> antialiased<span class="token punctuation">;</span>            <span class="token property">-webkit-text-stroke-width</span><span class="token punctuation">:</span> <span class="token number">0.2</span>px<span class="token punctuation">;</span>            <span class="token property">-moz-osx-font-smoothing</span><span class="token punctuation">:</span> grayscale<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>iconfont<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token entity" title="&#xe660;">&amp;#xe660;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>i</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="font-class引用"><a href="#font-class引用" class="headerlink" title="font-class引用"></a>font-class引用</h4><p>font-class是unicode使用方式的一种变种，主要是解决unicode书写不直观，语意不明确的问题。</p><p>与unicode使用方式相比，具有如下特点：</p><ul><li>兼容性良好，支持ie8+，及所有现代浏览器。</li><li>相比于unicode语意明确，书写更直观。可以很容易分辨这个icon是什么。</li><li>因为使用class来定义图标，所以当要替换图标时，只需要修改class里面的unicode引用。</li><li>不过因为本质上还是使用的字体，所以多色图标还是不支持的。</li></ul><p>使用步骤：</p><p>第一步：拷贝项目下面生成的fontclass代码</p><blockquote><p>在html使用link标签进行引用</p><p><code>&lt;link rel= &quot;stylesheet&quot; href=&quot;https://at.alicdn.com/t/font_1721904_eahcfxotuf8.css&quot;&gt;</code></p></blockquote><blockquote><p>要加上https: 否则不会引用成功</p></blockquote><pre><code>//at.alicdn.com/t/font_8d5l8fzk5b87iudi.css</code></pre><p>第二步：挑选相应图标并获取类名，应用于页面：</p><blockquote><p>注意：class有两个类名，缺一不可</p></blockquote><pre><code>&lt;i class=&quot;iconfont icon-xxx&quot;&gt;&lt;/i&gt;</code></pre><h4 id="symbol引用"><a href="#symbol引用" class="headerlink" title="symbol引用"></a>symbol引用</h4><p>这是一种全新的使用方式，应该说这才是未来的主流，也是平台目前推荐的用法。相关介绍可以参考这篇<a href="https://www.iconfont.cn/help/detail?spm=a313x.7781069.1998910419.d8cf4382a&helptype=code" target="_blank" rel="noopener">文章</a> ,这种用法其实是做了一个svg的集合，与上面两种相比具有如下特点：</p><ul><li>支持多色图标了，不再受单色限制。</li><li>通过一些技巧，支持像字体那样，通过<code>font-size</code>,<code>color</code>来调整样式。</li><li>兼容性较差，支持 ie9+,及现代浏览器。</li><li>浏览器渲染svg的性能一般，还不如png。</li></ul><p>使用步骤如下：</p><p>第一步：拷贝项目下面生成的symbol代码：</p><blockquote><p>使用script标签进行引用，前面要加上https: 才有效</p></blockquote><pre><code>//at.alicdn.com/t/font_8d5l8fzk5b87iudi.js</code></pre><p>第二步：加入通用css代码（引入一次就行）：</p><pre class="line-numbers language-css"><code class="language-css"><span class="token selector">&lt;style type="text/css">    <span class="token class">.icon</span> </span><span class="token punctuation">{</span>       <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">1</span>em<span class="token punctuation">;</span> <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">1</span>em<span class="token punctuation">;</span>       <span class="token property">vertical-align</span><span class="token punctuation">:</span> -<span class="token number">0.15</span>em<span class="token punctuation">;</span>       <span class="token property">fill</span><span class="token punctuation">:</span> currentColor<span class="token punctuation">;</span>       <span class="token property">overflow</span><span class="token punctuation">:</span> hidden<span class="token punctuation">;</span>    <span class="token punctuation">}</span>&lt;/style><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>第三步：挑选相应图标并获取类名，应用于页面：</p><blockquote><p>注意#不可省去</p></blockquote><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>svg</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>icon<span class="token punctuation">"</span></span> <span class="token attr-name">aria-hidden</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>use</span> <span class="token attr-name"><span class="token namespace">xlink:</span>href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#icon-xxx<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>use</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>svg</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>demo:</p><pre class="line-numbers language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>width<span class="token punctuation">=</span>device-width, initial-scale<span class="token punctuation">=</span>1.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Document<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://at.alicdn.com/t/font_1721904_eahcfxotuf8.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style language-css">        <span class="token selector"><span class="token class">.icon</span> </span><span class="token punctuation">{</span>            <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">1</span>em<span class="token punctuation">;</span>            <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">1</span>em<span class="token punctuation">;</span>            <span class="token property">vertical-align</span><span class="token punctuation">:</span> -<span class="token number">0.15</span>em<span class="token punctuation">;</span>            <span class="token property">fill</span><span class="token punctuation">:</span> currentColor<span class="token punctuation">;</span>            <span class="token property">overflow</span><span class="token punctuation">:</span> hidden<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>svg</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>icon<span class="token punctuation">"</span></span> <span class="token attr-name">aria-hidden</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>use</span> <span class="token attr-name"><span class="token namespace">xlink:</span>href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#icon-shouji<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>use</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>svg</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="icomoon的使用"><a href="#icomoon的使用" class="headerlink" title="icomoon的使用"></a>icomoon的使用</h3><p>1.进入网站：<a href="https://icomoon.io/app/#/select" target="_blank" rel="noopener">https://icomoon.io/app/#/select</a></p><p>2.选择所需要的图标,点击generate font，下载到本地</p><p>3.解压压缩包将fonts文件放到项目中，在css中进行一下引用(<strong>注意路径问题</strong>)</p><pre class="line-numbers language-css"><code class="language-css"><span class="token atrule"><span class="token rule">@font-face</span></span> <span class="token punctuation">{</span>    <span class="token property">font-family</span><span class="token punctuation">:</span> <span class="token string">'icomoon'</span><span class="token punctuation">;</span>    <span class="token property">src</span><span class="token punctuation">:</span> <span class="token url">url('../fonts/icomoon.eot?q0tv6r')</span><span class="token punctuation">;</span>    <span class="token property">src</span><span class="token punctuation">:</span> <span class="token url">url('../fonts/icomoon.eot?q0tv6r#iefix')</span> <span class="token function">format</span><span class="token punctuation">(</span><span class="token string">'embedded-opentype'</span><span class="token punctuation">)</span>, <span class="token url">url('../fonts/icomoon.ttf?q0tv6r')</span> <span class="token function">format</span><span class="token punctuation">(</span><span class="token string">'truetype'</span><span class="token punctuation">)</span>, <span class="token url">url('../fonts/icomoon.woff?q0tv6r')</span> <span class="token function">format</span><span class="token punctuation">(</span><span class="token string">'woff'</span><span class="token punctuation">)</span>, <span class="token url">url('../fonts/icomoon.svg?q0tv6r#icomoon')</span> <span class="token function">format</span><span class="token punctuation">(</span><span class="token string">'svg'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token property">font-weight</span><span class="token punctuation">:</span> normal<span class="token punctuation">;</span>    <span class="token property">font-style</span><span class="token punctuation">:</span> normal<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>4.打开压缩包中的html文件，选字体图标下面的 □ 赋值粘贴到html的标签中，然后在css中设置font-family为“icomoon”。</p><p>如下所示，就完成了引用</p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style language-css">    <span class="token atrule"><span class="token rule">@font-face</span></span> <span class="token punctuation">{</span>    <span class="token property">font-family</span><span class="token punctuation">:</span> <span class="token string">'icomoon'</span><span class="token punctuation">;</span>    <span class="token property">src</span><span class="token punctuation">:</span> <span class="token url">url('../fonts/icomoon.eot?q0tv6r')</span><span class="token punctuation">;</span>    <span class="token property">src</span><span class="token punctuation">:</span> <span class="token url">url('../fonts/icomoon.eot?q0tv6r#iefix')</span> <span class="token function">format</span><span class="token punctuation">(</span><span class="token string">'embedded-opentype'</span><span class="token punctuation">)</span>, <span class="token url">url('../fonts/icomoon.ttf?q0tv6r')</span> <span class="token function">format</span><span class="token punctuation">(</span><span class="token string">'truetype'</span><span class="token punctuation">)</span>, <span class="token url">url('../fonts/icomoon.woff?q0tv6r')</span> <span class="token function">format</span><span class="token punctuation">(</span><span class="token string">'woff'</span><span class="token punctuation">)</span>, <span class="token url">url('../fonts/icomoon.svg?q0tv6r#icomoon')</span> <span class="token function">format</span><span class="token punctuation">(</span><span class="token string">'svg'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token property">font-weight</span><span class="token punctuation">:</span> normal<span class="token punctuation">;</span>    <span class="token property">font-style</span><span class="token punctuation">:</span> normal<span class="token punctuation">;</span><span class="token punctuation">}</span>    <span class="token selector"><span class="token class">.icon</span> </span><span class="token punctuation">{</span>        <span class="token property">font-family</span><span class="token punctuation">:</span><span class="token string">"icomoon"</span><span class="token punctuation">;</span>        <span class="token number">.......</span>    <span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>icon<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>i</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其他的注意事项：</p><p>压缩包要保留好，如果后期需要其他的字体图标，可以进入官网进行字体图标的追加。</p><p>具体的操作步骤是：</p><p>1.进入官网，点击左上角的import icons 选择所要追加的字体图标的selection.json文件，就可以追加字体图标了</p><p>2.下载新的压缩文件，然后将里面的fonts文件夹覆盖原来项目中的fonts文件，就可以引用刚刚追加的图标了。</p><p>最开始使用的是icomoon的字体图标，确实相对来说麻烦，现在基本使用阿里字体库，更加方便一些。</p><p>相关文章：<a href="https://blog.csdn.net/qmm0219/article/details/78261210" target="_blank" rel="noopener">https://blog.csdn.net/qmm0219/article/details/78261210</a></p>]]></content>
      
      
      <categories>
          
          <category> 前端相关知识 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>gulp学习</title>
      <link href="/archives/eaadcd90.html"/>
      <url>/archives/eaadcd90.html</url>
      
        <content type="html"><![CDATA[<h3 id="gulp概述"><a href="#gulp概述" class="headerlink" title="gulp概述"></a>gulp概述</h3><p>gulp是基于node平台开发的前端构建工具，它能够将机械化操作编写成任务，想要执行机械化操作时执行一个命令行任务就能自动执行了。gulp能够轻松实现HTML、css、JS文件的压缩合并，语法的转换（es6，less…）公共文件的抽离以及修改文件浏览器自动刷新等任务。<a id="more"></a></p><h3 id="gulp-的使用"><a href="#gulp-的使用" class="headerlink" title="gulp 的使用"></a>gulp 的使用</h3><h4 id="基本使用规则"><a href="#基本使用规则" class="headerlink" title="基本使用规则"></a>基本使用规则</h4><ol><li>在当前项目下使用 npm  install gulp 下载gulp库文件</li><li>在项目根目录下建立gulpflie.js文件</li><li>重构项目文件夹结构：src目录放源文件，dist目录放建构后的文件</li><li>在gulpfile.js文件中编写任务</li><li>在命令行工具中执行gulp任务</li></ol><h4 id="gulp中提供的方法（常用的）"><a href="#gulp中提供的方法（常用的）" class="headerlink" title="gulp中提供的方法（常用的）"></a>gulp中提供的方法（常用的）</h4><ul><li>gulp.src(): 获取任务要处理的文件</li><li>gulp.dest(): 输出文件</li><li>gulp.task():建立gulp任务</li><li>gulp.watch():监控文件的变化</li></ul><h4 id="常用插件"><a href="#常用插件" class="headerlink" title="常用插件"></a>常用插件</h4><ol><li>gulp-htmlmin: html文件压缩</li><li>gulp-csso: 压缩css</li><li>gulp-babel: javascript语法转换（es6-&gt;es5）</li><li>gulp-less: less语法转css</li><li>gulp-uglify: 压缩javascript</li><li>gulp-file-include：公共文件抽离</li></ol><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//引用gulp模块</span><span class="token keyword">const</span> gulp <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'gulp'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> htmlmin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'gulp-htmlmin'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> fileinclude <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'gulp-file-include'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> less <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'gulp-less'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> csso <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'gulp-csso'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> babel <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'gulp-babel'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> uglify <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'gulp-uglify'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 使用gulp.task 建立任务</span><span class="token comment" spellcheck="true">// 1.任务的名称</span><span class="token comment" spellcheck="true">// 2.任务的回调函数</span>gulp<span class="token punctuation">.</span><span class="token function">task</span><span class="token punctuation">(</span><span class="token string">'first'</span><span class="token punctuation">,</span> done <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"我的第一个gulp任务"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 1.使用gulp.src获取要处理的文件</span>    gulp<span class="token punctuation">.</span><span class="token function">src</span><span class="token punctuation">(</span><span class="token string">'./src/css/base.css'</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span>gulp<span class="token punctuation">.</span><span class="token function">dest</span><span class="token punctuation">(</span><span class="token string">'dist/css'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">done</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// html任务</span><span class="token comment" spellcheck="true">// 1.html文件中代码的压缩</span><span class="token comment" spellcheck="true">// 2.抽取html文件中的公共代码</span>gulp<span class="token punctuation">.</span><span class="token function">task</span><span class="token punctuation">(</span><span class="token string">'htmlmin'</span><span class="token punctuation">,</span> done <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    gulp<span class="token punctuation">.</span><span class="token function">src</span><span class="token punctuation">(</span><span class="token string">'./src/*.html'</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span><span class="token function">fileinclude</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">// 压缩html文件中的代码</span>        <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span><span class="token function">htmlmin</span><span class="token punctuation">(</span><span class="token punctuation">{</span> collapseWhitespace<span class="token punctuation">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span>gulp<span class="token punctuation">.</span><span class="token function">dest</span><span class="token punctuation">(</span><span class="token string">'dist'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">done</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// css任务</span><span class="token comment" spellcheck="true">// 1.less语法转换</span><span class="token comment" spellcheck="true">// 2.css代码压缩</span>gulp<span class="token punctuation">.</span><span class="token function">task</span><span class="token punctuation">(</span><span class="token string">'cssmin'</span><span class="token punctuation">,</span> done <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 选择css目录下的所有less文件及css文件</span>    <span class="token comment" spellcheck="true">//gulp.src('./src/css/*.less')</span>    gulp<span class="token punctuation">.</span><span class="token function">src</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'./src/css/*.less'</span><span class="token punctuation">,</span> <span class="token string">'./src/css/*.css'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">// 将less语法转换为css语法</span>        <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span><span class="token function">less</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">// 将css代码进行压缩</span>        <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span><span class="token function">csso</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">// 将处理的结果进行输出</span>        <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span>gulp<span class="token punctuation">.</span><span class="token function">dest</span><span class="token punctuation">(</span><span class="token string">'dist/css'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token function">done</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// js任务</span><span class="token comment" spellcheck="true">//1. es6代码转换</span><span class="token comment" spellcheck="true">//2.代码压缩</span>gulp<span class="token punctuation">.</span><span class="token function">task</span><span class="token punctuation">(</span><span class="token string">'jsmin'</span><span class="token punctuation">,</span> done <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    gulp<span class="token punctuation">.</span><span class="token function">src</span><span class="token punctuation">(</span><span class="token string">'./src/js/*.js'</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span><span class="token function">babel</span><span class="token punctuation">(</span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//可以判断当前代码的运行环境 将代码转换为当前环境所支持的代码 转换es6</span>            presets<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'@babel/env'</span><span class="token punctuation">]</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">// 压缩</span>        <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span><span class="token function">uglify</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span>gulp<span class="token punctuation">.</span><span class="token function">dest</span><span class="token punctuation">(</span><span class="token string">'dist/js'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token function">done</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 复制文件夹</span>gulp<span class="token punctuation">.</span><span class="token function">task</span><span class="token punctuation">(</span><span class="token string">'copy'</span><span class="token punctuation">,</span> done <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    gulp<span class="token punctuation">.</span><span class="token function">src</span><span class="token punctuation">(</span><span class="token string">'./src/images/*'</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span>gulp<span class="token punctuation">.</span><span class="token function">dest</span><span class="token punctuation">(</span><span class="token string">'dist/images'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    gulp<span class="token punctuation">.</span><span class="token function">src</span><span class="token punctuation">(</span><span class="token string">'./src/lib/*'</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span>gulp<span class="token punctuation">.</span><span class="token function">dest</span><span class="token punctuation">(</span><span class="token string">'dist/lib'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token function">done</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//构建任务 gulp3的语法 </span><span class="token comment" spellcheck="true">// gulp.task('default', ['htmlmin', 'cssmin', 'jsmin', 'copy']) </span><span class="token comment" spellcheck="true">// gulp4的语法</span>gulp<span class="token punctuation">.</span><span class="token function">task</span><span class="token punctuation">(</span><span class="token string">'default'</span><span class="token punctuation">,</span> gulp<span class="token punctuation">.</span><span class="token function">series</span><span class="token punctuation">(</span><span class="token string">'htmlmin'</span><span class="token punctuation">,</span> <span class="token string">'cssmin'</span><span class="token punctuation">,</span> <span class="token string">'jsmin'</span><span class="token punctuation">,</span> <span class="token string">'copy'</span><span class="token punctuation">,</span> done <span class="token operator">=</span><span class="token operator">></span> <span class="token function">done</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>gulp执行某个任务时，在当前项目下打开dos窗口直接输入gulp + 任务名称即可执行</p><p><img src="/medias/loading.gif" data-original="https://gitee.com/aurorapic/BlogPic/raw/master/img/gulp-first.png" alt=""></p><p>gulp执行默认任务，即执行全部的任务，默认名为default，也可以不写。直接输入gulp回车即可。</p><p><img src="/medias/loading.gif" data-original="https://gitee.com/aurorapic/BlogPic/raw/master/img/gulp-task.png" alt=""></p><h3 id="package-json"><a href="#package-json" class="headerlink" title="package.json"></a>package.json</h3><p>通过观察，我们发现存放第三方包的文件夹node_modules里面有非常多的琐碎目录和文件（随着项目业务越来越复杂，里面的文件结构越多），我们在把项目发送给别人时传输速度会很慢。因此复杂的模块依赖关系需要被记录，确保模块的版本和当前版本保持一致，否则会导致当前项目运行报错。</p><p>package.json文件就是项目的描述文件，记录了当前文件的项目信息，如项目名称、版本、作者、github地址、当前项目依赖了那些第三方模块。因此不需要传输node_modules,只需要保证package.json文件的完整和正确，在项目中使用 <code>npm install</code> 就会直接安装原文件所依赖第三方模块。</p><p>1.我们可以通过npm init -y 来生成默认的package.json文件</p><p>2.有了package.json文件后（注意：在此之前安装的第三方包会被漏掉，所以我们在项目开始之前，一定要先初始化package.json文件，再来装第三方包），当我们再来安装第三方包时，就会被自动记录到package.json文件中</p><p>dependencies：记录的是生产依赖<br>devDependencies：记录的是开发依赖</p><p>项目依赖分为两类：<br>生产依赖：开发和生产环境都需要，被记录在pacakge.json文件的dependencies字段中，别人拿到我们项目代码时，如果只需要生产依赖，可以通过npm i –production来安装</p><p>开发依赖（包括生产依赖）：仅开发环境需要，被记录在pacakge.json文件的devDependencies字段中，用npm i一次性安装所有依赖</p><p><strong>package-lock.json文件的作用：</strong></p><p>1.锁定依赖包的版本，防止再次安装时版本与当时开发时不一致</p><p>2.加快下载速度，记录了依赖包的基本信息，如依赖关系、下载地址、版本信息等等，再次安装时省去了很多额外的加载操作<br>3.package.json中scripts字段用来配置命令的别名，可以使用npm run 命令别名来执行，当我们的命令过长时，这个配置别名很有用</p><p>参考文章：</p><p><a href="https://blog.csdn.net/weixin_44336981/article/details/104645074" target="_blank" rel="noopener">https://blog.csdn.net/weixin_44336981/article/details/104645074</a></p><p><a href="https://blog.csdn.net/JsongNeu/article/details/89284959" target="_blank" rel="noopener">https://blog.csdn.net/JsongNeu/article/details/89284959</a></p><p>相关链接：</p><p><a href="https://www.gulpjs.com.cn/" target="_blank" rel="noopener">https://www.gulpjs.com.cn/</a></p><p><a href="https://www.npmjs.com/" target="_blank" rel="noopener">https://www.npmjs.com/</a></p><p>测试代码地址：</p><p><a href="https://github.com/qlHuo/studyDemo/tree/master/gulpTest" target="_blank" rel="noopener">https://github.com/qlHuo/studyDemo/tree/master/gulpTest</a></p>]]></content>
      
      
      <categories>
          
          <category> 前端相关知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> gulp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端相关知识点的思考</title>
      <link href="/archives/bfb26056.html"/>
      <url>/archives/bfb26056.html</url>
      
        <content type="html"><![CDATA[<p>本文记录前端相关的知识点，复习使用和面试准备。<a id="more"></a></p><h3 id="定位"><a href="#定位" class="headerlink" title="定位"></a>定位</h3><h4 id="为什么是子绝父相？"><a href="#为什么是子绝父相？" class="headerlink" title="为什么是子绝父相？"></a>为什么是子绝父相？</h4><ol><li>relative 相对定位 <strong>会</strong>在标准流中占据位置</li><li>absolute 绝对定位 <strong>不会</strong> 在标准流中占据位置</li><li>绝对定位 是相对于距离它最近的父元素进行定位</li></ol><p>为什么子元素要绝对定位？</p><p>​    一些小图标，如轮播图里的小圆点或者是小三角，需要放在其他子元素的上面，虽然float 以及除了static之外的定位属性都可以利用z-index让盒子由于其他元素显示，但是absolute完全脱标且不占位置，更加方便进行显示效果。</p><p>为什么父元素要相对定位？</p><p>​    不管是relative/absolute/fixed，都可以让子元素找到定位点，但如果是absolute，在文档流中不占位置，下面的元素会跑上去；fixed会使元素相对于页面定位，也不可取。relative占位，下面的元素就不会移动到上面。</p><p>总之：把脱离文档流的元素放到不脱离文档流（需要占位）的元素之上，就用“子绝父相”</p><h3 id="外边距塌陷（折叠）"><a href="#外边距塌陷（折叠）" class="headerlink" title="外边距塌陷（折叠）"></a>外边距塌陷（折叠）</h3><h4 id="为什么会产生外边距塌陷（折叠）？"><a href="#为什么会产生外边距塌陷（折叠）？" class="headerlink" title="为什么会产生外边距塌陷（折叠）？"></a>为什么会产生外边距塌陷（折叠）？</h4><p>根据MDN：</p><p>当块级元素（block）的<a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/margin-top" target="_blank" rel="noopener">上外边距(margin-top)</a>和<a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/margin-bottom" target="_blank" rel="noopener">下外边距(margin-bottom)</a>同时都有设定时只会只会保留最大边距，这种行为称为<strong>边界折叠</strong>（margin collapsing），有时也翻译为<strong>外边距重叠</strong>。</p><h4 id="外边距折叠产生的情况与解决方法"><a href="#外边距折叠产生的情况与解决方法" class="headerlink" title="外边距折叠产生的情况与解决方法"></a>外边距折叠产生的情况与解决方法</h4><h5 id="块级父元素与其第一个-最后一个子元素"><a href="#块级父元素与其第一个-最后一个子元素" class="headerlink" title="块级父元素与其第一个/最后一个子元素"></a>块级父元素与其第一个/最后一个子元素</h5><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style language-css">             <span class="token selector">*</span><span class="token punctuation">{</span>                    <span class="token property">padding</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>                    <span class="token property">margin</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token selector"><span class="token id">#sec</span></span><span class="token punctuation">{</span>         <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">120</span>px<span class="token punctuation">;</span>                   <span class="token property">background</span><span class="token punctuation">:</span> <span class="token hexcode">#f00</span><span class="token punctuation">;</span>           <span class="token comment" spellcheck="true">/*border: 1px solid #ccc;            */</span>         <span class="token comment" spellcheck="true">/*overflow: hidden;  //创建了一个BFC，块级格式化上下文   */</span>    <span class="token punctuation">}</span>            <span class="token selector"><span class="token class">.child</span></span><span class="token punctuation">{</span>                    <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">100</span>px<span class="token punctuation">;</span>                    <span class="token property">margin-top</span><span class="token punctuation">:</span> <span class="token number">10</span>px<span class="token punctuation">;</span>                    <span class="token property">background</span><span class="token punctuation">:</span> yellow<span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">/* border: 1px solid blue; */</span>          <span class="token punctuation">}</span>    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>section</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sec<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>article</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>child<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>article</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>section</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这种情况是：子元素设置margin-top 为10px，父盒子和子元素的上边框合并到一起</p><pre><code>h1 {  margin: 0;  background: #cff;}#div1{    margin: 40px 0 25px 0;      background: #999;}#div2{    margin: 20px 0 10px 0;    background: #cff;}&lt;h1&gt;这是一个标题&lt;/h1&gt;&lt;div id=&quot;div1&quot;&gt;    &lt;div id=&quot;div2&quot; &gt;这是第一个块级盒子&lt;/div&gt;&lt;/div&gt;</code></pre><p>测试的结果是: h1与div2之间的margin值是40px而不是想象中的60px。</p><p>根据MDN：</p><p>如果块级父元素中，不存在上边框（border-top）、上内补（padding-top）、inline content、 清除浮动这四条属性(对于上边框和上内补，也可以说，当上边距及上内补宽度为0时),那么这个块级元素和其第一个子元素的上边距就会发生折叠。这个折叠之后的值在这里取的就是两者之间的最大值。</p><p>对于父子级块状元素解决外边距折叠的方法一般分为三大类</p><ul><li><p>给父级块级元素设置border-top，可以设置为：border-top:1px solid transparent</p></li><li><p>给父级块级元素设置一个padding-top,这个值就根据自己的布局来定吧。</p></li><li><p>最后一种方法，是给父级块级元素触发一个BFC(Block formatting contexts-块级格式上下文)。参考：<a href="https://juejin.im/post/5e60c2c7f265da574e22a1f5" target="_blank" rel="noopener">全面分析BFC</a></p><p>具体怎么触发BFC呢？一般触发BFC的条件包括：</p><ul><li>浮动元素：float除了none之外</li><li>用position绝对定位的元素，以及fixed固定定位的元素</li><li>display: inline-block等</li><li>overflow：除了visiable</li></ul></li></ul><h5 id="相邻的兄弟块级元素"><a href="#相邻的兄弟块级元素" class="headerlink" title="相邻的兄弟块级元素"></a>相邻的兄弟块级元素</h5><pre class="line-numbers language-html"><code class="language-html">div {    width:100px;    height:100px;    margin:40px;}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>div1<span class="token punctuation">"</span></span> <span class="token punctuation">></span></span>这是第一个块级盒子<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>div2<span class="token punctuation">"</span></span> <span class="token punctuation">></span></span>这是第二个块级盒子<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>测试的结果是两个div之间的边距是40px而不是80px。</p><p>对于兄弟级块状元素，解决的方法一般有两种：</p><ul><li>直接只写一边的margin例如都是margin-top或者都是margin-bottom，我觉得这是我用过最简单的方法了，直接就避免了塌陷。</li><li>给两个块状元素形成两个不同的BFC</li></ul><h5 id="空块元素"><a href="#空块元素" class="headerlink" title="空块元素"></a>空块元素</h5><pre class="line-numbers language-HTML"><code class="language-HTML">#div1,#div2 {    margin:0px;}#voidDiv {    margin-top:40px;    margin-bottom:40px;}<div id="div1" >这是第一个块级盒子</div><div id="voidDiv"></div><div id="div2" >这是第二个块级盒子</div><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>测试的结果是div1与div2之间的边距是40px而不是80px。</p><p>根据MDN，产生的原因就在于</p><blockquote><p>如果存在一个空的块级元素，其 border、padding、inline content、height、min-height都不存在，那么此时上下边距就会发生折叠</p></blockquote><p>对于空的块状元素，解决的方法列举以下几种：</p><ul><li>设置border</li><li>设置padding</li><li>设置inline-block等等方法都可</li></ul><h3 id="css背景图片铺满且禁止缩放"><a href="#css背景图片铺满且禁止缩放" class="headerlink" title="css背景图片铺满且禁止缩放"></a>css背景图片铺满且禁止缩放</h3><p>代码如下：</p><pre class="line-numbers language-css"><code class="language-css"><span class="token comment" spellcheck="true">/* html 和 body 都可以使用下面的代码，但是body可能会有些问题 */</span><span class="token selector">html </span><span class="token punctuation">{</span>    <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>    <span class="token property">top</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token property">left</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">100%</span><span class="token punctuation">;</span>    <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">100%</span><span class="token punctuation">;</span>    <span class="token property">background-image</span><span class="token punctuation">:</span> <span class="token url">url("bg.jpg")</span><span class="token punctuation">;</span>    <span class="token property">background-position</span><span class="token punctuation">:</span> center top<span class="token punctuation">;</span>    <span class="token property">background-repeat</span><span class="token punctuation">:</span> no-repeat<span class="token punctuation">;</span>    <span class="token property">background-attachment</span><span class="token punctuation">:</span> fixed<span class="token punctuation">;</span>    <span class="token property">background-size</span><span class="token punctuation">:</span> cover<span class="token punctuation">;</span>    <span class="token property">-webkit-background-size</span><span class="token punctuation">:</span> cover<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* 兼容Webkit内核浏览器如Chrome和Safari */</span>    <span class="token property">-o-background-size</span><span class="token punctuation">:</span> cover<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* 兼容Opera */</span>    <span class="token property">zoom</span><span class="token punctuation">:</span> -<span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="background-size属性值"><a href="#background-size属性值" class="headerlink" title="background-size属性值"></a>background-size属性值</h4><p>我们可以使用background-size指定背景图片的大小。</p><p>px:  指定图片的width，height</p><p>%：相对于父元素的宽高的百分比大小</p><p>auto：默认大小</p><p>cover:  按照原图的比例，扩展至足够大，是图片完全覆盖整个背景区域（可能造成部分图片不可见） </p><p>contain:  把图片扩展至最大尺寸（按原图比例放大），直至宽高完全适应内容区域（可能失真）</p><h4 id="background-attachment属性值"><a href="#background-attachment属性值" class="headerlink" title="background-attachment属性值"></a>background-attachment属性值</h4><p>scroll：默认值，背景图片相对于元素固定，背景对页面的滚动而滚动。即：背景和内容绑定</p><p>fixed： 背景图相对于视口固定，元素滚动背景不动。</p><p>local:    背景图片随着元素的滚动而动</p><p>参考：</p><p><a href="https://zhuanlan.zhihu.com/p/25876599" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/25876599</a></p><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/CSS_Box_Model/Mastering_margin_collapsing" target="_blank" rel="noopener">https://developer.mozilla.org/zh-CN/docs/Web/CSS/CSS_Box_Model/Mastering_margin_collapsing</a></p>]]></content>
      
      
      <categories>
          
          <category> 知识点 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>2020寒假总结</title>
      <link href="/archives/b71be232.html"/>
      <url>/archives/b71be232.html</url>
      
        <content type="html"><![CDATA[<p>今天是这个假期的最后一天，疫情还在继续，明天就要开始上网课了。简单的回顾一下这个假期吧。<a id="more"></a></p><h3 id="北京"><a href="#北京" class="headerlink" title="北京"></a>北京</h3><p>放假之后的几天路过北京，顺带转了转。北京是一直想去的一个城市吧，这次算是遂了心愿。第一天下了火车已经是10点多了，在我住的青年旅社的胡同口遇到一阿姨，听她的推荐去了八达岭长城，是跟着类似于旅游团去的，花了300多块钱，来回车费160+缆车140+买了一些吃的。enmmm，其实是不太喜欢这种的，在车上的时候有点被骗的感觉（后来想想也不能怪别人，主要是自己没有经验吧），但看着有一车子人，觉得也不会太那啥，内心也就平衡了下来。在车上的时候，才大概明白好像只有两个小时的游玩时间。然后下了车就开始去去爬长城了，晚上回去就感觉腿都软了。。。第二天去了紫禁城，从早上9点一直到下午4点闭馆的时候才出来，从北京回到家没几天故宫就被推到了风口浪尖，原因是一个女子在故宫开着大奔，还拍了照片上网上炫耀。想当年法国总统奥朗德参观故宫得步行，哎这事整的enmmm。。。第三天去了恭王府和颐和园，原本想去圆明园但是从颐和园出来之后就很晚了也没去，然后路过了中关村，嗯，想去看看是啥呢，结果在哪个美食城吃了个鸭血粉丝汤就回了，晚上在南锣鼓巷转了一圈吃了个大串面筋15元。。。。然后晚上好像是骑着共享单车回去的，我就在自行车道骑着，前面有一辆大货车在我这一侧横着，好像是在装什么东西，我看着他不走，我就想赶快骑着走过去，我刚走过去就听到一阵猛的刹车声，我回头看了一眼接着走了，现在想想还是心有余悸。。最后一天去了天安门广场，在毛主席纪念堂给这位伟人鞠了个躬，接着就在国家博物院转了大半天，仅仅是看完了一个复兴之路的展厅，走之前去看了那尊后母戊鼎，当时我学的时候它还叫司母戊鼎。。。从国家博物馆出来吃了个饭就下午了，天气也好就到故宫后面的景山上拍了好多照片，前几天我在整理相册的时候，删了好多。。。</p><p>这些地方很多都是心念念的地方，可是一到那里，反而也不过如此。就像故宫，我一直就觉得很神圣，可是当真正走在哪里，心里一直有个像要穷尽这座宫殿的念头，想要去理解我之前不曾理解的关于这座宫殿的某些东西，可是好像并没有得到什么，至多的，就像每一个到故宫的人都可以了解到的关于故宫的一些专属故事。有时候更多的是一种朦胧的感受吧。每个景点，人都很多，人们都在拿着各式各样的设备去记录现在正在经历的，我也是。不知道在北京四天拍了有多少张照片，反正我前几天删了一个多小时，大部分是没必要的，但总是想要拍出满意的照片，或许是仅仅想记录，或许是为了满足某种虚荣心。有些事情可能总是后知后觉，如果真想拍出满意的照片那就置办好设备专门到某个景区去拍，在每一处都有见到过一些人（主要是老爷子）拿着照相机在拍，只是在纯粹的拍，也是一种享受吧；而如果只是作为游客来参观，那还是尽量好好想感受此刻的感受吧。北京，细想这个名字，不禁让人感到肃穆。在北京的几天中，越来越感觉它是严肃的，天安门附近到处是巡警，在紫禁城里也有时感觉到某种寒意，不能细想。如果以后要在这个城市生活会怎样呢？不敢细想。</p><h3 id="疫情"><a href="#疫情" class="headerlink" title="疫情"></a>疫情</h3><p>这还要从一只蝙蝠说起。。。关于疫情，确实很严重传播速度极快，就在我们国家有好转的趋势的时候，国外又发生了不应该是意外的意外。韩国日本意大利确诊人数急剧上升，美国那么多流感患者不知道是不是仅仅是流感。。之前喊着“武汉加油，中国加油”，现在要喊“世界加油，人类加油”了，那些民主国家的政府在关键的时候究竟能怎样保护他们的人民，希望他们有能力保护好。</p><p>疫情对我的影响，可能算不上影响，仅仅是没办法提前去学校。在家里也还好，最起码有所学习，有所收获。</p><h3 id="读书"><a href="#读书" class="headerlink" title="读书"></a>读书</h3><p>从1月1日开始到现在，我已经读了6本书了，从学校要求的读书打卡活动开始之后读了5本。第一本是傅高义的《邓小平时代》，读了一个月，一开始觉得书中有些观点有失偏颇，但是总体来讲这本书的还是一本好书，更加深刻了解邓小平及改革开放初期的一些事件，相比于以前的知识和理解更加深刻。然后读书打卡的第一本书是吴晓波的《腾讯传》，语言文字很流畅，思路很清晰，对于腾讯的成长和发展介绍的挺清楚的，对于我来说让我更全面的了解腾讯。但我看到有些书友说，对一些腾讯不好的事情，作者淡化了，可能是吧。信息时代刚发展20多年就就有如此巨大的威力，从移动端的兴起到现在不过十年左右的时间就渗透到我们生活的边边角角，我们也正因有了像bat这样的大型的互联网公司才使我们日常使用这些互联网工具更加便捷和安全，主要是安全。另外，还读了丰子恺先生的《万般生活，都是滋味》，每一篇文章读起来都很美妙并且富有哲理，而且插图也很好看，很是向往那种生活，但现在仅是向往而已。那本《一个叫欧维的男人决定去死》是我感觉这几年开看的最好的一本，名著，我可能是太久没有看过好书了。可能主要是关于爱情的吧，真希望拥有想欧维和索雅那样的爱情。昨天开始看的《30岁前的每一天》，也还是很好的，它首先让我想想我的梦想是什么，之前有门课，老师也谈到过这个问题，当时也确实搜索不到我的梦想，就想着下课想，结果没想，或是想了也忘了。这两天我想了之后，发现我的“梦想”是很现实的，就是挣钱，多挣钱，我以前多么不齿啊，可是慢慢的发现没有钱不行，而我现在的所有的方向目标就是它，那就是它了。多少钱是多啊？1000万？30岁之前？1000万30岁之前。</p><h3 id="学习"><a href="#学习" class="headerlink" title="学习"></a>学习</h3><p>这个假期确实比之前强，最起码踏踏实实学了。学了移动端的布局，四种原来好像没有学过，这次给补上了，主要这个假期看了小程序的东西，掌握的可能不是很好但基本的都有了解。最近看到好多关于找实习的，字节跳动，百度腾讯也有还看到了几篇关于大三面试实习的文章，但是看到他们写的面试经历，我发现该我就知道布局方面的，js相关的就不会了，之前学的都忘记了，开学还得补啊。到现在也没什么退路可有了，一心一意搞前端，学好js。多敲多练，1万小时理论。争取在暑假之前，把前端相关的知识学个遍，然后js主要。</p><h3 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h3><p>除了上面说的这个假期，做菜的手艺有些长进，这是真的。还有辅导小妹学习，虽然有事很气也占用时间，也算一项任务吧。。。六级又没过，不得不承认的是之前确实没有认真学习英语，本来就是抱着侥幸的心理考试的，这学期争取给过了吧！和读书打卡活动一起的我还想做点运动，每天在家院子里走半个小时，然后再在keep上连一些动作，只坚持了半个多月。哦，还有啊，玩斗地主，哎，这两天手气不那么好了，又输了好多，不过还有好多，也还好。玩斗地主的过程中呢，很容易被游戏牵着走，就是那个好胜心啊。可能还有一种赢豆的快感吧，之前都是三人斗地主，现在出了个四人的，可以和队友配合然后，赢欢乐豆，一赢一大把，炸弹比较多比较刺激。。。但是很不好的是啥，我记得有一天我竟然玩了三个多小时，主要是那天运气不太好，总是输赢也赢的不多，就很不爽就一直玩，时间就白白的浪费在游戏上了。大多数情况下还是能够把持住的，偶尔会着魔吧。还好，开学之后就不再玩太多了。还有，这个假期看了345季的爱情公寓，看了有十几部电影吧，都是很不错的，也算是多多少少开阔了眼界吧。</p><p>废话那么多，竟然发现慢慢的可以写好东西，最起码通顺吧，不知道是不是看书的缘故，但是看书总没坏处。总之，这个假期过得自我感觉还是很有意义，很充实。开学之后，应该专心于专业知识，时间不多了，不应太分散注意力，多敲代码。学好英语。</p><p>最后希望疫情能尽快结束，早日返校！</p>]]></content>
      
      
      <categories>
          
          <category> 生活随笔 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>微信小程序格式化日期</title>
      <link href="/archives/f2a86d85.html"/>
      <url>/archives/f2a86d85.html</url>
      
        <content type="html"><![CDATA[<h3 id="wxml里的格式化日期"><a href="#wxml里的格式化日期" class="headerlink" title="wxml里的格式化日期"></a>wxml里的格式化日期</h3><p>新建一个filter.wxs 文件，放到utils文件夹下。<a id="more"></a></p><pre class="line-numbers language-wxs"><code class="language-wxs">    //日期格式化-------------------------------------------------------------var formatTime = function (strDate, format = "yyyy-MM-dd hh:mm:ss") {  // 解决ios出现NaN问题  var realDate = strDate ? getDate(strDate.replace(getRegExp('-', 'g'), '/')) : getDate();  var regYear = getRegExp("(y+)", "i");  var date = [    ["M+", realDate.getMonth() + 1],    ["d+", realDate.getDate()],    ["h+", realDate.getHours()],    ["m+", realDate.getMinutes()],    ["s+", realDate.getSeconds()],    ["q+", Math.floor((realDate.getMonth() + 3) / 3)],    ["S+", realDate.getMilliseconds()],  ];  var reg1 = regYear.exec(format);  if (reg1) {    format = format.replace(reg1[1], (realDate.getFullYear() + '').substring(4 - reg1[1].length));  }  for (var i = 0; i < date.length; i++) {    var reg2 = getRegExp("(" + date[i][0] + ")").exec(format);    if (reg2) {      format = format.replace(reg2[1], reg2[1].length == 1 ? v : ("00" + date[i][1]).substring(("" + date[i][1]).length));    }  }  return format;}module.exports = {  formatTime: formatTime,//日期格式化}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>wxml 里面这么使用</p><pre class="line-numbers language-wxml"><code class="language-wxml">    引入：<wxs module="filter" src="/utils/filter.wxs"></wxs>使用：<text class='valid-text'>有效期：{{filter.formatTime(data.startTime, 'yyyy-MM-dd')}}</text><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="js的格式化日期代码"><a href="#js的格式化日期代码" class="headerlink" title="js的格式化日期代码"></a>js的格式化日期代码</h3><p>在小程序自己提供的utils工具中，有一个日期格式化的函数。<br>先在js文件中导入var util = require(‘../../utils/util.js’)，然后使用util.formatTime(new Date)格式化日期。<br><strong>utils.js</strong></p><pre class="line-numbers language-javascript"><code class="language-javascript">    <span class="token keyword">const</span> formatTime <span class="token operator">=</span> date <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> year <span class="token operator">=</span> date<span class="token punctuation">.</span><span class="token function">getFullYear</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token keyword">const</span> month <span class="token operator">=</span> date<span class="token punctuation">.</span><span class="token function">getMonth</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span>  <span class="token keyword">const</span> day <span class="token operator">=</span> date<span class="token punctuation">.</span><span class="token function">getDate</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token keyword">const</span> hour <span class="token operator">=</span> date<span class="token punctuation">.</span><span class="token function">getHours</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token keyword">const</span> minute <span class="token operator">=</span> date<span class="token punctuation">.</span><span class="token function">getMinutes</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token keyword">const</span> second <span class="token operator">=</span> date<span class="token punctuation">.</span><span class="token function">getSeconds</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token keyword">return</span> <span class="token punctuation">[</span>year<span class="token punctuation">,</span> month<span class="token punctuation">,</span> day<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>formatNumber<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">' '</span> <span class="token operator">+</span> <span class="token punctuation">[</span>hour<span class="token punctuation">,</span> minute<span class="token punctuation">,</span> second<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>formatNumber<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">':'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">const</span> formatNumber <span class="token operator">=</span> n <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  n <span class="token operator">=</span> n<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token keyword">return</span> n<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">?</span> n <span class="token punctuation">:</span> <span class="token string">'0'</span> <span class="token operator">+</span> n<span class="token punctuation">}</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>  formatTime<span class="token punctuation">:</span> formatTime<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>需要格式化日期的js</strong></p><pre class="line-numbers language-javascript"><code class="language-javascript"> <span class="token comment" spellcheck="true">// 在需要使用的js文件中，导入js  </span><span class="token keyword">var</span> util <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'../../utils/util.js'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">Page</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    data<span class="token punctuation">:</span> <span class="token punctuation">{</span>    time<span class="token punctuation">:</span>util<span class="token punctuation">.</span><span class="token function">formatTime</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>    onLoad<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 调用函数时，传入new Date()参数，返回值是日期和时间  </span>    <span class="token keyword">var</span> time <span class="token operator">=</span> util<span class="token punctuation">.</span><span class="token function">formatTime</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// 再通过setData更改Page()里面的data，动态更新页面的数据  </span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setData</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        time<span class="token punctuation">:</span> time      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="小程序自定义格式化时间戳函数"><a href="#小程序自定义格式化时间戳函数" class="headerlink" title="小程序自定义格式化时间戳函数"></a>小程序自定义格式化时间戳函数</h3><pre class="line-numbers language-javascript"><code class="language-javascript">    formatTime <span class="token punctuation">(</span>time<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> formatNumber <span class="token operator">=</span> n <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    n <span class="token operator">=</span> n<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> n<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">?</span> n <span class="token punctuation">:</span> <span class="token string">'0'</span> <span class="token operator">+</span> n    <span class="token punctuation">}</span>    <span class="token keyword">let</span> date <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span>time<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> year <span class="token operator">=</span> date<span class="token punctuation">.</span><span class="token function">getFullYear</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">const</span> month <span class="token operator">=</span> date<span class="token punctuation">.</span><span class="token function">getMonth</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span>    <span class="token keyword">const</span> day <span class="token operator">=</span> date<span class="token punctuation">.</span><span class="token function">getDate</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token punctuation">[</span>year<span class="token punctuation">,</span> month<span class="token punctuation">,</span> day<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>formatNumber<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">'.'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>参考文章：<a href="https://blog.csdn.net/weixin_40292626/article/details/79668543" target="_blank" rel="noopener">https://blog.csdn.net/weixin_40292626/article/details/79668543</a><br><a href="https://blog.csdn.net/ZHFDBK/article/details/98882526" target="_blank" rel="noopener">https://blog.csdn.net/ZHFDBK/article/details/98882526</a><br><a href="https://blog.csdn.net/liukai6/article/details/80844171" target="_blank" rel="noopener">https://blog.csdn.net/liukai6/article/details/80844171</a></p>]]></content>
      
      
      <categories>
          
          <category> 小程序 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>移动端基础知识</title>
      <link href="/archives/48740f33.html"/>
      <url>/archives/48740f33.html</url>
      
        <content type="html"><![CDATA[<h2 id="移动端基础知识"><a href="#移动端基础知识" class="headerlink" title="移动端基础知识"></a>移动端基础知识</h2><p>当前，国内常见的移动端浏览器都是根据webkit修改过来的内核，因此在兼容移动端主流浏览时，处理webkit内核浏览器即可。<a id="more"></a></p><h3 id="1视口"><a href="#1视口" class="headerlink" title="1视口"></a>1视口</h3><p>视口（viewport）就是浏览器显示页面的屏幕区域。视口可分布局视口、视觉视口和理想视口。</p><h4 id="1-1布局视口layout-viewport"><a href="#1-1布局视口layout-viewport" class="headerlink" title="1.1布局视口layout viewport"></a>1.1布局视口layout viewport</h4><p>一般移动设备的浏览器都默认设置了一个布局视口，用于解决早期的PC端页面在手机上显示的问题。</p><p>iOS, Android基本都将这个视口分辨率设置为 980px，所以PC上的网页大多都能在手机上呈现，只不过元素看上去很小，一般默认可以通过<strong>手动缩放网页</strong>。</p><h4 id="1-2视觉视口-visual-viewport"><a href="#1-2视觉视口-visual-viewport" class="headerlink" title="1.2视觉视口 visual viewport"></a>1.2视觉视口 visual viewport</h4><p>字面意思，它是用户正在看到的网站的区域。注意：是网站的区域。</p><p>我们可以通过缩放去操作视觉视口，但不会影响布局视口，布局视口仍保持原来的宽度。</p><h4 id="1-3理想视口-idealviewport"><a href="#1-3理想视口-idealviewport" class="headerlink" title="1.3理想视口 idealviewport"></a>1.3理想视口 idealviewport</h4><p>为了使网站在移动端有最理想的浏览和阅读宽度而设定理想视口，对设备来讲，是最理想的视口尺寸。</p><p>需要手动添加meta视口标签通知浏览器操作。meta视口标签的主要目的是：布局视口的宽度应该与理想视口的宽度一致，简单来说就是设备有多宽，布局视口就有多宽。</p><p>开发最终会使用理想视口，而理想视口就是将布局视口的宽度修改为视觉视口。</p><h4 id="1-4-meta标签"><a href="#1-4-meta标签" class="headerlink" title="1.4 meta标签"></a>1.4 meta标签</h4><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>width<span class="token punctuation">=</span>device-width,user-scalable<span class="token punctuation">=</span>no,initial-scale<span class="token punctuation">=</span>1.0,maximum-scale<span class="token punctuation">=</span>1.0,minimum-scale<span class="token punctuation">=</span>1.0<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>width: 宽度设置的是viewport宽度，可以设置device-width特殊值initial-scale: 初始缩放比，大于0 的数字，一般为1.0；maximum-scale:最大缩放比，大于0 的数字，一般1.0；minimum-scale:最小缩放比，大于0 的数字，一般1.0；user-scale：用户是否可以缩放，yes或no(1或0)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>最标准的viewport设置：</p><ol><li>视口宽度和设备保持一致</li><li>视口的默认缩放比例1.0</li><li>不允许用户自行缩放</li><li>最大允许的缩放比例为1.0</li><li>最小允许的缩放比例为1.0</li></ol><h3 id="2-二倍图"><a href="#2-二倍图" class="headerlink" title="2 二倍图"></a>2 二倍图</h3><h4 id="物理像素"><a href="#物理像素" class="headerlink" title="物理像素"></a>物理像素</h4><p><strong>物理像素</strong>点指的是屏幕显示的最小颗粒，是物理真实存在的。这是厂商在出厂时就设置好了,比如苹果6 是  750* 1334</p><p>一个px的能显示的物理像素点的个数，称为<strong>物理像素比或屏幕像素比</strong></p><p><strong>Retina（视网膜屏幕）</strong>是一种显示技术，可以将把更多的物理像素点压缩至一块屏幕里，从而达到更高的分辨率，并提高屏幕显示的细腻程度。</p><p>在标准的viewport设置中，使用<strong>倍图</strong>来提高图片质量，解决在高清设备中的模糊问题。通常使用二倍图</p><h4 id="背景缩放background-size"><a href="#背景缩放background-size" class="headerlink" title="背景缩放background-size"></a>背景缩放background-size</h4><p>background-size 属性规定背景图像的尺寸</p><pre><code>background-size:  背景图片宽度 背景图片高度;</code></pre><p>属性值：长度|百分比|cover|contain;</p><p>cover把背景图像扩展至足够大，以使背景图像完全覆盖背景区域。</p><p>contain把图像图像扩展至最大尺寸，以使其宽度和高度完全适应内容区域</p><h3 id="3-移动开发选择和技术解决方案"><a href="#3-移动开发选择和技术解决方案" class="headerlink" title="3 移动开发选择和技术解决方案"></a>3 移动开发选择和技术解决方案</h3><h4 id="3-1移动端主流方案"><a href="#3-1移动端主流方案" class="headerlink" title="3.1移动端主流方案"></a>3.1移动端主流方案</h4><p>1.单独制作移动端页面（主流）</p><p>通常情况下，网址域名前面加 m(mobile) 可以打开移动端。通过判断设备，如果是移动设备打开，则跳到移动端页面。  </p><p>也就是说，PC端和移动端为两套网站，pc端是pc断的样式，移动端在写一套，专门针对移动端适配的一套网站.</p><p>2.响应式页面兼容移动端（其次）</p><h4 id="3-2-移动端技术解决方案"><a href="#3-2-移动端技术解决方案" class="headerlink" title="3.2 移动端技术解决方案"></a>3.2 移动端技术解决方案</h4><p>1.移动端浏览器兼容问题</p><p>移动端浏览器基本以 webkit 内核为主，因此我们就考虑webkit兼容性问题。我们可以放心使用 H5 标签和 CSS3 样式。同时我们浏览器的私有前缀我们只需要考虑添加 webkit 即可</p><p>2.移动端公共样式</p><p>移动端 CSS 初始化推荐使用 normalize.css/</p><p>Normalize.css：保护了有价值的默认值</p><p>Normalize.css：修复了浏览器的bug</p><p>Normalize.css：是模块化的</p><p>Normalize.css：拥有详细的文档</p><p>官网地址： <a href="http://necolas.github.io/normalize.css/" target="_blank" rel="noopener">http://necolas.github.io/normalize.css/</a></p><h4 id="3-3-移动端大量使用-CSS3盒子模型box-sizing"><a href="#3-3-移动端大量使用-CSS3盒子模型box-sizing" class="headerlink" title="3.3 移动端大量使用 CSS3盒子模型box-sizing"></a>3.3 移动端大量使用 CSS3盒子模型box-sizing</h4><p>传统模式宽度计算：盒子的宽度 = CSS中设置的width + border + padding </p><p>CSS3盒子模型：     盒子的宽度=  CSS中设置的宽度width 里面包含了 border 和 padding </p><p>也就是说，我们的CSS3中的盒子模型， padding 和 border 不会撑大盒子了</p><pre class="line-numbers language-css"><code class="language-css"><span class="token comment" spellcheck="true">/*CSS3盒子模型*/</span><span class="token property">box-sizing</span><span class="token punctuation">:</span> border-box<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*传统盒子模型*/</span><span class="token property">box-sizing</span><span class="token punctuation">:</span> content-box<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>移动端可以全部使用CSS3 盒子模型</p><p>PC端如果完全需要兼容，就用传统模式，如果不考虑兼容性，就选择 CSS3 盒子模型</p><h4 id="3-4移动端特殊样式"><a href="#3-4移动端特殊样式" class="headerlink" title="3.4移动端特殊样式"></a>3.4移动端特殊样式</h4><pre class="line-numbers language-css"><code class="language-css">    <span class="token comment" spellcheck="true">/*CSS3盒子模型*/</span>    <span class="token property">box-sizing</span><span class="token punctuation">:</span> border-box<span class="token punctuation">;</span>    <span class="token property">-webkit-box-sizing</span><span class="token punctuation">:</span> border-box<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/*点击高亮我们需要清除清除  设置为transparent 完成透明*/</span>    <span class="token property">-webkit-tap-highlight-color</span><span class="token punctuation">:</span> transparent<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/*在移动端浏览器默认的外观在iOS上加上这个属性才能给按钮和输入框自定义样式*/</span>    <span class="token property">-webkit-appearance</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/*禁用长按页面时的弹出菜单*/</span>    <span class="token selector">img,a </span><span class="token punctuation">{</span> <span class="token property">-webkit-touch-callout</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 移动web </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>移动web开发布局</title>
      <link href="/archives/fc8d666d.html"/>
      <url>/archives/fc8d666d.html</url>
      
        <content type="html"><![CDATA[<h2 id="移动web开发布局"><a href="#移动web开发布局" class="headerlink" title="移动web开发布局"></a>移动web开发布局</h2><p>移动端布局主要分为四类：流式布局（百分比布局），flex布局（伸缩布局），rem适配布局，响应式布局。<a id="more"></a></p><h3 id="移动端基础知识"><a href="#移动端基础知识" class="headerlink" title="移动端基础知识"></a>移动端基础知识</h3><p>当前，国内常见的移动端浏览器都是根据webkit修改过来的内核，因此在兼容移动端主流浏览时，处理webkit内核浏览器即可。<!-- more --></p><h4 id="视口"><a href="#视口" class="headerlink" title="视口"></a>视口</h4><p>视口（viewport）就是浏览器显示页面的屏幕区域。视口可分布局视口、视觉视口和理想视口。</p><h5 id="布局视口layout-viewport"><a href="#布局视口layout-viewport" class="headerlink" title="布局视口layout viewport"></a>布局视口layout viewport</h5><p>一般移动设备的浏览器都默认设置了一个布局视口，用于解决早期的PC端页面在手机上显示的问题。</p><p>iOS, Android基本都将这个视口分辨率设置为 980px，所以PC上的网页大多都能在手机上呈现，只不过元素看上去很小，一般默认可以通过<strong>手动缩放网页</strong>。</p><h5 id="视觉视口-visual-viewport"><a href="#视觉视口-visual-viewport" class="headerlink" title="视觉视口 visual viewport"></a>视觉视口 visual viewport</h5><p>字面意思，它是用户正在看到的网站的区域。注意：是网站的区域。</p><p>我们可以通过缩放去操作视觉视口，但不会影响布局视口，布局视口仍保持原来的宽度。</p><h5 id="理想视口-idealviewport"><a href="#理想视口-idealviewport" class="headerlink" title="理想视口 idealviewport"></a>理想视口 idealviewport</h5><p>为了使网站在移动端有最理想的浏览和阅读宽度而设定理想视口，对设备来讲，是最理想的视口尺寸。</p><p>需要手动添加meta视口标签通知浏览器操作。meta视口标签的主要目的是：布局视口的宽度应该与理想视口的宽度一致，简单来说就是设备有多宽，布局视口就有多宽。</p><p>开发最终会使用理想视口，而理想视口就是将布局视口的宽度修改为视觉视口。</p><h5 id="meta标签"><a href="#meta标签" class="headerlink" title="meta标签"></a>meta标签</h5><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>width<span class="token punctuation">=</span>device-width,user-scalable<span class="token punctuation">=</span>no,initial-scale<span class="token punctuation">=</span>1.0,maximum-scale<span class="token punctuation">=</span>1.0,minimum-scale<span class="token punctuation">=</span>1.0<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>width: 宽度设置的是viewport宽度，可以设置device-width特殊值initial-scale: 初始缩放比，大于0 的数字，一般为1.0；maximum-scale:最大缩放比，大于0 的数字，一般1.0；minimum-scale:最小缩放比，大于0 的数字，一般1.0；user-scale：用户是否可以缩放，yes或no(1或0)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>最标准的viewport设置：</p><ol><li>视口宽度和设备保持一致</li><li>视口的默认缩放比例1.0</li><li>不允许用户自行缩放</li><li>最大允许的缩放比例为1.0</li><li>最小允许的缩放比例为1.0</li></ol><h4 id="二倍图"><a href="#二倍图" class="headerlink" title="二倍图"></a>二倍图</h4><h5 id="物理像素"><a href="#物理像素" class="headerlink" title="物理像素"></a>物理像素</h5><p><strong>物理像素</strong>点指的是屏幕显示的最小颗粒，是物理真实存在的。这是厂商在出厂时就设置好了,比如苹果6 是  750* 1334</p><p>一个px的能显示的物理像素点的个数，称为<strong>物理像素比或屏幕像素比</strong></p><p><strong>Retina（视网膜屏幕）</strong>是一种显示技术，可以将把更多的物理像素点压缩至一块屏幕里，从而达到更高的分辨率，并提高屏幕显示的细腻程度。</p><p>在标准的viewport设置中，使用<strong>倍图</strong>来提高图片质量，解决在高清设备中的模糊问题。通常使用二倍图</p><h5 id="背景缩放background-size"><a href="#背景缩放background-size" class="headerlink" title="背景缩放background-size"></a>背景缩放background-size</h5><p>background-size 属性规定背景图像的尺寸</p><pre><code>background-size:  背景图片宽度 背景图片高度;</code></pre><p>属性值：长度|百分比|cover|contain;</p><p>cover把背景图像扩展至足够大，以使背景图像完全覆盖背景区域。</p><p>contain把图像图像扩展至最大尺寸，以使其宽度和高度完全适应内容区域</p><h4 id="移动开发选择和技术解决方案"><a href="#移动开发选择和技术解决方案" class="headerlink" title="移动开发选择和技术解决方案"></a>移动开发选择和技术解决方案</h4><h5 id="移动端主流方案"><a href="#移动端主流方案" class="headerlink" title="移动端主流方案"></a>移动端主流方案</h5><p>1.单独制作移动端页面（主流）</p><p>通常情况下，网址域名前面加 m(mobile) 可以打开移动端。通过判断设备，如果是移动设备打开，则跳到移动端页面。  </p><p>也就是说，PC端和移动端为两套网站，pc端是pc断的样式，移动端在写一套，专门针对移动端适配的一套网站.</p><p>2.响应式页面兼容移动端（其次）</p><h5 id="移动端技术解决方案"><a href="#移动端技术解决方案" class="headerlink" title="移动端技术解决方案"></a>移动端技术解决方案</h5><p>1.移动端浏览器兼容问题</p><p>移动端浏览器基本以 webkit 内核为主，因此我们就考虑webkit兼容性问题。我们可以放心使用 H5 标签和 CSS3 样式。同时我们浏览器的私有前缀我们只需要考虑添加 webkit 即可</p><p>2.移动端公共样式</p><p>移动端 CSS 初始化推荐使用 normalize.css/</p><p>Normalize.css：保护了有价值的默认值</p><p>Normalize.css：修复了浏览器的bug</p><p>Normalize.css：是模块化的</p><p>Normalize.css：拥有详细的文档</p><p>官网地址： <a href="http://necolas.github.io/normalize.css/" target="_blank" rel="noopener">http://necolas.github.io/normalize.css/</a></p><h5 id="移动端大量使用-CSS3盒子模型box-sizing"><a href="#移动端大量使用-CSS3盒子模型box-sizing" class="headerlink" title="移动端大量使用 CSS3盒子模型box-sizing"></a>移动端大量使用 CSS3盒子模型box-sizing</h5><p>传统模式宽度计算：盒子的宽度 = CSS中设置的width + border + padding </p><p>CSS3盒子模型：     盒子的宽度=  CSS中设置的宽度width 里面包含了 border 和 padding </p><p>也就是说，我们的CSS3中的盒子模型， padding 和 border 不会撑大盒子了</p><pre class="line-numbers language-css"><code class="language-css"><span class="token comment" spellcheck="true">/*CSS3盒子模型*/</span><span class="token property">box-sizing</span><span class="token punctuation">:</span> border-box<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*传统盒子模型*/</span><span class="token property">box-sizing</span><span class="token punctuation">:</span> content-box<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>移动端可以全部使用CSS3 盒子模型</p><p>PC端如果完全需要兼容，就用传统模式，如果不考虑兼容性，就选择 CSS3 盒子模型</p><h5 id="移动端特殊样式"><a href="#移动端特殊样式" class="headerlink" title="移动端特殊样式"></a>移动端特殊样式</h5><pre class="line-numbers language-css"><code class="language-css">    <span class="token comment" spellcheck="true">/*CSS3盒子模型*/</span>    <span class="token property">box-sizing</span><span class="token punctuation">:</span> border-box<span class="token punctuation">;</span>    <span class="token property">-webkit-box-sizing</span><span class="token punctuation">:</span> border-box<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/*点击高亮我们需要清除清除  设置为transparent 完成透明*/</span>    <span class="token property">-webkit-tap-highlight-color</span><span class="token punctuation">:</span> transparent<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/*在移动端浏览器默认的外观在iOS上加上这个属性才能给按钮和输入框自定义样式*/</span>    <span class="token property">-webkit-appearance</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/*禁用长按页面时的弹出菜单*/</span>    <span class="token selector">img,a </span><span class="token punctuation">{</span> <span class="token property">-webkit-touch-callout</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="设置视口标签及初始化样式"><a href="#设置视口标签及初始化样式" class="headerlink" title="设置视口标签及初始化样式"></a>设置视口标签及初始化样式</h4><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>width<span class="token punctuation">=</span>device-width, user-scalable<span class="token punctuation">=</span>no,initial-scale<span class="token punctuation">=</span>1.0, maximum-scale<span class="token punctuation">=</span>1.0, minimum-scale<span class="token punctuation">=</span>1.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>css/normalize.css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>css/index.css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>常用初始化样式</p><pre class="line-numbers language-css"><code class="language-css"><span class="token selector">body </span><span class="token punctuation">{</span>  <span class="token property">max-width</span><span class="token punctuation">:</span> <span class="token number">540</span>px<span class="token punctuation">;</span>  <span class="token property">min-width</span><span class="token punctuation">:</span> <span class="token number">320</span>px<span class="token punctuation">;</span>  <span class="token property">margin</span><span class="token punctuation">:</span> <span class="token number">0</span> auto<span class="token punctuation">;</span>  <span class="token property">font</span><span class="token punctuation">:</span> normal <span class="token number">14</span>px/<span class="token number">1.5</span> Tahoma,<span class="token string">"Lucida Grande"</span>,Verdana,<span class="token string">"Microsoft Yahei"</span>,STXihei,hei<span class="token punctuation">;</span>  <span class="token property">color</span><span class="token punctuation">:</span> <span class="token hexcode">#000</span><span class="token punctuation">;</span>  <span class="token property">background</span><span class="token punctuation">:</span> <span class="token hexcode">#f2f2f2</span><span class="token punctuation">;</span>  <span class="token property">overflow-x</span><span class="token punctuation">:</span> hidden<span class="token punctuation">;</span>  <span class="token property">-webkit-tap-highlight-color</span><span class="token punctuation">:</span> transparent<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="流式布局"><a href="#流式布局" class="headerlink" title="流式布局"></a>流式布局</h3><p>流式布局，就是百分比布局，也称非固定像素布局。通过盒子的宽度设置成百分比来根据屏幕的宽度来进行伸缩，不受固定像素的限制，内容向两侧填充。</p><p>网页中主要的划分区域的尺寸使用 <strong>百分数</strong>（搭配min-width, max-width 属性使用），例如，设置网页的主题宽度为80%，min-width为960px。图片也做类似处理（width：100%， max-width 一般设置为图片本身的尺寸，防止被拉伸而失真）。</p><h4 id="布局特点"><a href="#布局特点" class="headerlink" title="布局特点"></a>布局特点</h4><p>屏幕分辨了变化时，页面里元素的大小会变化但布局不会改变。<strong>【如果屏幕太大或者太小都会导致元素无法正常显示】</strong></p><h4 id="设计方法"><a href="#设计方法" class="headerlink" title="设计方法"></a>设计方法</h4><p>使用%百分比定义宽度，高度大都是用px来固定住，可以根据可视区域（viewport）和父元素的实时尺寸进行调整，尽可能的适应各种分辨率。往往配合max-width 和 min-width等属性控制尺寸流动范围以免过大或者过小影响阅读。</p><h4 id="主要缺点"><a href="#主要缺点" class="headerlink" title="主要缺点"></a>主要缺点</h4><p>这种布局方式在Web前端开发的早期历史上，用来应对不同尺寸的PC屏幕（那时屏幕尺寸的差异不会太大），在当今的移动端开发也是常用布局方式，但是<strong>缺点明显：</strong></p><ol><li>如果屏幕尺寸过大或过小，原始设计不能够正常显示。</li><li>宽度使用百分比定义，但是高度和文字大小使用px来固定无法实现高度上的流式效果，显示效果会不够协调。</li></ol><h3 id="felx布局（伸缩布局）"><a href="#felx布局（伸缩布局）" class="headerlink" title="felx布局（伸缩布局）"></a>felx布局（伸缩布局）</h3><h4 id="flex布局简述"><a href="#flex布局简述" class="headerlink" title="flex布局简述"></a>flex布局简述</h4><p>felx是flexible Box的缩写，意为“弹性布局”，用来为盒状模型提供最大的灵活性，任何一个容器都可以指定为felx布局。felx布局操作方便，布局极其简单，移动端使用比较广泛，PC端浏览器支持情况差，IE11或更低版不支持flex或仅部分支持。</p><p><strong>flex布局原理</strong></p><ul><li>当父盒子设置为flex布局之后，子元素的float，clear和vertical-align属性将失效。</li><li>采用flex布局的元素，称为felx容器（flex container），简称“容器”，它的所有的子元素自动称为容器成员，称为flex项目（flex item），简称“项目”。</li></ul><p>总结</p><p><strong>总结</strong>：就是通过给父盒子添加flex属性，来控制子盒子的位置和排列方式。</p><h4 id="flex布局父项常见属性"><a href="#flex布局父项常见属性" class="headerlink" title="flex布局父项常见属性"></a>flex布局父项常见属性</h4><ol><li>flex-direction：设置主轴的方向</li><li>justify-content：设置主轴上的子元素排列方式</li><li>flex-wrap：设置子元素是否换行</li><li>align-content：设置侧轴上的子元素的排列方式（多行）</li><li>align-items：设置侧轴上的子元素排列方式（单行）</li><li>flex-flow：复合属性，相当于同时设置了felx-direction和flex-wrap</li></ol><h5 id="flex-direction-主轴方向"><a href="#flex-direction-主轴方向" class="headerlink" title="flex-direction 主轴方向"></a>flex-direction 主轴方向</h5><ul><li>在flex 布局中，是分为主轴和侧轴两个方向，同样的叫法有：行和列， x轴和y轴</li><li>默认主轴方向就是x轴方向，水平向右</li><li>默认侧轴方向就是y轴方向，水平向下</li></ul><p><img src="/medias/loading.gif" data-original="https://gitee.com/aurorapic/BlogPic/raw/master/img/flex-direction.png" alt=""></p><p><strong>注意</strong>：主轴和侧轴是会改变的，就看flex-direction设置谁为主轴，剩下的就是侧轴。</p><table><thead><tr><th align="center">row</th><th>默认值：从左到右</th></tr></thead><tbody><tr><td align="center">row-reverse</td><td>从右到左</td></tr><tr><td align="center"><strong>column</strong></td><td><strong>从上到下</strong></td></tr><tr><td align="center">column-reverse</td><td>从下到上</td></tr></tbody></table><h5 id="justify-content-属性"><a href="#justify-content-属性" class="headerlink" title="justify-content 属性"></a>justify-content 属性</h5><table><thead><tr><th align="center">flex-start</th><th>默认值：从头开始 如果主轴是x轴，则从左到右</th></tr></thead><tbody><tr><td align="center">flex-end</td><td>从尾部开始排列</td></tr><tr><td align="center">center</td><td>在主轴居中对齐（如果主轴是x轴 则水平居中）</td></tr><tr><td align="center">space-around</td><td>平分剩余空间</td></tr><tr><td align="center">space-between</td><td>先两边贴边 再平分剩余空间（重要）</td></tr></tbody></table><h5 id="flex-wrap-换行"><a href="#flex-wrap-换行" class="headerlink" title="flex-wrap 换行"></a>flex-wrap 换行</h5><ul><li>默认情况下，项目都排在一条线上（轴线）。flex-wrap属性定义，flex布局中默认是不换行的</li><li>nowrap 不换行</li><li>wrap换行</li></ul><h5 id="align-items-侧轴子元素（-单行排列）"><a href="#align-items-侧轴子元素（-单行排列）" class="headerlink" title="align-items 侧轴子元素（ 单行排列）"></a>align-items 侧轴子元素（ 单行排列）</h5><ul><li>该属性是控制子项在侧轴（默认是y轴）上的排列方式 在子项为单行的时候使用</li><li>flex-start 从头部开始</li><li>flex-end 从尾部开始</li><li>center 居中显示</li><li>stretch 拉伸</li></ul><h5 id="align-content-侧轴子元素（多行排列）"><a href="#align-content-侧轴子元素（多行排列）" class="headerlink" title="align-content 侧轴子元素（多行排列）"></a>align-content 侧轴子元素（多行排列）</h5><p>align-content设置子项在侧轴上的排列方式 并且只能用于子项出现换行的情况（多行），在单行的下是没有效果的。</p><table><thead><tr><th align="center">flex-start</th><th>默认值在侧轴的头部开始排列</th></tr></thead><tbody><tr><td align="center">flex-end</td><td>在侧轴的尾部开始排列</td></tr><tr><td align="center"><strong>center</strong></td><td><strong>在侧轴的中间显示</strong></td></tr><tr><td align="center"><strong>space-around</strong></td><td><strong>子项在侧轴平分剩余空间</strong></td></tr><tr><td align="center"><strong>space-between</strong></td><td><strong>子项在侧轴先分布两边，在平分剩余空间</strong></td></tr><tr><td align="center"><strong>stretch</strong></td><td><strong>设置直线法元素高度平分父元素高度</strong></td></tr></tbody></table><h5 id="flex-flow属性"><a href="#flex-flow属性" class="headerlink" title="flex-flow属性"></a>flex-flow属性</h5><p>flex-flow属性是flex-direction和flex-wrap属性的复合属性</p><pre class="line-numbers language-css"><code class="language-css"><span class="token property">flex-flow</span><span class="token punctuation">:</span> row wrap<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="align-content-和-align-items的区别"><a href="#align-content-和-align-items的区别" class="headerlink" title="align-content 和 align-items的区别"></a>align-content 和 align-items的区别</h4><ol><li>align-items 适用于单行情况下，只有上对齐、下对齐、居中和拉伸</li><li>align-content适用于换行（多行）的情况下（单行情况下无效），可以设置上对齐、下对齐、居中、拉伸以及平均分配剩余空间等属性值。</li></ol><p><strong>总结</strong>： 单行找align-items 多行找align-content</p><h4 id="flex布局子项常见属性"><a href="#flex布局子项常见属性" class="headerlink" title="flex布局子项常见属性"></a>flex布局子项常见属性</h4><ol><li>flex：子项目占得份数</li><li>align-self：控制子项自己在侧轴上的排列顺序</li><li>order： 定义子项的排列顺序（前后顺序）</li></ol><h5 id="flex属性"><a href="#flex属性" class="headerlink" title="flex属性"></a>flex属性</h5><p>flex属性定义子项目<strong>分配剩余空间</strong>，用flex来表示占多少份数</p><pre class="line-numbers language-css"><code class="language-css"><span class="token selector"><span class="token class">.item</span> </span><span class="token punctuation">{</span>    <span class="token property">flex</span><span class="token punctuation">:</span> &lt;number><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/*默认值为0*/</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h5 id="align-self-子项-侧轴排列"><a href="#align-self-子项-侧轴排列" class="headerlink" title="align-self 子项 侧轴排列"></a>align-self 子项 侧轴排列</h5><p>align-self 属性允许单个项目有与其他项目不一样的对齐方式，可覆盖align-items属性。</p><p>默认值为auto，表示继承父元素的align-items属性，如果没有父元素，则等同于stretch。</p><pre class="line-numbers language-css"><code class="language-css"><span class="token selector">span<span class="token pseudo-class">:nth-child(2)</span> </span><span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">/* 设置自己在侧轴上的排列方式 */</span>      <span class="token property">align-self</span><span class="token punctuation">:</span> flex-end<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h5 id="order-项目排列顺序"><a href="#order-项目排列顺序" class="headerlink" title="order 项目排列顺序"></a>order 项目排列顺序</h5><p>数值越小，排列越靠前，默认为0；</p><pre class="line-numbers language-css"><code class="language-css"><span class="token selector"><span class="token class">.item</span> </span><span class="token punctuation">{</span>    <span class="token property">order</span><span class="token punctuation">:</span> &lt;number><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="rem适配布局"><a href="#rem适配布局" class="headerlink" title="rem适配布局"></a>rem适配布局</h3><h4 id="rem基础"><a href="#rem基础" class="headerlink" title="rem基础"></a>rem基础</h4><p><strong>rem和em区别</strong>  rem（root em）和 em 都是顺茵不同网页字体大小展现而产生的。其中，em 是相对于其父元素，在实际应用中会带来许多不便；而rem是始终相对于html大小，及页面根元素。</p><p>比如，根元素（html）设置font-size=12px; 非根元素设置width:2rem; 则换成px表示就是24px。</p><p><strong>rem的优势</strong>：父元素文字大小可能不一致， 但是整个页面只有一个html，可以很好来控制整个页面的元素大小。</p><p><strong>特点：</strong> 包裹文字的各元素的尺寸采用rem做单位，而页面的主要划分区域的尺寸仍使用百分数或px做单位（同「流式布局」或「静态/固定布局」）<strong>。</strong>早期浏览器不支持整个页面按比例缩放，仅支持网页内文字尺寸的放大，这种情况下。使用rem做单位，可以使包裹文字的元素随着文字的缩放而缩放。</p><h4 id="媒体查询"><a href="#媒体查询" class="headerlink" title="媒体查询"></a>媒体查询</h4><h5 id="什么是媒体查询"><a href="#什么是媒体查询" class="headerlink" title="什么是媒体查询"></a>什么是媒体查询</h5><p>媒体查询（Media Query） 是CSS3新语法。</p><ul><li>使用@media查询，可以针对不同的媒体类型定义不同的样式</li><li>@media可以针对不同的屏幕尺寸设置不同的样式</li><li>当重置浏览器大小时，页面会根据浏览器的宽度和高度重新渲染页面</li><li>目前针对很多苹果手机，Android手机、平板等设备都用到媒体查询</li></ul><h5 id="媒体查询语法规范"><a href="#媒体查询语法规范" class="headerlink" title="媒体查询语法规范"></a>媒体查询语法规范</h5><ul><li>用@media开头 注意@符号</li><li>mediatype 媒体类型</li><li>关键字 and not only</li><li>media feature 媒体特性必须有小括号包含</li></ul><pre class="line-numbers language-CSS"><code class="language-CSS">@media mediatype and|not|only (meadia feature) {    CSS-CODE;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ol><li><p>mediatype 查询类型</p><p>​    将不同的终端设备划分成不同的类型，称为媒体查询。</p><table><thead><tr><th align="center">值</th><th>解释说明</th></tr></thead><tbody><tr><td align="center">all</td><td>用于所有设备</td></tr><tr><td align="center">print</td><td>用于打印机和打印预览</td></tr><tr><td align="center">screen</td><td>用于所有电脑屏幕、平板电脑、智能手机等</td></tr></tbody></table></li><li><p>关键字</p><p>关键字是将媒体类型或多个媒体特性连接到一起作为媒体查询的条件。</p><ul><li>and：可以将多个媒体特性连接到一起，相当于“且”的意思</li><li>not：排除某个媒体类型，相当于“非”的意思，肯省略</li><li>only：制定某个特殊的媒体类型，可以省略</li></ul></li><li><p>媒体特性</p><p>每种媒体查询都有各自不同的特性，根据不同的媒体类型设置不同的展示风格。</p></li></ol><table><thead><tr><th align="center">值</th><th>解释说明</th></tr></thead><tbody><tr><td align="center">width</td><td>定义输出设备中页面课件区域的宽度</td></tr><tr><td align="center">min-width</td><td>定义输出设备中页面最小可见区域宽度</td></tr><tr><td align="center">max-width</td><td>定义输出设备中页面最大可见区域宽度</td></tr></tbody></table><p>​    4. 媒体查询书写规则</p><p><strong>注意：</strong>为了防止混乱，媒体查询我们要按照从小到大或者从大到小的顺序来写，推荐从小到大写，这样代码更简洁。</p><p><img src="/medias/loading.gif" data-original="https://gitee.com/aurorapic/BlogPic/raw/master/img/media.png" alt=""></p><h4 id="less-基础"><a href="#less-基础" class="headerlink" title="less 基础"></a>less 基础</h4><h5 id="维护css的弊端"><a href="#维护css的弊端" class="headerlink" title="维护css的弊端"></a>维护css的弊端</h5><p>css是一门非程序式语言，没有变量、函数、SCOPE(作用域)等概念。</p><ul><li>css需要书写大量看似没有逻辑的代码，css冗余是比较高。</li><li>不方便维护及扩展，不利于复用</li><li>css没有很好的计算能力</li><li>非前端开发工程师，往往会因为缺少css编写经验而很难写出组织良好且易于维护的css代码项目。</li></ul><h5 id="less介绍"><a href="#less介绍" class="headerlink" title="less介绍"></a>less介绍</h5><p>less（LeanerStyle sheets的缩写）是一门css扩展语言，也成为css预处理器。作为css的一种形式的扩展，他并没有减少css的功能，而是在现有的css的基础上，为css加入程序式语言的特性。一句话：less是一门css预处理语言，它扩展了css的动态属性。</p><p>它在css的语言基础上，引入了变量，Mixin（混入），运算以及函数等功能，大大简化了css的编写，并且降低了css的维护成本，就像它的名称一样，less可以让我们用更少的代码做更多的事情。</p><p>less中文网址：<a href="http://lesscss.cn/" target="_blank" rel="noopener">http://lesscss.cn/</a></p><p>其他常见的css预处理器;Sass,less,Stylus</p><h5 id="less：变量规范"><a href="#less：变量规范" class="headerlink" title="less：变量规范"></a>less：变量规范</h5><p>变量是指没有固定的值，可以改变。css中的一些颜色和数值等经常使用。</p><pre><code>@变量名：值；</code></pre><ol><li>必须要有@为前缀</li><li>不能包含特殊符号</li><li>不能以数字开头</li><li>大小写敏感</li></ol><h5 id="Less编译-vscode插件"><a href="#Less编译-vscode插件" class="headerlink" title="Less编译 vscode插件"></a>Less编译 vscode插件</h5><p>Easy Less插件用来把less文件编译为css文件。下载安装Easy Less插件，只要保存一下less文件，就会自动生成css文件。</p><h5 id="Less-嵌套"><a href="#Less-嵌套" class="headerlink" title="Less 嵌套"></a>Less 嵌套</h5><pre class="line-numbers language-less"><code class="language-less"><span class="token comment" spellcheck="true">// 将css改为less</span><span class="token selector">#header .logo</span> <span class="token punctuation">{</span>  <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">300</span>px<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">#header</span> <span class="token punctuation">{</span>    <span class="token selector">.logo</span> <span class="token punctuation">{</span>       <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">300</span>px<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果遇见 （交集|伪类|伪元素选择器） ，利用&amp;进行连接</p><pre class="line-numbers language-less"><code class="language-less"><span class="token selector">a:hover</span><span class="token punctuation">{</span>    <span class="token property">color</span><span class="token punctuation">:</span>red<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">a</span><span class="token punctuation">{</span>  <span class="token selector">&amp;:hover</span><span class="token punctuation">{</span>      <span class="token property">color</span><span class="token punctuation">:</span>red<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="less-运算"><a href="#less-运算" class="headerlink" title="less 运算"></a>less 运算</h5><p>任何数字、颜色或者变量都可以参与运算。就是Less提供了加（+）、减（-）、乘（*）、除（/）算术运算。</p><pre class="line-numbers language-less"><code class="language-less"><span class="token comment" spellcheck="true">/*Less 里面写*/</span><span class="token variable">@witdh<span class="token punctuation">:</span></span> <span class="token number">10</span>px <span class="token operator">+</span> <span class="token number">5</span><span class="token punctuation">;</span><span class="token selector">div</span> <span class="token punctuation">{</span>    <span class="token property">border</span><span class="token punctuation">:</span> <span class="token variable">@witdh</span> solid red<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/*生成的css*/</span><span class="token selector">div</span> <span class="token punctuation">{</span>  <span class="token property">border</span><span class="token punctuation">:</span> <span class="token number">15</span>px solid red<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/*Less 甚至还可以这样 */</span><span class="token property">width</span><span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token variable">@width</span> <span class="token operator">+</span> <span class="token number">5</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>乘号（*）和除号（/）的写法  </p></li><li><p>运算符中间左右有个空格隔开 1px + 5</p></li><li><p>对于两个不同的单位的值之间的运算，运算结果的值取第一个值的单位 </p></li><li><p>如果两个值之间只有一个值有单位，则运算结果就取该单位</p><p>rem适配方案</p></li></ul><p>1.让一些不能等比自适应的元素，达到当设备尺寸发生改变的时候，等比例适配当前设备。</p><p>2.使用媒体查询根据不同设备按比例设置html的字体大小，然后页面元素使用rem做尺寸单位，当html字体大小变化元素尺寸也会发生变化，从而达到等比缩放的适配。</p><h5 id="rem实际开发适配方案1"><a href="#rem实际开发适配方案1" class="headerlink" title="rem实际开发适配方案1"></a>rem实际开发适配方案1</h5><p>①假设设计稿是750px</p><p>②假设我们把整个屏幕划分为15等份（划分标准不一可以是20份也可以是10等份）</p><p>③每一份作为html字体大小，这里就是50px</p><p>④那么在320px设备的时候，字体大小为320/15就是  21.33px</p><p>⑤用我们页面元素的大小除以不同的 html字体大小会发现他们比例还是相同的</p><p>⑥比如我们以750为标准设计稿</p><p>⑦一个100<em>100像素的页面元素在  750屏幕下，  就是 100/ 50  转换为rem  是  2rem</em>2rem  比例是1比1</p><p>⑧320屏幕下，  html字体大小为21.33   则 2rem=  42.66px  此时宽和高都是 42.66  但是宽和高的比例还是 1比1</p><p>⑨但是已经能实现不同屏幕下  页面元素盒子等比例缩放的效果</p><p>总结：</p><p>①最后的公式：页面元素的rem值 =  页面元素值（px） /  （屏幕宽度  /  划分的份数）</p><p>②屏幕宽度/划分的份数就是 htmlfont-size 的大小</p><p>③或者：页面元素的rem值 =  页面元素值（px） /  html font-size 字体大小</p><h5 id="rem-适配方案2"><a href="#rem-适配方案2" class="headerlink" title="rem 适配方案2"></a>rem 适配方案2</h5><p>手机淘宝团队出的简洁高效 移动端适配库</p><p>我们再也不需要在写不同屏幕的媒体查询，因为里面js做了处理</p><p>它的原理是把当前设备划分为10等份，但是不同设备下，比例还是一致的。</p><p>我们要做的，就是确定好我们当前设备的html 文字大小就可以了</p><p>比如当前设计稿是 750px， 那么我们只需要把 html 文字大小设置为 75px(750px / 10) 就可以</p><p><strong>里面页面元素rem值： 页面元素的px 值 /  75</strong>  </p><p>剩余的，让flexible.js来去算</p><p>github地址：<a href="https://link.jianshu.com/?t=https://github.com/amfe/lib-flexible" target="_blank" rel="noopener">https://github.com/amfe/lib-flexible</a></p><p>总结：</p><p>因为flexible是默认将屏幕分为10等分</p><p>但是当屏幕大于750的时候希望不要再去重置html字体了</p><p>所以要自己通过媒体查询设置一下</p><p>并且要把权重提到最高</p><p>VSCode  px 转换rem 插件 cssrem </p><p>因为cssrem中css自动转化为rem是参照默认插件的16转换的所以需要自己配置</p><p><img src="/medias/loading.gif" data-original="https://gitee.com/aurorapic/BlogPic/raw/master/img/rem.jpg" alt=""></p><p><img src="/medias/loading.gif" data-original="https://gitee.com/aurorapic/BlogPic/raw/master/img/rem2.jpg" alt=""></p><h3 id="响应式布局"><a href="#响应式布局" class="headerlink" title="响应式布局"></a>响应式布局</h3><h4 id="响应式开发原理"><a href="#响应式开发原理" class="headerlink" title="响应式开发原理"></a>响应式开发原理</h4><p>就是使用媒体查询针对不同宽度的设备进行布局和样式的设置，从而适配不同设备的目的。可以把响应式布局看作是流式布局和自适应布局设计理念的融合。</p><p>设备的划分情况：</p><ul><li>小于768的为超小屏幕（手机）</li><li>768~992之间的为小屏设备（平板）</li><li>992~1200的中等屏幕（桌面显示器）</li><li>大于1200的宽屏设备（大桌面显示器）</li></ul><h4 id="响应式布局容器"><a href="#响应式布局容器" class="headerlink" title="响应式布局容器"></a>响应式布局容器</h4><p>响应式需要一个父级做为布局容器，来配合子级元素来实现变化效果。</p><p>原理就是在不同屏幕下，通过媒体查询来改变这个布局容器的大小，再改变里面子元素的排列方式和大小，从而实现不同屏幕下，看到不同的页面布局和样式变化。</p><p>父容器版心的尺寸划分</p><ul><li>超小屏幕（手机，小于 768px）：设置宽度为 100%</li><li>小屏幕（平板，大于等于 768px）：设置宽度为 750px</li><li>中等屏幕（桌面显示器，大于等于 992px）：宽度设置为 970px</li><li>大屏幕（大桌面显示器，大于等于 1200px）：宽度设置为 1170px </li></ul><p>但是我们也可以根据实际情况自己定义划分</p><h4 id="设计方法-1"><a href="#设计方法-1" class="headerlink" title="设计方法"></a>设计方法</h4><p>　　<strong>媒体查询+流式布局</strong>。通常使用 @media 媒体查询 和网格系统 (Grid System) 配合相对布局单位进行布局，实际上就是综合响应式、流动等上述技术通过 CSS 给单一网页不同设备返回不同样式的技术统称。</p><p><strong>优点</strong>：适应pc和移动端，如果足够耐心，效果完美。</p><p><strong>缺点</strong>：（1）媒体查询是有限的，也就是可以枚举出来的，只能适应主流的宽高。（2）要匹配足够多的屏幕大小，工作量不小，设计也需要多个版本。</p><h3 id="bootstrap"><a href="#bootstrap" class="headerlink" title="bootstrap"></a>bootstrap</h3><h4 id="Bootstrap简介"><a href="#Bootstrap简介" class="headerlink" title="Bootstrap简介"></a>Bootstrap简介</h4><p>Bootstrap 来自 Twitter（推特），是目前最受欢迎的前端框架。Bootstrap 是基于HTML、CSS 和 JAVASCRIPT 的，它简洁灵活，使得 Web 开发更加快捷。</p><p><a href="lhttp://www.bootcss.com/" target="_blank" rel="noopener">中文网</a>  <a href="lhttp://getbootstrap.com/" target="_blank" rel="noopener">官网</a>  <a href="https://v3.bootcss.com" target="_blank" rel="noopener">推荐网站</a></p><p>框架：顾名思义就是一套架构，它有一套比较完整的网页功能解决方案，而且控制权在框架本身，有预制样式库、组件和插件。使用者要按照框架所规定的某种规范进行开发。</p><h4 id="bootstrap优点"><a href="#bootstrap优点" class="headerlink" title="bootstrap优点"></a>bootstrap优点</h4><ul><li>标准化的html+css编码规范</li><li>提供了一套简洁、直观、强悍的组件</li><li>有自己的生态圈，不断的更新迭代</li><li>让开发更简单，提高了开发的效率</li></ul><h4 id="版本简介"><a href="#版本简介" class="headerlink" title="版本简介"></a>版本简介</h4><p>2.x.x：停止维护,兼容性好,代码不够简洁，功能不够完善。</p><p>3.x.x：目前使用最多,稳定,但是放弃了IE6-IE7。对 IE8 支持但是界面效果不好,偏向用于开发响应式布局、移动设备优先的WEB 项目。</p><p>4.x.x：最新版，目前还不是很流行</p><h4 id="bootstrap基本使用"><a href="#bootstrap基本使用" class="headerlink" title="bootstrap基本使用"></a>bootstrap基本使用</h4><p>Bootstrap 使用四步曲： </p><ol><li><p>创建文件夹结构  —–bootstrap单独新建一个文件夹</p></li><li><p>创建 html 骨架结构</p><pre class="line-numbers language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>zh-CN<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>X-UA-Compatible<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>IE<span class="token punctuation">=</span>edge<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>width<span class="token punctuation">=</span>device-width, initial-scale<span class="token punctuation">=</span>1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 上述3个meta标签*必须*放在最前面，任何其他内容都*必须*跟随其后！ --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Bootstrap 101 Template<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- Bootstrap --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>css/bootstrap.min.css<span class="token punctuation">"</span></span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- HTML5 shim and Respond.js for IE8 support of HTML5 elements and media queries --></span>    <span class="token comment" spellcheck="true">&lt;!-- WARNING: Respond.js doesn't work if you view the page via file:// --></span>    <span class="token comment" spellcheck="true">&lt;!--[if lt IE 9]>      &lt;script src="//cdn.bootcss.com/html5shiv/3.7.2/html5shiv.min.js">&lt;/script>      &lt;script src="//cdn.bootcss.com/respond.js/1.4.2/respond.min.js">&lt;/script>    &lt;![endif]--></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>你好，世界！<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- jQuery (necessary for Bootstrap's JavaScript plugins) --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>//cdn.bootcss.com/jquery/1.11.3/jquery.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- Include all compiled plugins (below), or include individual files as needed --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>js/bootstrap.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>引入相关样式文件</p><pre class="line-numbers language-css"><code class="language-css">&lt;!-- Bootstrap 核心样式-->&lt;link rel=<span class="token string">"stylesheet"</span> href=<span class="token string">"bootstrap/css/bootstrap.min.css"</span>><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>书写内容</p><p>直接拿Bootstrap 预先定义好的样式来使用</p><p>修改Bootstrap 原来的样式，注意权重问题</p><p>学好Bootstrap 的关键在于知道它定义了哪些样式，以及这些样式能实现什么样的效果</p></li></ol><h4 id="bootstrap布局容器"><a href="#bootstrap布局容器" class="headerlink" title="bootstrap布局容器"></a>bootstrap布局容器</h4><p>Bootstrap 需要为页面内容和栅格系统包裹一个 .container 或者.container-fluid 容器，它提供了两个作此用处的类。</p><p>.container</p><ul><li>响应式布局的容器  固定宽度</li><li>大屏 ( &gt;=1200px)  宽度定为 1st</li><li>中屏 ( &gt;=992px)   宽度定为  970px</li><li>小屏 ( &gt;=768px)   宽度定为  750px</li><li>超小屏  (100%) </li></ul><p>.container-fluid</p><ul><li>流式布局容器 百分百宽度</li><li>占据全部视口（viewport）的容器。</li></ul><h4 id="bootstrap栅格系统"><a href="#bootstrap栅格系统" class="headerlink" title="bootstrap栅格系统"></a>bootstrap栅格系统</h4><p>Bootstrap提供了一套响应式、移动设备优先的流式栅格系统，随着屏幕或视口（viewport）尺寸的增加，系统会自动分为最多12列。</p><p>栅格系统用于通过一系列的行（row）与列（column）的组合来创建页面布局，你的内容就可以放入这些创建好的布局中。</p><ul><li>按照不同屏幕划分为1~12 等份</li><li>行（row） 可以去除父容器作用15px的边距</li><li>xs-extra small：超小； sm-small：小；  md-medium：中等； lg-large：大；</li><li>列（column）大于 12，多余的“列（column）”所在的元素将被作为一个整体另起一行排列</li><li>每一列默认有左右15像素的 padding</li><li>可以同时为一列指定多个设备的类名，以便划分不同份数  例如 class=”col-md-4 col-sm-6”</li></ul><p><strong>栅格嵌套</strong></p><p>栅格系统内置的栅格系统将内容再次嵌套。简单理解就是一个列内再分成若干份小列。我们可以通过添加一个新的 .row 元素和一系列 .col-sm-* 元素到已经存在的 .col-sm-*元素内。</p><pre class="line-numbers language-css"><code class="language-css">&lt;!-- 列嵌套 --> &lt;div class=<span class="token string">"col-sm-4"</span>>    &lt;div class=<span class="token string">"row"</span>>         &lt;div class=<span class="token string">"col-sm-6"</span>>小列&lt;/div>         &lt;div class=<span class="token string">"col-sm-6"</span>>小列&lt;/div>    &lt;/div>&lt;/div><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>列偏移</strong></p><p>使用 .col-md-offset-* 类可以将列向右侧偏移。这些类实际是通过使用 * 选择器为当前元素增加了左侧的边距（margin）。</p><pre class="line-numbers language-css"><code class="language-css">&lt;!-- 列偏移 -->  &lt;div class=<span class="token string">"row"</span>>      &lt;div class=<span class="token string">"col-lg-4"</span>><span class="token number">1</span>&lt;/div>      &lt;div class=<span class="token string">"col-lg-4 col-lg-offset-4"</span>><span class="token number">2</span>&lt;/div>  &lt;/div><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>列排序</strong></p><p>通过使用 .col-md-push-* 和 .col-md-pull-* 类就可以很容易的改变列（column）的顺序。</p><pre class="line-numbers language-css"><code class="language-css">&lt;!-- 列排序 -->  &lt;div class=<span class="token string">"row"</span>>      &lt;div class=<span class="token string">"col-lg-4 col-lg-push-8"</span>>左侧&lt;/div>      &lt;div class=<span class="token string">"col-lg-8 col-lg-pull-4"</span>>右侧&lt;/div>  &lt;/div><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>响应式工具</strong></p><p>为了加快对移动设备友好的页面开发工作，利用媒体查询功能，并使用这些工具类可以方便的针对不同设备展示或隐藏页面内容。</p><table><thead><tr><th align="center">类名</th><th align="center">超小屏</th><th align="center">小屏</th><th align="center">中屏</th><th align="center">大屏</th></tr></thead><tbody><tr><td align="center">.hidden-xs</td><td align="center">隐藏</td><td align="center">可见</td><td align="center">可见</td><td align="center">可见</td></tr><tr><td align="center">.hidden-sm</td><td align="center">可见</td><td align="center">隐藏</td><td align="center">可见</td><td align="center">可见</td></tr><tr><td align="center">.hidden-md</td><td align="center">可见</td><td align="center">可见</td><td align="center">隐藏</td><td align="center">可见</td></tr><tr><td align="center">.hidden-lg</td><td align="center">可见</td><td align="center">可见</td><td align="center">可见</td><td align="center">隐藏</td></tr></tbody></table><p>参考文章：<a href="https://www.cnblogs.com/yanayana/p/7066948.html" target="_blank" rel="noopener">https://www.cnblogs.com/yanayana/p/7066948.html</a></p>]]></content>
      
      
      <categories>
          
          <category> 移动web </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>2019的最后一次日暮</title>
      <link href="/archives/e096b541.html"/>
      <url>/archives/e096b541.html</url>
      
        <content type="html"><![CDATA[<p>哈尔滨的气温一如往常–零下20多度的气温让人不敢在外面停留，就连去食堂吃个饭都小步慢跑，同时还得注意脚下光滑的地面，可能一不留神就滑倒了。气温虽然很低，还是太阳公公还是勇敢的挂在了哈尔滨的蓝天上，从屋里面透过窗户往外看外面的天空依然那么美。</p><p>冬天的哈尔滨太阳太阳很快就落下了，今天下午4点在图书馆复习的时候，一抬头，发现了这2019年的最后一次日暮，从发现一直到它完全消失……<a id="more"></a></p><p><img src="/medias/loading.gif" data-original="https://gitee.com/aurorapic/BlogPic/raw/master/img/rimu.jpg" alt=""></p><p>很多人都说21世纪的十年代就结束了。确实是的，我是一个时空观念很敏感的人，每每到一年结束的时候都会莫名有很多感慨，很多时候这种感叹都是庸人自扰。昨天在知乎上看到一句话：时间是人类发明出来记录世界变化的工具，可是也给人类增加了许多感叹的理由。或许，时间本身就没有什么意义，只是人们赋予了它太多所谓的内涵。</p><p>看到这最后的日暮，我突然来了“灵感”，2019最后一次日暮，听着轻音乐，短短几个字再配上这个图，仿佛也有很多的意境，想提笔写点什么，却只有那几个字，最后憋出了，百十字的“诗”。</p><p>​                        2019的最后一个日暮<br>​                        没来得及向它挥一挥手<br>​                        就要匆匆溜走了<br>​                        所有的故事<br>​                        都将随着它的离去而离去<br>​                        不必为此而感到难过<br>​                        因为我们正书写着关于它的记忆<br>​                        </p><p>​                        2019的最后一个日暮<br>​                        不必向它挥手<br>​                        我知道<br>​                        明天的黎明<br>​                        它依然守候</p><p>​                        2019的最后一个日暮<br>​                        已经不见踪影<br>​                        明天再见                    </p><p>“诗”很烂，可一有点感触还是会下意识拿起笔写。生活嘛，还是要有一点记录的。</p><p>回忆2019，发现收获还是不少的，最起码很多没去做过的事情尝试做了，大学已经过去了一大半，努力方向也大概找到了</p><p>首先关于学习方面，年初的时候，觉得要好好学习java，用寒假打工挣的钱买了一套课程，把基础部分学了，感觉啥也不会，后来接触到了前端，觉得前端挺有意思，慢慢转向了前端的学习，那套课程也就撂下了。大概从暑假前后开始决定要好好学前端，然而暑假在一个多月，只学习了几天便沉迷于大秦帝国电视剧无法自拔，一直到大三开学后才继续学习，到现在刚把jQuery学完，同时又是学着忘着。有时候也很迷茫，特别是学JavaScript基本知识的时候，对于一些概念不是很了解，似懂非懂，到了最近看了jquery突然觉得非常简单，确实简单，也发现了如果前面的知识不是很了解的话，框架好用是好用，但终究只是知其然而不知其所以然，可能就真是码农了。所以我还是想着假期找点时间在把js看一看，理解透彻。</p><p>其次呢是个人的生活方面，这一年把哈尔滨的转了转，自己骑着车子或者是和同学一起，没有一直呆在学校，这是我觉得很好的。还有今年暑假7月份，自己一个人去了沈阳看了盛京故宫，对于别人来说可能很平常的事情，对我来说却是破天荒头一遭。我勇敢的迈出了第一个脚步，自己一个人去一个陌生的地方也无没什么大不了的，没那么可怕，只是一个人的旅途，可能有些落寞吧。这仍然是我的勇敢的一步，寒假还要去一趟北京，看看紫禁城，但愿会有美好的经历吧。</p><p>接下来的2020年，算是人生的十字路口了，最重要的是还是要沿着既定的方向认真努力，踏踏实实的学习，愉快的生活，未来嘛，可期。</p>]]></content>
      
      
      <categories>
          
          <category> 生活随笔 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>正则表达式</title>
      <link href="/archives/2f57a694.html"/>
      <url>/archives/2f57a694.html</url>
      
        <content type="html"><![CDATA[<h3 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h3><p>今天简单学习了正则表达式，现在把基础知识点做一些记录。</p><a id="more"></a><h4 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h4><p>正则表达式是对字符串操作的一种逻辑公式，就是用事先定义好的一些特定字符、及这些特定字符的组合，组成一个“规则字符串”，这个“规则字符串”用来表达对字符串的一种过滤逻辑。</p><h4 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h4><ol><li>判断给定的字符串是否符合正则表达式的过滤逻辑（匹配）</li><li>可以通过正则表达式，从字符串中获取我们想要的特定部分（提取）</li><li>强大的字符串替换能力（替换）</li></ol><p>总而言之，正则表达式的主要作用是：匹配字符串，然后进行操作</p><h4 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h4><ol><li>灵活性、逻辑性和功能性强</li><li>可以迅速地用非常简单的方式达到对字符串地复杂控制</li></ol><h4 id="元字符和限定符"><a href="#元字符和限定符" class="headerlink" title="元字符和限定符"></a>元字符和限定符</h4><p>正则表达式的组成：是由元字符或者限定字符组成的一个式子</p><p><strong>常用元字符</strong></p><table><thead><tr><th>元字符</th><th>说明</th></tr></thead><tbody><tr><td>\d</td><td>匹配数字</td></tr><tr><td>\D</td><td>匹配任意非数字的字符</td></tr><tr><td>\w</td><td>匹配字母或数字或下划线</td></tr><tr><td>\W</td><td>匹配任意不是字母、数字、下划线</td></tr><tr><td>\s</td><td>匹配任意的空白符</td></tr><tr><td>\S</td><td>匹配任意不是空白符的字符</td></tr><tr><td>.</td><td>匹配除换行符以外的任意单个字符</td></tr><tr><td>^</td><td>表示匹配行首的文本（以谁开始）</td></tr><tr><td>$</td><td>表示匹配行尾的文本（以谁结束）</td></tr></tbody></table><p><strong>限定符</strong></p><table><thead><tr><th>限定符</th><th>说明</th></tr></thead><tbody><tr><td>*</td><td>出现0次或多次</td></tr><tr><td>+</td><td>出现1次或多次</td></tr><tr><td>？</td><td>出现0次或1次</td></tr><tr><td>{n}</td><td>出现n次</td></tr><tr><td>{n,m}</td><td>出现n次到m次</td></tr><tr><td>{n,}</td><td>出现n次或多次</td></tr></tbody></table><p><strong>其他</strong></p><ol><li><input disabled="" type="checkbox"> 字符串用中括号括起来，表示匹配其中任意一个字符，相当于或的意思</li><li>[^] 匹配除中括号以内的内容</li><li>\  转义符</li><li>| 或者，选择两者中的一个。注意|将左右两边分为两部分，而不管左右两边有多长多乱</li><li>()  分组，提升优先级</li><li>[\u4e00-\u9fa5]  匹配汉字</li></ol><h4 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h4><p>验证手机号：</p><pre><code>^\d{11}$</code></pre><p>验证邮编：</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token operator">^</span>\d<span class="token punctuation">{</span><span class="token number">6</span><span class="token punctuation">}</span>$<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>验证邮箱：</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token operator">^</span>\w<span class="token operator">+</span>@\w<span class="token operator">+</span>\<span class="token punctuation">.</span>\w<span class="token operator">+</span>$<span class="token punctuation">[</span><span class="token number">0</span><span class="token operator">-</span>9a<span class="token operator">-</span>zA<span class="token operator">-</span>Z_<span class="token punctuation">.</span><span class="token operator">-</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token punctuation">[</span>@<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token operator">-</span>9a<span class="token operator">-</span>zA<span class="token operator">-</span>Z_<span class="token punctuation">.</span><span class="token operator">-</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">.</span><span class="token punctuation">]</span><span class="token punctuation">[</span>a<span class="token operator">-</span>zA<span class="token operator">-</span>Z<span class="token punctuation">]</span><span class="token operator">+</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>验证IP地址127.0.0.1</p><pre class="line-numbers language-JavaScript"><code class="language-JavaScript">^\d{1,3}\(.\d{1,3}){3}$<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="JavaScript创建正则表达式"><a href="#JavaScript创建正则表达式" class="headerlink" title="JavaScript创建正则表达式"></a>JavaScript创建正则表达式</h4><p>方式1：通过调用构造函数的方式创建</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">var</span> reg<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">RegExp</span><span class="token punctuation">(</span><span class="token regex">/\d{5}/</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> reg <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Regex</span><span class="token punctuation">(</span><span class="token string">'\d'</span><span class="token punctuation">,</span> <span class="token string">'gi'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>方式2：通过字面量的方式创建</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">var</span> reg <span class="token operator">=</span> <span class="token regex">/\d/i</span><span class="token punctuation">;</span><span class="token keyword">var</span> reg<span class="token operator">=</span><span class="token regex">/\d{1,5}/</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>参数</p><table><thead><tr><th>标志</th><th>说明</th></tr></thead><tbody><tr><td>i</td><td>忽略大小写</td></tr><tr><td>g</td><td>全局匹配</td></tr><tr><td>gi</td><td>全局匹配+忽略大小写</td></tr></tbody></table><h4 id="匹配正则表达式"><a href="#匹配正则表达式" class="headerlink" title="匹配正则表达式"></a>匹配正则表达式</h4><pre class="line-numbers language-javascript"><code class="language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token regex">/./</span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">"除了回车换行以为的任意字符"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//true</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token regex">/.*/</span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">"0个到多个"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//true</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token regex">/.+/</span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">"1个到多个"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//true</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token regex">/.?/</span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">"哈哈"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//true</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token regex">/[0-9]/</span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">"9527"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//true</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token regex">/[a-z]/</span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">"what"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//true</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token regex">/[A-Z]/</span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">"Are"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//true</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token regex">/[a-zA-Z]/</span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">"干啥子"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//false</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token regex">/[0-9a-zA-Z]/</span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">"9ebg"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//true</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token regex">/b|(ara)/</span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">"abra"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//true</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token regex">/[a-z]{2,3}/</span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">"arfsf"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token regex">/\d/</span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">"998"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token regex">/\d*/</span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">"998"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token regex">/\d+/</span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">"998"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token regex">/\d{0,}/</span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">"998"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token regex">/\d{2,3}/</span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">"998"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token regex">/\D/</span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">"eat"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token regex">/\s/</span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">"  "</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token regex">/\S/</span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">"嘎嘎 "</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token regex">/\w/</span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">"_"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token regex">/\W/</span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">"_"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="案例-1"><a href="#案例-1" class="headerlink" title="案例"></a>案例</h4><p><strong>验证密码的强度</strong></p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>style type<span class="token operator">=</span><span class="token string">"text/css"</span><span class="token operator">></span>    #dv<span class="token punctuation">{</span>        width<span class="token punctuation">:</span> 300px<span class="token punctuation">;</span>        height<span class="token punctuation">:</span>200px<span class="token punctuation">;</span>        position<span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>        left<span class="token punctuation">:</span>300px<span class="token punctuation">;</span>        top<span class="token punctuation">:</span>100px<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token punctuation">.</span>strengthLv0 <span class="token punctuation">{</span>        height<span class="token punctuation">:</span> 6px<span class="token punctuation">;</span>        width<span class="token punctuation">:</span> 120px<span class="token punctuation">;</span>        border<span class="token punctuation">:</span> 1px solid #ccc<span class="token punctuation">;</span>        padding<span class="token punctuation">:</span> 2px<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token punctuation">.</span>strengthLv1 <span class="token punctuation">{</span>        background<span class="token punctuation">:</span> red<span class="token punctuation">;</span>        height<span class="token punctuation">:</span> 6px<span class="token punctuation">;</span>        width<span class="token punctuation">:</span> 40px<span class="token punctuation">;</span>        border<span class="token punctuation">:</span> 1px solid #ccc<span class="token punctuation">;</span>        padding<span class="token punctuation">:</span> 2px<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token punctuation">.</span>strengthLv2 <span class="token punctuation">{</span>        background<span class="token punctuation">:</span> orange<span class="token punctuation">;</span>        height<span class="token punctuation">:</span> 6px<span class="token punctuation">;</span>        width<span class="token punctuation">:</span> 80px<span class="token punctuation">;</span>        border<span class="token punctuation">:</span> 1px solid #ccc<span class="token punctuation">;</span>        padding<span class="token punctuation">:</span> 2px<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token punctuation">.</span>strengthLv3 <span class="token punctuation">{</span>        background<span class="token punctuation">:</span> green<span class="token punctuation">;</span>        height<span class="token punctuation">:</span> 6px<span class="token punctuation">;</span>        width<span class="token punctuation">:</span> 120px<span class="token punctuation">;</span>        border<span class="token punctuation">:</span> 1px solid #ccc<span class="token punctuation">;</span>        padding<span class="token punctuation">:</span> 2px<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>style<span class="token operator">></span><span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"dv"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>label <span class="token keyword">for</span><span class="token operator">=</span><span class="token string">"pwd"</span><span class="token operator">></span>密码<span class="token operator">&lt;</span><span class="token operator">/</span>label<span class="token operator">></span>    <span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"text"</span> id<span class="token operator">=</span><span class="token string">"pwd"</span> maxlength<span class="token operator">=</span><span class="token string">"16"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>课外话题<span class="token operator">--</span><span class="token operator">></span>    <span class="token operator">&lt;</span>div<span class="token operator">></span>        <span class="token operator">&lt;</span>em<span class="token operator">></span>密码强度：<span class="token operator">&lt;</span><span class="token operator">/</span>em<span class="token operator">></span>        <span class="token operator">&lt;</span>em id<span class="token operator">=</span><span class="token string">"strength"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>em<span class="token operator">></span>        <span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"strengthLevel"</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"strengthLv0"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span>script<span class="token operator">></span>     <span class="token keyword">function</span> <span class="token function">my$</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//获取文本框注册键盘抬起事件</span>    <span class="token function">my$</span><span class="token punctuation">(</span><span class="token string">"pwd"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>onkeyup <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//每次键盘抬起的时候都要获取文本框中的内容，验证文本框中有什么东西，得到一个级别，然后下面的div显示对应的颜色</span>        <span class="token comment" spellcheck="true">//如果密码的长度小于6，没必要判断</span>        <span class="token comment" spellcheck="true">// if(this.value.length >= 6){</span>        <span class="token comment" spellcheck="true">//     var lvl = getLvl(this.value);</span>        <span class="token comment" spellcheck="true">//     my$("strengthLevel").className="strengthLv"+lvl;</span>        <span class="token comment" spellcheck="true">// }else{</span>        <span class="token comment" spellcheck="true">//     my$("strengthLevel").className="strengthLv0";</span>        <span class="token comment" spellcheck="true">// }   </span>        <span class="token function">my$</span><span class="token punctuation">(</span><span class="token string">"strengthLevel"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>className<span class="token operator">=</span><span class="token string">"strengthLv"</span><span class="token operator">+</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>value<span class="token punctuation">.</span>length<span class="token operator">>=</span><span class="token number">6</span><span class="token operator">?</span><span class="token function">getLvl</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//输入密码，返回对应的级别</span>    <span class="token keyword">function</span> <span class="token function">getLvl</span><span class="token punctuation">(</span>pwd<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">var</span> lvl <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//默认是0级</span>        <span class="token comment" spellcheck="true">//密码中是否有数字，或者字母，或是特殊符号</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token regex">/[0-9]/</span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>pwd<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            lvl<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//判断密码中是不是有字母</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token regex">/[a-zA-Z]/</span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>pwd<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            lvl<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//判断密码中有没有特殊符号</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token regex">/[^0-9a-zA-Z]/</span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>pwd<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            lvl<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> lvl<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>表单验证</strong></p><pre class="line-numbers language-javascript"><code class="language-javascript">  <span class="token operator">&lt;</span>style type<span class="token operator">=</span><span class="token string">"text/css"</span><span class="token operator">></span>    body <span class="token punctuation">{</span>      background<span class="token punctuation">:</span> #ccc<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    label <span class="token punctuation">{</span>      width<span class="token punctuation">:</span> 40px<span class="token punctuation">;</span>      display<span class="token punctuation">:</span> inline<span class="token operator">-</span>block<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    span <span class="token punctuation">{</span>      color<span class="token punctuation">:</span> red<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token punctuation">.</span>container <span class="token punctuation">{</span>      margin<span class="token punctuation">:</span> 100px auto<span class="token punctuation">;</span>      width<span class="token punctuation">:</span> 400px<span class="token punctuation">;</span>      padding<span class="token punctuation">:</span> 50px<span class="token punctuation">;</span>      line<span class="token operator">-</span>height<span class="token punctuation">:</span> 40px<span class="token punctuation">;</span>      border<span class="token punctuation">:</span> 1px solid #<span class="token number">999</span><span class="token punctuation">;</span>      background<span class="token punctuation">:</span> #efefef<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    span <span class="token punctuation">{</span>      margin<span class="token operator">-</span>left<span class="token punctuation">:</span> 30px<span class="token punctuation">;</span>      font<span class="token operator">-</span>size<span class="token punctuation">:</span> 12px<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token punctuation">.</span>wrong <span class="token punctuation">{</span>      color<span class="token punctuation">:</span> red    <span class="token punctuation">}</span>    <span class="token punctuation">.</span>right <span class="token punctuation">{</span>      color<span class="token punctuation">:</span> green<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token punctuation">.</span>defau <span class="token punctuation">{</span>      width<span class="token punctuation">:</span> 200px<span class="token punctuation">;</span>      height<span class="token punctuation">:</span> 20px<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token punctuation">.</span>de1 <span class="token punctuation">{</span>      background<span class="token operator">-</span>position<span class="token punctuation">:</span> <span class="token number">0</span> <span class="token operator">-</span>20px<span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token operator">&lt;</span><span class="token operator">/</span>style<span class="token operator">></span><span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"container"</span> id<span class="token operator">=</span><span class="token string">"dv"</span><span class="token operator">></span>  <span class="token operator">&lt;</span>label <span class="token keyword">for</span><span class="token operator">=</span><span class="token string">"qq"</span><span class="token operator">></span>Q Q<span class="token operator">&lt;</span><span class="token operator">/</span>label<span class="token operator">></span><span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"text"</span> id<span class="token operator">=</span><span class="token string">"qq"</span><span class="token operator">></span><span class="token operator">&lt;</span>span<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span><span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">></span>  <span class="token operator">&lt;</span>label<span class="token operator">></span>手机<span class="token operator">&lt;</span><span class="token operator">/</span>label<span class="token operator">></span><span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"text"</span> id<span class="token operator">=</span><span class="token string">"phone"</span><span class="token operator">></span><span class="token operator">&lt;</span>span<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span><span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">></span>  <span class="token operator">&lt;</span>label<span class="token operator">></span>邮箱<span class="token operator">&lt;</span><span class="token operator">/</span>label<span class="token operator">></span><span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"text"</span> id<span class="token operator">=</span><span class="token string">"e-mail"</span><span class="token operator">></span><span class="token operator">&lt;</span>span<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span><span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">></span>  <span class="token operator">&lt;</span>label<span class="token operator">></span>座机<span class="token operator">&lt;</span><span class="token operator">/</span>label<span class="token operator">></span><span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"text"</span> id<span class="token operator">=</span><span class="token string">"telephone"</span><span class="token operator">></span><span class="token operator">&lt;</span>span<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span><span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">></span>  <span class="token operator">&lt;</span>label<span class="token operator">></span>姓名<span class="token operator">&lt;</span><span class="token operator">/</span>label<span class="token operator">></span><span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"text"</span> id<span class="token operator">=</span><span class="token string">"fullName"</span><span class="token operator">></span><span class="token operator">&lt;</span>span<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span><span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span>script<span class="token operator">></span> <span class="token keyword">function</span> <span class="token function">my$</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">//qq的</span>  <span class="token function">checkInput</span><span class="token punctuation">(</span><span class="token function">my$</span><span class="token punctuation">(</span><span class="token string">"qq"</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token regex">/^\d{5,11}$/</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//手机</span>  <span class="token function">checkInput</span><span class="token punctuation">(</span><span class="token function">my$</span><span class="token punctuation">(</span><span class="token string">"phone"</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token regex">/^\d{11}$/</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//邮箱</span>  <span class="token function">checkInput</span><span class="token punctuation">(</span><span class="token function">my$</span><span class="token punctuation">(</span><span class="token string">"e-mail"</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token regex">/^[0-9a-zA-Z_.-]+[@][0-9a-zA-Z_.-]+([.][a-zA-Z]+){1,2}$/</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//座机号码</span>  <span class="token function">checkInput</span><span class="token punctuation">(</span><span class="token function">my$</span><span class="token punctuation">(</span><span class="token string">"telephone"</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token regex">/^\d{3,4}[-]\d{7,8}$/</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//中文名字</span>  <span class="token function">checkInput</span><span class="token punctuation">(</span><span class="token function">my$</span><span class="token punctuation">(</span><span class="token string">"fullName"</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token regex">/^[\u4e00-\u9fa5]{2,6}$/</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//给我文本框,给我这个文本框相应的正则表达式,我把结果显示出来</span>  <span class="token comment" spellcheck="true">//通过正则表达式验证当前的文本框是否匹配并显示结果</span>  <span class="token keyword">function</span> <span class="token function">checkInput</span><span class="token punctuation">(</span>input<span class="token punctuation">,</span>reg<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//文本框注册失去焦点的事件</span>    input<span class="token punctuation">.</span>onblur<span class="token operator">=</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span><span class="token punctuation">(</span>reg<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>nextElementSibling<span class="token punctuation">.</span>innerText<span class="token operator">=</span><span class="token string">"正确了"</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>nextElementSibling<span class="token punctuation">.</span>style<span class="token punctuation">.</span>color<span class="token operator">=</span><span class="token string">"green"</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>nextElementSibling<span class="token punctuation">.</span>innerText<span class="token operator">=</span><span class="token string">"让你得瑟,错了吧"</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>nextElementSibling<span class="token punctuation">.</span>style<span class="token punctuation">.</span>color<span class="token operator">=</span><span class="token string">"red"</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="附录4"><a href="#附录4" class="headerlink" title="附录4"></a>附录4</h4><p><a href="https://c.runoob.com/front-end/854" target="_blank" rel="noopener">正则表达式在线测试工具</a></p><p>电子文档制作工具: <a href="https://github.com/egoist/docute" target="_blank" rel="noopener">docute</a></p><p>流程图工具：<a href="http://logicnet.dk/DiagramDesigner/" target="_blank" rel="noopener">DiagramDesigner</a></p>]]></content>
      
      
      <categories>
          
          <category> 前端相关知识 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>动画函数的封装</title>
      <link href="/archives/d45603e.html"/>
      <url>/archives/d45603e.html</url>
      
        <content type="html"><![CDATA[<h3 id="匀速动画函数"><a href="#匀速动画函数" class="headerlink" title="匀速动画函数"></a>匀速动画函数</h3><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//任意一个元素到达指定的位置</span><span class="token keyword">function</span> <span class="token function">animate</span><span class="token punctuation">(</span>element<span class="token punctuation">,</span>target<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//保证每次点击只有一个定时器生效，首先要清理定时器</span>        <span class="token function">clearInterval</span><span class="token punctuation">(</span>element<span class="token punctuation">.</span>timeId<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//设置定时器</span>        element<span class="token punctuation">.</span>timeId <span class="token operator">=</span> <span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//获取当前元素所在的位置</span>            <span class="token keyword">var</span> current <span class="token operator">=</span> element<span class="token punctuation">.</span>offsetLeft<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//设置每次移动的距离</span>            <span class="token keyword">var</span> step <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//判断走正数还是走负数</span>            step <span class="token operator">=</span> current<span class="token operator">&lt;</span>target<span class="token operator">?</span>step<span class="token punctuation">:</span><span class="token operator">-</span>step<span class="token punctuation">;</span>            current <span class="token operator">+</span><span class="token operator">=</span>step<span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span>current<span class="token operator">-</span>target<span class="token punctuation">)</span> <span class="token operator">></span> Math<span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span>step<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                element<span class="token punctuation">.</span>style<span class="token punctuation">.</span>left <span class="token operator">=</span> current<span class="token operator">+</span><span class="token string">"px"</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token function">clearInterval</span><span class="token punctuation">(</span>element<span class="token punctuation">.</span>timeId<span class="token punctuation">)</span><span class="token punctuation">;</span>                element<span class="token punctuation">.</span>style<span class="token punctuation">.</span>left <span class="token operator">=</span> target<span class="token operator">+</span><span class="token string">"px"</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="变速动画函数封装"><a href="#变速动画函数封装" class="headerlink" title="变速动画函数封装"></a>变速动画函数封装</h3><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">animate</span><span class="token punctuation">(</span>element<span class="token punctuation">,</span>target<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">clearInterval</span><span class="token punctuation">(</span>element<span class="token punctuation">.</span>timeId<span class="token punctuation">)</span><span class="token punctuation">;</span>        element<span class="token punctuation">.</span>timeId <span class="token operator">=</span> <span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">var</span> current <span class="token operator">=</span> element<span class="token punctuation">.</span>offsetLeft<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//移动的距离</span>            <span class="token keyword">var</span> step <span class="token operator">=</span> <span class="token punctuation">(</span>target<span class="token operator">-</span>current<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">10</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//如果step大于0，那么向上取整；如果小于0，向下取整</span>            step <span class="token operator">=</span> step<span class="token operator">></span><span class="token number">0</span><span class="token operator">?</span>Math<span class="token punctuation">.</span><span class="token function">ceil</span><span class="token punctuation">(</span>step<span class="token punctuation">)</span><span class="token punctuation">:</span>Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>step<span class="token punctuation">)</span><span class="token punctuation">;</span>            current <span class="token operator">+</span><span class="token operator">=</span> step<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//设置当前位置</span>            element<span class="token punctuation">.</span>style<span class="token punctuation">.</span>left <span class="token operator">=</span> current <span class="token operator">+</span> <span class="token string">"px"</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>current <span class="token operator">==</span> target<span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//如果不清理定时器，当到达目标位置的时候，仍然会不停执行，只是距离为0</span>                <span class="token function">clearInterval</span><span class="token punctuation">(</span>element<span class="token punctuation">.</span>timeId<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">//测试代码</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"目标位置："</span><span class="token operator">+</span>target<span class="token operator">+</span><span class="token string">"，当前位置："</span><span class="token operator">+</span>current<span class="token operator">+</span><span class="token string">"每次移动的距离："</span><span class="token operator">+</span>step<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="缓动动画封装"><a href="#缓动动画封装" class="headerlink" title="缓动动画封装"></a>缓动动画封装</h3><pre class="line-numbers language-javascript"><code class="language-javascript">        <span class="token comment" spellcheck="true">//获取任意一个元素的属性的值</span>        <span class="token keyword">function</span> <span class="token function">getStyle</span><span class="token punctuation">(</span>element<span class="token punctuation">,</span>attr<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//判断浏览器是否支持这个方法</span>            <span class="token keyword">return</span> window<span class="token punctuation">.</span>getComputedStyle<span class="token operator">?</span>window<span class="token punctuation">.</span><span class="token function">getComputedStyle</span><span class="token punctuation">(</span>element<span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">[</span>attr<span class="token punctuation">]</span><span class="token punctuation">:</span>element<span class="token punctuation">.</span>currentStyle<span class="token punctuation">[</span>attr<span class="token punctuation">]</span><span class="token operator">||</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">function</span> <span class="token function">animate</span><span class="token punctuation">(</span>element<span class="token punctuation">,</span>json<span class="token punctuation">,</span>fn<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token function">clearInterval</span><span class="token punctuation">(</span>element<span class="token punctuation">.</span>timeId<span class="token punctuation">)</span><span class="token punctuation">;</span>            element<span class="token punctuation">.</span>timeId <span class="token operator">=</span> <span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//默认全部到达目标</span>                <span class="token keyword">var</span> flag <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//循环遍历json中所有的键值对</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> attr <span class="token keyword">in</span> json<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">//判断是不是opacity</span>                    <span class="token keyword">if</span><span class="token punctuation">(</span>attr <span class="token operator">==</span> <span class="token string">"opacity"</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                        <span class="token comment" spellcheck="true">//获取当前元素的透明度，放大100倍</span>                        <span class="token keyword">var</span> current <span class="token operator">=</span> <span class="token function">getStyle</span><span class="token punctuation">(</span>element<span class="token punctuation">,</span>attr<span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">100</span><span class="token punctuation">;</span>                        <span class="token comment" spellcheck="true">//目标透明度放大100倍</span>                        <span class="token keyword">var</span> target <span class="token operator">=</span> json<span class="token punctuation">[</span>attr<span class="token punctuation">]</span><span class="token operator">*</span><span class="token number">100</span><span class="token punctuation">;</span>                        <span class="token comment" spellcheck="true">//设置变化范围</span>                        <span class="token keyword">var</span> step <span class="token operator">=</span> <span class="token punctuation">(</span>target<span class="token operator">-</span>current<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">10</span><span class="token punctuation">;</span>                        <span class="token comment" spellcheck="true">//判断是变化的正负值</span>                        step <span class="token operator">=</span> step<span class="token operator">></span><span class="token number">0</span> <span class="token operator">?</span>Math<span class="token punctuation">.</span><span class="token function">ceil</span><span class="token punctuation">(</span>step<span class="token punctuation">)</span><span class="token punctuation">:</span>Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>step<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token comment" spellcheck="true">//设置当前元素透明度</span>                        current <span class="token operator">+</span><span class="token operator">=</span>step<span class="token punctuation">;</span>                        <span class="token comment" spellcheck="true">//设置该元素的opacity属性值</span>                        element<span class="token punctuation">.</span>style<span class="token punctuation">[</span>attr<span class="token punctuation">]</span><span class="token operator">=</span>current<span class="token operator">/</span><span class="token number">100</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>attr <span class="token operator">==</span> <span class="token string">"zIndex"</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//判断这个attr变量中存储的是不是zIndex</span>                        <span class="token comment" spellcheck="true">//层级改变就是直接改变这个属性的值</span>                        element<span class="token punctuation">.</span>style<span class="token punctuation">[</span>attr<span class="token punctuation">]</span><span class="token operator">=</span>json<span class="token punctuation">[</span>attr<span class="token punctuation">]</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//普通的属性</span>                        <span class="token comment" spellcheck="true">//获取元素这个属性的当前的值</span>                        <span class="token keyword">var</span> current <span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token function">getStyle</span><span class="token punctuation">(</span>element<span class="token punctuation">,</span>attr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token comment" spellcheck="true">//获取目标值，就是传过来的值</span>                        <span class="token keyword">var</span> target <span class="token operator">=</span> json<span class="token punctuation">[</span>attr<span class="token punctuation">]</span><span class="token punctuation">;</span>                        <span class="token keyword">var</span> step <span class="token operator">=</span> <span class="token punctuation">(</span>target<span class="token operator">-</span>current<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">10</span><span class="token punctuation">;</span>                        step <span class="token operator">=</span> step<span class="token operator">></span><span class="token number">0</span><span class="token operator">?</span>Math<span class="token punctuation">.</span><span class="token function">ceil</span><span class="token punctuation">(</span>step<span class="token punctuation">)</span><span class="token punctuation">:</span>Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>step<span class="token punctuation">)</span><span class="token punctuation">;</span>                        current <span class="token operator">+</span><span class="token operator">=</span>step<span class="token punctuation">;</span>                        element<span class="token punctuation">.</span>style<span class="token punctuation">[</span>attr<span class="token punctuation">]</span><span class="token operator">=</span>current<span class="token operator">+</span><span class="token string">"px"</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    <span class="token comment" spellcheck="true">//是否到达目标</span>                    <span class="token keyword">if</span><span class="token punctuation">(</span>current<span class="token operator">!=</span>target<span class="token punctuation">)</span><span class="token punctuation">{</span>                        flag<span class="token operator">=</span><span class="token boolean">false</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span class="token punctuation">{</span>                    <span class="token function">clearInterval</span><span class="token punctuation">(</span>element<span class="token punctuation">.</span>timeId<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>fn<span class="token punctuation">)</span><span class="token punctuation">{</span>                        <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>                <span class="token comment" spellcheck="true">//测试代码</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"目标位置："</span><span class="token operator">+</span>target<span class="token operator">+</span><span class="token string">"，当前位置："</span><span class="token operator">+</span>current<span class="token operator">+</span><span class="token string">"每次移动的距离："</span><span class="token operator">+</span>step<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token comment" spellcheck="true">//测试</span> <span class="token function">my$</span><span class="token punctuation">(</span><span class="token string">"btn1"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>onclick <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">var</span> json1 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"width"</span><span class="token punctuation">:</span> <span class="token number">400</span><span class="token punctuation">,</span> <span class="token string">"height"</span><span class="token punctuation">:</span> <span class="token number">500</span><span class="token punctuation">,</span> <span class="token string">"left"</span><span class="token punctuation">:</span> <span class="token number">500</span><span class="token punctuation">,</span> <span class="token string">"top"</span><span class="token punctuation">:</span> <span class="token number">80</span><span class="token punctuation">,</span> <span class="token string">"opacity"</span><span class="token punctuation">:</span> <span class="token number">0.2</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token function">animate</span><span class="token punctuation">(</span><span class="token function">my$</span><span class="token punctuation">(</span><span class="token string">"dv"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> json1<span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">animate</span><span class="token punctuation">(</span><span class="token function">my$</span><span class="token punctuation">(</span><span class="token string">"dv"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token string">"width"</span><span class="token punctuation">:</span> <span class="token number">40</span><span class="token punctuation">,</span> <span class="token string">"height"</span><span class="token punctuation">:</span> <span class="token number">50</span><span class="token punctuation">,</span> <span class="token string">"left"</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">"top"</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">"opacity"</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"zIndex"</span><span class="token punctuation">:</span> <span class="token number">1000</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>javascript三大系列</title>
      <link href="/archives/45822f79.html"/>
      <url>/archives/45822f79.html</url>
      
        <content type="html"><![CDATA[<h3 id="offset系列"><a href="#offset系列" class="headerlink" title="offset系列"></a>offset系列</h3><p><strong>问题</strong></p><p>获取标签的样式属性值，如果标签的属性是在style标签中设置的，无法通过标签.style.属性，来获取宽高等属性值。如果在标签自身中设置style属性则可以获取。<a id="more"></a></p><p><strong>offset系列的属性</strong></p><ul><li>对象.offsetWidth: 获取元素自身的宽（包含边框）</li><li>对象.offsetHeight: 获取元素自身的高（包含边框）</li><li>对象.offsetLeft: 距页面左边的距离，若父级盒子有定位，则是与父级盒子的左侧距离，若是父盒子都没有定位则是与body的left值</li><li>对象.offsetTop: 距页面上面的距离，若父级盒子有定位，则是与父级盒子的上面距离，若是父盒子都没有定位则是与body的top值</li><li>对象.offsetParent：用于获取元素中有定位的最近父级元素，如果父级元素都没有定位获取的是body</li></ul><p><strong>注意</strong></p><ol><li>offset系列返回值都是数值类型，不带“px”单位，可以直接进行计算</li><li>offset系列的是只读属性，通过style可以进行读写</li></ol><h3 id="scroll系列"><a href="#scroll系列" class="headerlink" title="scroll系列"></a>scroll系列</h3><p><strong>scroll系列的属性</strong></p><ul><li>scrollHeight：元素中的内容的实际高度（不包括边框），如果内容不足，就是元素的高度</li><li>scrollWidth：元素中内容的实际宽度（不包括边框），如果内容不足就是元素的宽度</li><li>scrollTop： onscroll事件发生时，元素向上卷曲出去的距离</li><li>scrollLeft:  onscroll事件发生时，元素向左卷曲出去的距离</li></ul><pre class="line-numbers language-javascript"><code class="language-javascript">  <span class="token comment" spellcheck="true">//获取页面向上或者向左卷曲出去的距离的值,兼容代码</span>  <span class="token keyword">function</span> <span class="token function">getScroll</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span>      left<span class="token punctuation">:</span> window<span class="token punctuation">.</span>pageXOffset <span class="token operator">||</span> document<span class="token punctuation">.</span>documentElement<span class="token punctuation">.</span>scrollLeft <span class="token operator">||</span> document<span class="token punctuation">.</span>body<span class="token punctuation">.</span>scrollLeft <span class="token operator">||</span> <span class="token number">0</span><span class="token punctuation">,</span>      top<span class="token punctuation">:</span> window<span class="token punctuation">.</span>pageYOffset <span class="token operator">||</span> document<span class="token punctuation">.</span>documentElement<span class="token punctuation">.</span>scrollTop <span class="token operator">||</span> document<span class="token punctuation">.</span>body<span class="token punctuation">.</span>scrollTop <span class="token operator">||</span> <span class="token number">0</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>兼容问题</strong></p><pre class="line-numbers language-javascript"><code class="language-javascript">谷歌火狐支持以下两种方式：document<span class="token punctuation">.</span>body<span class="token punctuation">.</span>scrollTop<span class="token operator">/</span>scrollLeftwindow<span class="token punctuation">.</span>pageYoffset<span class="token operator">/</span>pageXoffsetIE8支持以下方式：document<span class="token punctuation">.</span>documentElement<span class="token punctuation">.</span>scrollTop<span class="token operator">/</span>scrollLeft<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="client系列—可视区域"><a href="#client系列—可视区域" class="headerlink" title="client系列—可视区域"></a>client系列—可视区域</h3><p><strong>client的属性</strong></p><ul><li>clientWidth：可视区域的宽（内部，不包括边框）</li><li>clientHeight:  可视区域的高（内部，不包括边框）</li><li>clientLeft：左边边框的宽度</li><li>clientTop：上边边框的宽度</li><li>clientX： 获取鼠标事件发生时可视区域的水平坐标</li><li>clientY： 获取鼠标事件发生时可视区域的垂直坐标</li></ul><p><strong>兼容问题</strong></p><p>1.clientWidth 和 clientHeight的兼容问题</p><pre class="line-numbers language-javascript"><code class="language-javascript">谷歌火狐支持：document<span class="token punctuation">.</span>body<span class="token punctuation">.</span>clientWidth<span class="token operator">/</span>clientHeightwindow<span class="token punctuation">.</span>innerWidth<span class="token operator">/</span>innerHeightIE8支持：document<span class="token punctuation">.</span>documentElement<span class="token punctuation">.</span>clientWidth<span class="token operator">/</span>clientHeight<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>兼容代码</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">client</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>window<span class="token punctuation">.</span>innerWidth<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token punctuation">{</span>            <span class="token string">"width"</span><span class="token punctuation">:</span>window<span class="token punctuation">.</span>innerWidth<span class="token punctuation">,</span>            <span class="token string">"height"</span><span class="token punctuation">:</span>window<span class="token punctuation">.</span>innerHeight        <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span>compatMode <span class="token operator">===</span> <span class="token string">"CSS1Compat"</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token punctuation">{</span>            <span class="token string">"width"</span><span class="token punctuation">:</span>document<span class="token punctuation">.</span>documentElement<span class="token punctuation">.</span>clientWidth<span class="token punctuation">,</span>            <span class="token string">"height"</span><span class="token punctuation">:</span>document<span class="token punctuation">.</span>documentElement<span class="token punctuation">.</span>clientHeight        <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token punctuation">{</span>            <span class="token string">"width"</span><span class="token punctuation">:</span>document<span class="token punctuation">.</span>body<span class="token punctuation">.</span>clientWidth<span class="token punctuation">,</span>            <span class="token string">"height"</span><span class="token punctuation">:</span>document<span class="token punctuation">.</span>body<span class="token punctuation">.</span>clientHeight        <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>    使用方法<span class="token punctuation">:</span>    <span class="token number">1</span><span class="token punctuation">.</span> 取得clientWidth的值<span class="token punctuation">:</span> <span class="token function">client</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>width    <span class="token number">2</span><span class="token punctuation">.</span> 取得clientHeight的值<span class="token punctuation">:</span> <span class="token function">client</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>height<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2.clientX 和 clientY的兼容问题</p><ul><li>谷歌,火狐,IE9+: 事件参数对象随着事件处理函数的参数传入</li><li>IE8以下: event对象必须作为window对象的一个属性(window.event)</li></ul><p>clientX 和 clientY的兼容性代码：</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//将client和scroll的兼容问题进行对象的封装</span>    <span class="token keyword">var</span> evtTools<span class="token operator">=</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//获取兼容的事件参数对象</span>        getEvt<span class="token punctuation">:</span><span class="token keyword">function</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> window<span class="token punctuation">.</span>event<span class="token operator">?</span>window<span class="token punctuation">.</span>event<span class="token punctuation">:</span>e<span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">//获取的是可视区域的横坐标</span>        getClientX<span class="token punctuation">:</span><span class="token keyword">function</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getEvt</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">.</span>clientX<span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">//获取的是可视区域的纵坐标</span>        getClientY<span class="token punctuation">:</span><span class="token keyword">function</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getEvt</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">.</span>clientY<span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">//获取向左卷曲出去的距离的横坐标</span>        getScrollLeft<span class="token punctuation">:</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> window<span class="token punctuation">.</span>pageXOffset<span class="token operator">||</span>document<span class="token punctuation">.</span>body<span class="token punctuation">.</span>scrollLeft<span class="token operator">||</span>document<span class="token punctuation">.</span>documentElement<span class="token punctuation">.</span>scrollLeft<span class="token operator">||</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">//获取向上卷曲出去的距离的纵坐标</span>        getScrollTop<span class="token punctuation">:</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> window<span class="token punctuation">.</span>pageYOffset<span class="token operator">||</span>document<span class="token punctuation">.</span>body<span class="token punctuation">.</span>scrollTop<span class="token operator">||</span>document<span class="token punctuation">.</span>documentElement<span class="token punctuation">.</span>scrollTop<span class="token operator">||</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>酒</title>
      <link href="/archives/187ac5b.html"/>
      <url>/archives/187ac5b.html</url>
      
        <content type="html"><![CDATA[<p>酒和欢乐总是联系在一起——无酒不欢</p><p>酒和苦恼也常联系在一起——借酒消愁</p><p>欢乐和苦恼必然联系在一起——每一个欢乐背后都隐藏着当这个快乐消失后的苦恼，每一个苦恼背后都隐藏着当这个苦恼失去后的快乐。</p><p>这话是许嵩说的但是我记不住，可能没那么快乐也没那么苦恼吧！</p><a id="more"></a><p><strong>是酒不是水，莫要当酒鬼</strong></p><p>大概是最近一年慢慢喝起了白酒，自从这个学期更甚——几乎每个星期都要和朋友喝上一点，感觉也还不错。隐约记得是因为啤酒不好喝，还有白酒喝着可能更有感觉。起初喝的是江小白，主要是因为他的情怀——总是有很多让人或许叫产生共鸣的话，哦，对了还有他的瓶装设计，一瓶二两，我和朋友一人一两就着周黑鸭慢慢的啜（chuo）。我总是对他讲，以后退休了，每天啜二两白酒的生活也着实让人羡慕呐。然鹅，现在才20岁却在想几十年以后的事情，未免显得太过幼稚或者叫想的太多。其实，想一想也还不错，当做是越过现实幻想吧。</p><p>喝酒的时候我学着去品，慢慢的喝，确实有一股清醇，当下肚的时候确有一股暖意，特别是在寒冷的哈尔滨，喝上一口，暖和。</p><p>今天买了一瓶一斤的红星二锅头，我俩尽然喝了大半瓶，其实觉得也没有多少，他喝两杯半我喝了两杯（记得当初是我邀他一起喝的，现在居然这么能喝，一口下去半杯没了，我只是啜了很少一部分）。不过这个酒可能确实不一样，刚入口的时候是没有酒味的，入口之后渐渐显现酒味，朋友说真不愧是绵柔啊。我能喝出不同却不能很好理解其中的韵味，虽说每次是在“品”，总是觉得太过肤浅，可能是人生阅历还不太够又或许不想去理解其中的味道吧。</p><p><img src="/medias/loading.gif" data-original="https://gitee.com/aurorapic/BlogPic/raw/master/img/20200402112233.png" alt=""></p><p>然而，酒就是酒，不是水，少喝为上，达到微醺的效果最好。其实每次只要喝一点我就会有点晕乎乎的感觉，我渐渐的喜欢上了这种感觉。不愿当个酒鬼，也不会当个酒鬼，当经历什么事情之后自然会醉。</p>]]></content>
      
      
      <categories>
          
          <category> 生活随笔 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>js-轮播图</title>
      <link href="/archives/7ac52404.html"/>
      <url>/archives/7ac52404.html</url>
      
        <content type="html"><![CDATA[<p>javascript实现轮播图效果—</p><p>今天整了一下午，仍然是没有完全理解，先上传经常看看。。</p><a id="more"></a><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span><span class="token operator">!</span>DOCTYPE html<span class="token operator">></span><span class="token operator">&lt;</span>html lang<span class="token operator">=</span><span class="token string">"en"</span><span class="token operator">></span><span class="token operator">&lt;</span>head<span class="token operator">></span>  <span class="token operator">&lt;</span>meta charset<span class="token operator">=</span><span class="token string">"UTF-8"</span><span class="token operator">></span>  <span class="token operator">&lt;</span>title<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>title<span class="token operator">></span>  <span class="token operator">&lt;</span>style type<span class="token operator">=</span><span class="token string">"text/css"</span><span class="token operator">></span>    <span class="token operator">*</span> <span class="token punctuation">{</span>      padding<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>      margin<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>      list<span class="token operator">-</span>style<span class="token punctuation">:</span> none<span class="token punctuation">;</span>      border<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token punctuation">.</span>all <span class="token punctuation">{</span>      width<span class="token punctuation">:</span> 500px<span class="token punctuation">;</span>      height<span class="token punctuation">:</span> 200px<span class="token punctuation">;</span>      padding<span class="token punctuation">:</span> 7px<span class="token punctuation">;</span>      border<span class="token punctuation">:</span> 1px solid #ccc<span class="token punctuation">;</span>      margin<span class="token punctuation">:</span> 100px auto<span class="token punctuation">;</span>      position<span class="token punctuation">:</span> relative<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token punctuation">.</span>screen <span class="token punctuation">{</span>      width<span class="token punctuation">:</span> 500px<span class="token punctuation">;</span>      height<span class="token punctuation">:</span> 200px<span class="token punctuation">;</span>      overflow<span class="token punctuation">:</span> hidden<span class="token punctuation">;</span>      position<span class="token punctuation">:</span> relative<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token punctuation">.</span>screen li <span class="token punctuation">{</span>      width<span class="token punctuation">:</span> 500px<span class="token punctuation">;</span>      height<span class="token punctuation">:</span> 200px<span class="token punctuation">;</span>      overflow<span class="token punctuation">:</span> hidden<span class="token punctuation">;</span>      float<span class="token punctuation">:</span> left<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token punctuation">.</span>screen ul <span class="token punctuation">{</span>      position<span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>      left<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>      top<span class="token punctuation">:</span> 0px<span class="token punctuation">;</span>      width<span class="token punctuation">:</span> 3000px<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token punctuation">.</span>all ol <span class="token punctuation">{</span>      position<span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>      right<span class="token punctuation">:</span> 10px<span class="token punctuation">;</span>      bottom<span class="token punctuation">:</span> 10px<span class="token punctuation">;</span>      line<span class="token operator">-</span>height<span class="token punctuation">:</span> 20px<span class="token punctuation">;</span>      text<span class="token operator">-</span>align<span class="token punctuation">:</span> center<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token punctuation">.</span>all ol li <span class="token punctuation">{</span>      float<span class="token punctuation">:</span> left<span class="token punctuation">;</span>      width<span class="token punctuation">:</span> 20px<span class="token punctuation">;</span>      height<span class="token punctuation">:</span> 20px<span class="token punctuation">;</span>      background<span class="token punctuation">:</span> #fff<span class="token punctuation">;</span>      border<span class="token punctuation">:</span> 1px solid #ccc<span class="token punctuation">;</span>      margin<span class="token operator">-</span>left<span class="token punctuation">:</span> 10px<span class="token punctuation">;</span>      cursor<span class="token punctuation">:</span> pointer<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token punctuation">.</span>all ol li<span class="token punctuation">.</span>current <span class="token punctuation">{</span>      background<span class="token punctuation">:</span> #DB192A<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    #arr <span class="token punctuation">{</span>      display<span class="token punctuation">:</span> none<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    #arr span <span class="token punctuation">{</span>      width<span class="token punctuation">:</span> 40px<span class="token punctuation">;</span>      height<span class="token punctuation">:</span> 40px<span class="token punctuation">;</span>      position<span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>      left<span class="token punctuation">:</span> 5px<span class="token punctuation">;</span>      top<span class="token punctuation">:</span> <span class="token number">50</span><span class="token operator">%</span><span class="token punctuation">;</span>      margin<span class="token operator">-</span>top<span class="token punctuation">:</span> <span class="token operator">-</span>20px<span class="token punctuation">;</span>      background<span class="token punctuation">:</span> #<span class="token number">000</span><span class="token punctuation">;</span>      cursor<span class="token punctuation">:</span> pointer<span class="token punctuation">;</span>      line<span class="token operator">-</span>height<span class="token punctuation">:</span> 40px<span class="token punctuation">;</span>      text<span class="token operator">-</span>align<span class="token punctuation">:</span> center<span class="token punctuation">;</span>      font<span class="token operator">-</span>weight<span class="token punctuation">:</span> bold<span class="token punctuation">;</span>      font<span class="token operator">-</span>family<span class="token punctuation">:</span> <span class="token string">'黑体'</span><span class="token punctuation">;</span>      font<span class="token operator">-</span>size<span class="token punctuation">:</span> 30px<span class="token punctuation">;</span>      color<span class="token punctuation">:</span> #fff<span class="token punctuation">;</span>      opacity<span class="token punctuation">:</span> <span class="token number">0.3</span><span class="token punctuation">;</span>      border<span class="token punctuation">:</span> 1px solid #fff<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    #arr #right <span class="token punctuation">{</span>      right<span class="token punctuation">:</span> 5px<span class="token punctuation">;</span>      left<span class="token punctuation">:</span> auto<span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token operator">&lt;</span><span class="token operator">/</span>style<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>head<span class="token operator">></span><span class="token operator">&lt;</span>body<span class="token operator">></span><span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"all"</span> id<span class="token operator">=</span><span class="token string">'box'</span><span class="token operator">></span>  <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"screen"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>相框<span class="token operator">--</span><span class="token operator">></span>    <span class="token operator">&lt;</span>ul<span class="token operator">></span>      <span class="token operator">&lt;</span>li<span class="token operator">></span><span class="token operator">&lt;</span>img src<span class="token operator">=</span><span class="token string">"images/1.jpg"</span> width<span class="token operator">=</span><span class="token string">"500"</span> height<span class="token operator">=</span><span class="token string">"200"</span><span class="token operator">/</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span>      <span class="token operator">&lt;</span>li<span class="token operator">></span><span class="token operator">&lt;</span>img src<span class="token operator">=</span><span class="token string">"images/2.jpg"</span> width<span class="token operator">=</span><span class="token string">"500"</span> height<span class="token operator">=</span><span class="token string">"200"</span><span class="token operator">/</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span>      <span class="token operator">&lt;</span>li<span class="token operator">></span><span class="token operator">&lt;</span>img src<span class="token operator">=</span><span class="token string">"images/3.jpg"</span> width<span class="token operator">=</span><span class="token string">"500"</span> height<span class="token operator">=</span><span class="token string">"200"</span><span class="token operator">/</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span>      <span class="token operator">&lt;</span>li<span class="token operator">></span><span class="token operator">&lt;</span>img src<span class="token operator">=</span><span class="token string">"images/4.jpg"</span> width<span class="token operator">=</span><span class="token string">"500"</span> height<span class="token operator">=</span><span class="token string">"200"</span><span class="token operator">/</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span>      <span class="token operator">&lt;</span>li<span class="token operator">></span><span class="token operator">&lt;</span>img src<span class="token operator">=</span><span class="token string">"images/5.jpg"</span> width<span class="token operator">=</span><span class="token string">"500"</span> height<span class="token operator">=</span><span class="token string">"200"</span><span class="token operator">/</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>ul<span class="token operator">></span>    <span class="token operator">&lt;</span>ol<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>ol<span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>  <span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"arr"</span><span class="token operator">></span><span class="token operator">&lt;</span>span id<span class="token operator">=</span><span class="token string">"left"</span><span class="token operator">></span><span class="token operator">&amp;</span>lt<span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span><span class="token operator">&lt;</span>span id<span class="token operator">=</span><span class="token string">"right"</span><span class="token operator">></span><span class="token operator">&amp;</span>gt<span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span>script src<span class="token operator">=</span><span class="token string">"common.js"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span class="token operator">&lt;</span>script<span class="token operator">></span>  <span class="token comment" spellcheck="true">// 获取box</span>  <span class="token keyword">var</span> box <span class="token operator">=</span> <span class="token function">my$</span><span class="token punctuation">(</span><span class="token string">"box"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//获取相框</span>  <span class="token keyword">var</span> screen <span class="token operator">=</span> box<span class="token punctuation">.</span>children<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//获取相框的宽度</span>  <span class="token keyword">var</span> imgWidth <span class="token operator">=</span> screen<span class="token punctuation">.</span>offsetWidth<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//获取ul</span>  <span class="token keyword">var</span> ulObj <span class="token operator">=</span> screen<span class="token punctuation">.</span>children<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//获取ul下的所有的li</span>  <span class="token keyword">var</span> list <span class="token operator">=</span> ulObj<span class="token punctuation">.</span>children<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//获取ol</span>  <span class="token keyword">var</span> olObj <span class="token operator">=</span> screen<span class="token punctuation">.</span>children<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//获取焦点的div</span>  <span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token function">my$</span><span class="token punctuation">(</span><span class="token string">"arr"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//设置全局变量,控制ul移动的位置</span>  <span class="token keyword">var</span> pic <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//创建小按钮，根据ul中li的个数</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> list<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//创建li标签，加入到ol中</span>    <span class="token keyword">var</span> liObj <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">"li"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    olObj<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>liObj<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//为li设置值</span>    liObj<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//在每个ol标签中的li标签中添加一个自定义属性</span>    liObj<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">"index"</span><span class="token punctuation">,</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//注册鼠标进入事件</span>    liObj<span class="token punctuation">.</span>onmouseover <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">//先清除所有ol中的li的背景颜色</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> olObj<span class="token punctuation">.</span>children<span class="token punctuation">.</span>length<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        olObj<span class="token punctuation">.</span>children<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">removeAttribute</span><span class="token punctuation">(</span><span class="token string">"class"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token comment" spellcheck="true">//设置当前鼠标进入li的背景颜色</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>className <span class="token operator">=</span> <span class="token string">"current"</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//获取鼠标进入的li的当前的索引值</span>      pic <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token string">"index"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//移动ul</span>      <span class="token function">animate</span><span class="token punctuation">(</span>ulObj<span class="token punctuation">,</span><span class="token operator">-</span>pic<span class="token operator">*</span>imgWidth<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 设置ol中第一个li有背景颜色</span>    olObj<span class="token punctuation">.</span>children<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>className<span class="token operator">=</span><span class="token string">"current"</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//克隆ul中的第一个li加入到ul最后</span>    ulObj<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>ulObj<span class="token punctuation">.</span>children<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">cloneNode</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//自动播放</span>    <span class="token keyword">var</span> timeId <span class="token operator">=</span> <span class="token function">setInterval</span><span class="token punctuation">(</span>clickHandle<span class="token punctuation">,</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//鼠标进入到box的div显示左右焦点</span>    box<span class="token punctuation">.</span>onmouseover <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      arr<span class="token punctuation">.</span>style<span class="token punctuation">.</span>display <span class="token operator">=</span> <span class="token string">"block"</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//鼠标进入，清除之前的定时器</span>      <span class="token function">clearInterval</span><span class="token punctuation">(</span>timeId<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    box<span class="token punctuation">.</span>onmouseout <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      arr<span class="token punctuation">.</span>style<span class="token punctuation">.</span>display <span class="token operator">=</span> <span class="token string">"none"</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//鼠标离开自动播放</span>      timeId <span class="token operator">=</span> <span class="token function">setInterval</span><span class="token punctuation">(</span>clickHandle<span class="token punctuation">,</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//右边按钮</span>    <span class="token function">my$</span><span class="token punctuation">(</span><span class="token string">"right"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>onclick <span class="token operator">=</span> clickHandle<span class="token punctuation">;</span>    <span class="token keyword">function</span> <span class="token function">clickHandle</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">//如果pic的值是5，恰巧是ul中li个数-1的值，此时页面中显示第六张图片，而用户会认为这是第一个图，所以如果用户再次点击按钮，用户就会看到第二个图片</span>      <span class="token keyword">if</span><span class="token punctuation">(</span>pic <span class="token operator">==</span> list<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//先设置pic=0</span>        pic <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//把ul的位置还原成开始的默认位置</span>        ulObj<span class="token punctuation">.</span>style<span class="token punctuation">.</span>left <span class="token operator">=</span> <span class="token number">0</span><span class="token operator">+</span><span class="token string">"px"</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token comment" spellcheck="true">//立即设置pic加1，那么此时用户就会看到第二个图片了</span>      pic<span class="token operator">++</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//pic从0的值加1之后，pic的值是1，然后 ul移动出去一个图片</span>      <span class="token function">animate</span><span class="token punctuation">(</span>ulObj<span class="token punctuation">,</span> <span class="token operator">-</span>pic<span class="token operator">*</span>imgWidth<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//如果pic==5说明，此时显示第六章图片（内容是第一张图片，第一个小按钮有颜色）</span>      <span class="token keyword">if</span><span class="token punctuation">(</span>pic <span class="token operator">==</span> list<span class="token punctuation">.</span>length<span class="token number">-1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//第五个颜色清除</span>        olObj<span class="token punctuation">.</span>children<span class="token punctuation">[</span>olObj<span class="token punctuation">.</span>children<span class="token punctuation">.</span>length<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>className<span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//设置第一个按钮的颜色</span>        olObj<span class="token punctuation">.</span>children<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>className<span class="token operator">=</span><span class="token string">"current"</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//清除所有的小按钮的背景颜色</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> olObj<span class="token punctuation">.</span>children<span class="token punctuation">.</span>length<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          olObj<span class="token punctuation">.</span>children<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">removeAttribute</span><span class="token punctuation">(</span><span class="token string">"class"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        olObj<span class="token punctuation">.</span>children<span class="token punctuation">[</span>pic<span class="token punctuation">]</span><span class="token punctuation">.</span>className <span class="token operator">=</span> <span class="token string">"current"</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//左边按钮</span>    <span class="token function">my$</span><span class="token punctuation">(</span><span class="token string">"left"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>onclick <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>pic <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        pic <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>        ulObj<span class="token punctuation">.</span>style<span class="token punctuation">.</span>left <span class="token operator">=</span> <span class="token operator">-</span>pic <span class="token operator">*</span> imgWidth <span class="token operator">+</span> <span class="token string">"px"</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      pic<span class="token operator">--</span><span class="token punctuation">;</span>      <span class="token function">animate</span><span class="token punctuation">(</span>ulObj<span class="token punctuation">,</span><span class="token operator">-</span>pic<span class="token operator">*</span>imgWidth<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//设置小按钮的颜色---所有的小按钮的颜色全部删除</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> olObj<span class="token punctuation">.</span>children<span class="token punctuation">.</span>length<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        olObj<span class="token punctuation">.</span>children<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">removeAttribute</span><span class="token punctuation">(</span><span class="token string">"class"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token comment" spellcheck="true">//当前的pic索引值对应的按钮设置颜色</span>      olObj<span class="token punctuation">.</span>children<span class="token punctuation">[</span>pic<span class="token punctuation">]</span><span class="token punctuation">.</span>className <span class="token operator">=</span> <span class="token string">"current"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//设置任意的一个元素,移动到指定的目标位置</span>  <span class="token keyword">function</span> <span class="token function">animate</span><span class="token punctuation">(</span>element<span class="token punctuation">,</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">clearInterval</span><span class="token punctuation">(</span>element<span class="token punctuation">.</span>timeId<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//定时器的id值存储到对象的一个属性中</span>    element<span class="token punctuation">.</span>timeId <span class="token operator">=</span> <span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">//获取元素的当前的位置,数字类型</span>      <span class="token keyword">var</span> current <span class="token operator">=</span> element<span class="token punctuation">.</span>offsetLeft<span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//每次移动的距离</span>      <span class="token keyword">var</span> step <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>      step <span class="token operator">=</span> current <span class="token operator">&lt;</span> target <span class="token operator">?</span> step <span class="token punctuation">:</span> <span class="token operator">-</span>step<span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//当前移动到位置</span>      current <span class="token operator">+</span><span class="token operator">=</span> step<span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span>current <span class="token operator">-</span> target<span class="token punctuation">)</span> <span class="token operator">></span> Math<span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span>step<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        element<span class="token punctuation">.</span>style<span class="token punctuation">.</span>left <span class="token operator">=</span> current <span class="token operator">+</span> <span class="token string">"px"</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//清理定时器</span>        <span class="token function">clearInterval</span><span class="token punctuation">(</span>element<span class="token punctuation">.</span>timeId<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//直接到达目标</span>        element<span class="token punctuation">.</span>style<span class="token punctuation">.</span>left <span class="token operator">=</span> target <span class="token operator">+</span> <span class="token string">"px"</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>body<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>html<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>hexo评论功能的实现</title>
      <link href="/archives/5c97bedf.html"/>
      <url>/archives/5c97bedf.html</url>
      
        <content type="html"><![CDATA[<p>本次增加博客评论功能和页面访问量统计功能</p><a id="more"></a><h3 id="评论功能的实现"><a href="#评论功能的实现" class="headerlink" title="评论功能的实现"></a>评论功能的实现</h3><p>在刚刚搭建好博客之后就准备增加评论功能，也找了一些资料，其中有基于Leancloud系统的Valine评论系统和基于github开发的Gitment评论系统。对于前者，看到很多评论说很不错的，但是我注册的时候发现需要提交身份证号，想一想还是算了吧（即使我的身份信息很不值钱）。。后者呢，我一开始用的那个博客主题集成了这个功能，但是我在配置的时候没有配置好，印象不太好，而且好像只能关联github账号，也就放弃了。</p><p>后来偶然发现了一个叫做来必力的评论系统，感觉还不错，然后就装了，真的还不错。</p><p><strong>安装过程如下</strong></p><ol><li><p>打开<a href="https://www.livere.com/" target="_blank" rel="noopener">来必力</a>官网，注册账号（只需要邮箱验证，不需要身份证。。）</p></li><li><p>点击安装</p><p><img src="/medias/loading.gif" data-original="https://gitee.com/aurorapic/BlogPic/raw/master/img/livere1.png" alt=""></p></li><li><p>选择city免费版</p><p><img src="/medias/loading.gif" data-original="https://gitee.com/aurorapic/BlogPic/raw/master/img/livere2.png" alt=""></p></li><li><p>复制data-uid里面的代码（双引号里面的代码），将其粘贴到主题配置文件的<code>livere_uid</code> 下面：</p><p><img src="/medias/loading.gif" data-original="https://gitee.com/aurorapic/BlogPic/raw/master/img/livere03.jpg" alt=""></p></li><li><p>然后测试，部署就可以了。就这么简单。。。</p><p><img src="/medias/loading.gif" data-original="https://gitee.com/aurorapic/BlogPic/raw/master/img/livere4.png" alt=""></p></li><li><p>这个来必力评论系统的后台管理也非常方便，能够进行评论管理，评论提醒等。</p></li></ol><p>参考链接：</p><p><a href="http://wangwlj.com/2017/12/18/blog_comment/" target="_blank" rel="noopener">http://wangwlj.com/2017/12/18/blog_comment/</a></p><p><a href="https://www.jianshu.com/p/c311d31265e0" target="_blank" rel="noopener">https://www.jianshu.com/p/c311d31265e0</a></p>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>IE浏览器测试html代码的问题</title>
      <link href="/archives/45b79d89.html"/>
      <url>/archives/45b79d89.html</url>
      
        <content type="html"><![CDATA[<p>测试节点的兼容代码，在谷歌和火狐上面都能正常显示，然而使用IE浏览器测试的时候，IE提示说无法访问此页面，确保web地址的正确：</p><a id="more"></a><p><img src="/medias/loading.gif" data-original="https://gitee.com/aurorapic/BlogPic/raw/master/img/ie01.png" alt=""></p><p>上网查了一下，才知道可能是因为挂了代理导致本地的服务器无法启动，需要在IE浏览器中找到设置选项—-Internet选项—-局域网设置–在对于本地地址不使用代理服务器前面勾选，点击确定即可。</p><p><img src="/medias/loading.gif" data-original="https://gitee.com/aurorapic/BlogPic/raw/master/img/ie02.png" alt=""></p><p>但是，设置完成之后好像还是不行，提示未找到文件。</p><p><img src="/medias/loading.gif" data-original="https://gitee.com/aurorapic/BlogPic/raw/master/img/ie03.png" alt=""></p><p>这就很挠头了，同样的代码在谷歌和火狐里面运行的好好的，在ie里面就是各种问题，然后找了各种方案。一开始以为是webStrom的原因，网上也有通过配置webstrom内置服务器和端口的方式解决问题，但是搁我这就不行。</p><p>后来发现，将文件名设置成英文可以正常在IE中打开。。。但中文就是乱码，提示找不到文件。</p><p>最后我把在谷歌上面能正常访问的地址复制到IE上面，能够正常显示。这就应该是IE浏览器的问题了，真是很想吐槽IE。。</p><p><strong>IE浏览器测试的解决办法：</strong></p><ul><li>手动输入要打开的文件地址</li><li>把文件名换成英文，不要用中文</li><li>找到源文件选择打开方式—IE浏览器</li><li>将谷歌或火狐的地址复制到IE上面</li></ul><p>在测试IE的时候总是会有“是否阻止脚本运行的弹窗”，在head标签中插入下面的代码即可：</p><pre><code> &lt;!-- saved from url=(0014)about:internet --&gt;</code></pre><p>下面是一篇关于URL编码的文章，虽然没看太明白先放这里吧：</p><p><a href="http://www.ruanyifeng.com/blog/2010/02/url_encoding.htmlhttp://www.ruanyifeng.com/blog/2010/02/url_encoding.html" target="_blank" rel="noopener">http://www.ruanyifeng.com/blog/2010/02/url_encoding.htmlhttp://www.ruanyifeng.com/blog/2010/02/url_encoding.html</a></p>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> IE测试的问题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DOM学习笔记</title>
      <link href="/archives/d2914a2.html"/>
      <url>/archives/d2914a2.html</url>
      
        <content type="html"><![CDATA[<h2 id="DOM学习笔记"><a href="#DOM学习笔记" class="headerlink" title="DOM学习笔记"></a>DOM学习笔记</h2><h3 id="API的概念"><a href="#API的概念" class="headerlink" title="API的概念"></a>API的概念</h3><p>API（Application Programming Interface，应用程序编程接口）是一些预先定义好的函数，目的是提供应用程序与开发人员基于某软件或硬件得以访问一组例程的能力，而又无需访问源码，或理解内部工作机制的细节。</p><a id="more"></a><p>例程：例程的作用类似于函数，但含义更为丰富一些。例程是某个系统对外提供的功能接口或服务的集合。比如操作系统的API、服务等就是例程；Delphi或C++Builder提供的标准函数和库函数等也是例程。我们编写一个DLL的时候，里面的输出函数就是这个DLL的例程。</p><ul><li>任何开发语言都有自己的API</li><li>API的特征：输入和输出</li></ul><h3 id="Web-API的概念"><a href="#Web-API的概念" class="headerlink" title="Web API的概念"></a>Web API的概念</h3><p>浏览器提供的一套操作浏览器功能和页面元素的API(BOM和DOM)：此处的Web API特指浏览器提供的API(一组方法)</p><p>掌握常见的浏览器提供的API的调用方式：    <a href="https://developer.mozilla.org/zh-CN/docs/Web/API" target="_blank" rel="noopener">MDN-Web API</a></p><h3 id="JavaScript的组成"><a href="#JavaScript的组成" class="headerlink" title="JavaScript的组成"></a>JavaScript的组成</h3><p><img src="/medias/loading.gif" data-original="https://gitee.com/aurorapic/BlogPic/raw/master/img/jscontent.png" alt=""></p><h4 id="ECMAScript-JavaScript的核心"><a href="#ECMAScript-JavaScript的核心" class="headerlink" title="ECMAScript - JavaScript的核心"></a>ECMAScript - JavaScript的核心</h4><p>定义了javascript的语法规范</p><p>JavaScript的核心，描述了语言的基本语法和数据类型，ECMAScript是一套标准，定义了一种语言的标准与具体实现无关</p><h4 id="BOM-浏览器对象模型"><a href="#BOM-浏览器对象模型" class="headerlink" title="BOM - 浏览器对象模型"></a>BOM - 浏览器对象模型</h4><p>一套操作浏览器功能的API</p><p>通过BOM可以操作浏览器窗口，比如：弹出框、控制浏览器跳转、获取分辨率等</p><h4 id="DOM-文档对象模型"><a href="#DOM-文档对象模型" class="headerlink" title="DOM - 文档对象模型"></a>DOM - 文档对象模型</h4><p>一套操作页面元素的API</p><p>DOM可以把HTML看做是文档树，通过DOM提供的API可以对树上的节点进行操作</p><h3 id="DOM"><a href="#DOM" class="headerlink" title="DOM"></a>DOM</h3><h4 id="DOM的概念："><a href="#DOM的概念：" class="headerlink" title="DOM的概念："></a>DOM的概念：</h4><p>文档对象模型（Document Object Model,简称DOM），是W3C组织推荐 的处理可扩充标志语言的标准编程接口。在网页上，组织页面或文档的对象被组织在一个树形结构中，用来表示文档中对象的标准模型就称为DOM。</p><p>DOM又称文档树结构</p><p><img src="/medias/loading.gif" data-original="https://gitee.com/aurorapic/BlogPic/raw/master/img/DOMtree.png" alt=""></p><ul><li>文档：一个网页可以看做是一个文档</li><li>节点：文档中所有的内容都是节点（标签、属性、文本）</li><li>元素：网页中的标签</li><li>属性：标签的属性</li></ul><h3 id="DOM经常进行的操作"><a href="#DOM经常进行的操作" class="headerlink" title="DOM经常进行的操作"></a>DOM经常进行的操作</h3><ol><li>获取页面元素</li><li>动态创建元素</li><li>对元素进行操作（设置其属性或调用其方法）</li><li>事件（什么时机做什么操作）</li></ol><h3 id="获取页面元素"><a href="#获取页面元素" class="headerlink" title="获取页面元素"></a>获取页面元素</h3><p>为什么：我们想要操作页面上的某部分，需要先获取到该部分对应的元素，然后才能进行后续操作。</p><h4 id="根据id获取元素"><a href="#根据id获取元素" class="headerlink" title="根据id获取元素"></a>根据id获取元素</h4><p>var idObj = document.getElementById(“元素的id名”)；</p><p>返回id值对应的元素（单个）</p><h4 id="根据标签名获取元素"><a href="#根据标签名获取元素" class="headerlink" title="根据标签名获取元素"></a>根据标签名获取元素</h4><p>var spans = document.getElementsByTagName(“span”);</p><p>返回一个包含所有span标签的伪数组</p><h4 id="根据name属性值获取"><a href="#根据name属性值获取" class="headerlink" title="根据name属性值获取"></a>根据name属性值获取</h4><p>var inputs= document.getElementsByName(‘hobby’);</p><p>返回一个name属性值为hobby的伪数组</p><h4 id="根据类名获取元素"><a href="#根据类名获取元素" class="headerlink" title="根据类名获取元素"></a>根据类名获取元素</h4><p>var mains = document.getElementsByClassName(“main”);</p><p>返回一个类名为main的伪数组</p><h4 id="根据选择器获取元素"><a href="#根据选择器获取元素" class="headerlink" title="根据选择器获取元素"></a>根据选择器获取元素</h4><p>var text = document.querySelector(‘#text’);    这是根据id选择器获取元素</p><p>返回单个元素</p><p>var boxes = document.querySelectorAll(‘.box’);   这是根据类选择器获取元素</p><p>返回一个伪数组</p><h3 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h3><p>事件：触发-响应机制</p><h4 id="事件三要素："><a href="#事件三要素：" class="headerlink" title="事件三要素："></a>事件三要素：</h4><ol><li>事件源：触发事件的元素</li><li>事件类型：事件触发的方式（如鼠标点击）</li><li>事件处理程序：事件触发后要执行的代码（函数）</li></ol><h4 id="事件的基本使用"><a href="#事件的基本使用" class="headerlink" title="事件的基本使用"></a>事件的基本使用</h4><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">var</span> box <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'box'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>box<span class="token punctuation">.</span>onclick <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'代码会在box被点击后执行'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="案例："><a href="#案例：" class="headerlink" title="案例："></a>案例：</h4><p>点击按钮弹出对话框</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//先有按钮，才能获取，获取之后才能注册点击事件</span><span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"button"</span> value<span class="token operator">=</span><span class="token string">"按钮"</span> id<span class="token operator">=</span><span class="token string">"btn"</span><span class="token operator">></span><span class="token operator">&lt;</span>script<span class="token operator">></span>    <span class="token comment" spellcheck="true">//根据id属性的值从文档中获取这个元素</span>    <span class="token keyword">var</span> btnObj <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"btn"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//为当前这个按钮元素（对象），注册点击事件，添加事件处理函数（匿名函数）</span>    btnObj<span class="token punctuation">.</span>onclick <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//这是响应的事情</span>        <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"哎呀，我好帅啊"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="属性操作"><a href="#属性操作" class="headerlink" title="属性操作"></a>属性操作</h3><h4 id="基本标签属性操作"><a href="#基本标签属性操作" class="headerlink" title="基本标签属性操作"></a>基本标签属性操作</h4><p>href、title、id、src、className、width、height</p><p>案例：点击图片修改图片的宽和高</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>img src<span class="token operator">=</span><span class="token string">"images/1.jpg"</span> alt<span class="token operator">=</span><span class="token string">""</span> id<span class="token operator">=</span><span class="token string">"im"</span><span class="token operator">/</span><span class="token operator">></span><span class="token operator">&lt;</span>script<span class="token operator">></span>  <span class="token comment" spellcheck="true">//点击图片,修改自身的宽和高</span>  <span class="token keyword">var</span> imgObj <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"im"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  imgObj<span class="token punctuation">.</span>onclick <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>width <span class="token operator">=</span> <span class="token string">"200"</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>height <span class="token operator">=</span> <span class="token string">"300"</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="表单元素属性"><a href="#表单元素属性" class="headerlink" title="表单元素属性"></a>表单元素属性</h3><ul><li>value 用于大部分表单元素的内容获取(option除外)</li><li>type 可以获取input标签的类型(输入框或复选框等)</li><li>disabled 禁用属性</li><li>checked 复选框选中属性</li><li>selected 下拉菜单选中属性</li></ul><p>案例：检测密码是否是6-10位，如果不满足要求高亮显示文本框</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"text"</span> value<span class="token operator">=</span><span class="token string">""</span> id<span class="token operator">=</span><span class="token string">"txt"</span><span class="token operator">/</span><span class="token operator">></span><span class="token operator">&lt;</span>script<span class="token operator">></span>    <span class="token keyword">function</span> <span class="token function">my$</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">//获取文本框</span>  <span class="token function">my$</span><span class="token punctuation">(</span><span class="token string">"txt"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>onblur<span class="token operator">=</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//判断密码的长度</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>value<span class="token punctuation">.</span>length<span class="token operator">>=</span><span class="token number">6</span><span class="token operator">&amp;&amp;</span><span class="token keyword">this</span><span class="token punctuation">.</span>value<span class="token punctuation">.</span>length<span class="token operator">&lt;=</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>style<span class="token punctuation">.</span>backgroundColor<span class="token operator">=</span><span class="token string">"red"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>style<span class="token punctuation">.</span>backgroundColor<span class="token operator">=</span><span class="token string">"green"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="自定义属性操作"><a href="#自定义属性操作" class="headerlink" title="自定义属性操作"></a>自定义属性操作</h4><ul><li>getAttribute() 获取标签行内属性</li><li>setAttribute() 设置标签行内属性</li><li>removeAttribute() 移除标签行内属性</li><li>与element.属性的区别: 上述三个方法用于获取任意的行内属性</li></ul><p>//list[i].score=(i+1)*10;//此方式,自定义属性在DOM对象上,不在标签中</p><p>案例：自定义属性的设置和获取</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>body<span class="token operator">></span><span class="token operator">&lt;</span>ul id<span class="token operator">=</span><span class="token string">"uu"</span><span class="token operator">></span>  <span class="token operator">&lt;</span>li<span class="token operator">></span>小明<span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span>  <span class="token operator">&lt;</span>li<span class="token operator">></span>小王<span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span>  <span class="token operator">&lt;</span>li<span class="token operator">></span>小苏<span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span>  <span class="token operator">&lt;</span>li<span class="token operator">></span>小杰<span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span>  <span class="token operator">&lt;</span>li<span class="token operator">></span>小乔<span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>ul<span class="token operator">></span><span class="token operator">&lt;</span>script src<span class="token operator">=</span><span class="token string">"common.js"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span class="token operator">&lt;</span>script<span class="token operator">></span>   <span class="token comment" spellcheck="true">//获取所有的li标签,然后为每个标签中动态的添加自定义属性和值</span>  <span class="token comment" spellcheck="true">//点击的时候获取该标签的自定义属性的值</span>   <span class="token comment" spellcheck="true">//根据id获取ul标签,并且或者该标签中所有的li</span>  <span class="token keyword">var</span> list<span class="token operator">=</span><span class="token function">my$</span><span class="token punctuation">(</span><span class="token string">"uu"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">"li"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//循环遍历</span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>list<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//先为每个li添加自定义属性</span>    list<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">"score"</span><span class="token punctuation">,</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//点击每个li标签,显示对应的自定义属性值</span>    list<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>onclick<span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token function">alert</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token string">"score"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>body<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="样式操作"><a href="#样式操作" class="headerlink" title="样式操作"></a>样式操作</h4><p>使用style方式设置的样式显示在标签行内</p><p>注意：通过样式属性设置宽高、位置的属性类型是字符串，需要加上px</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">var</span> box <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'box'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>box<span class="token punctuation">.</span>style<span class="token punctuation">.</span>width <span class="token operator">=</span> <span class="token string">'100px'</span><span class="token punctuation">;</span>box<span class="token punctuation">.</span>style<span class="token punctuation">.</span>height <span class="token operator">=</span> <span class="token string">'100px'</span><span class="token punctuation">;</span>box<span class="token punctuation">.</span>style<span class="token punctuation">.</span>backgroundColor <span class="token operator">=</span> <span class="token string">'red'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="类名操作"><a href="#类名操作" class="headerlink" title="类名操作"></a>类名操作</h4><p>修改标签的className属性相当于直接修改标签的类名</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">var</span> box <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'box'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>box<span class="token punctuation">.</span>className <span class="token operator">=</span> <span class="token string">'clearfix'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="innerText和textCount"><a href="#innerText和textCount" class="headerlink" title="innerText和textCount"></a>innerText和textCount</h3><ul><li>设置标签中文本内容，使用textCount属性，谷歌、火狐支持，IE8不支持</li><li>设置标签中文本内容，使用innerText属性，谷歌、火狐、IE8都支持</li></ul><p>如果这个属性在浏览器中不支持，那么这个属性的类型就是undefined</p><p>判断这个属性的类型是不是undefined，就知道浏览器是否支持</p><p>兼容代码如下：</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script<span class="token operator">></span>    <span class="token comment" spellcheck="true">//设置任意的标签中间的任意文本内容</span>  <span class="token keyword">function</span> <span class="token function">setInnerText</span><span class="token punctuation">(</span>element<span class="token punctuation">,</span>text<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//判断浏览器是否支持这个属性</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> element<span class="token punctuation">.</span>textContent <span class="token operator">==</span><span class="token string">"undefined"</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//不支持</span>      element<span class="token punctuation">.</span>innerText<span class="token operator">=</span>text<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//支持这个属性</span>      element<span class="token punctuation">.</span>textContent<span class="token operator">=</span>text<span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//获取任意标签中间的文本内容</span>  <span class="token keyword">function</span> <span class="token function">getInnerText</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> element<span class="token punctuation">.</span>textContent<span class="token operator">==</span><span class="token string">"undefined"</span><span class="token punctuation">)</span><span class="token punctuation">{</span>     <span class="token keyword">return</span> element<span class="token punctuation">.</span>innerText<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>      <span class="token keyword">return</span> element<span class="token punctuation">.</span>textContent<span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">//测试</span>  <span class="token function">my$</span><span class="token punctuation">(</span><span class="token string">"btn"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>onclick<span class="token operator">=</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//console.log(getInnerText(my$("dv")));</span>    <span class="token function">setInnerText</span><span class="token punctuation">(</span><span class="token function">my$</span><span class="token punctuation">(</span><span class="token string">"dv"</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">"哈哈,我又变帅了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="innerText和innerHTML"><a href="#innerText和innerHTML" class="headerlink" title="innerText和innerHTML"></a>innerText和innerHTML</h3><p>设置：</p><ul><li>如果使用innerText主要是设置文本的,设置标签内容,是没有标签的效果的</li><li>innerHTML可以设置文本内容，主要是用来在标签中设置新的html标签，是有标签效果的</li></ul><p>获取：</p><ul><li>innerText可以获取标签中间的文本内容，但是标签中如果还有标签，那么最里面的标签的文本内容也能获取—–获取不到标签</li><li>innerHTML可以真正获取标签中的所有内容</li></ul><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>body<span class="token operator">></span><span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"button"</span> value<span class="token operator">=</span><span class="token string">"显示效果"</span> id<span class="token operator">=</span><span class="token string">"btn"</span><span class="token operator">/</span><span class="token operator">></span><span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"button"</span> value<span class="token operator">=</span><span class="token string">"显示效果获取"</span> id<span class="token operator">=</span><span class="token string">"btn2"</span><span class="token operator">/</span><span class="token operator">></span><span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"dv"</span><span class="token operator">></span>      这是div    <span class="token operator">&lt;</span>p<span class="token operator">></span>这是一个p<span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span>script<span class="token operator">></span>    <span class="token keyword">function</span> <span class="token function">my$</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>  <span class="token function">my$</span><span class="token punctuation">(</span><span class="token string">"btn"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>onclick<span class="token operator">=</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// my$("dv").innerText="哈哈";//设置文本</span>    <span class="token comment" spellcheck="true">//  my$("dv").innerText="&lt;p>这是一个p&lt;/p>";//设置html标签的代码</span>    <span class="token comment" spellcheck="true">// my$("dv").innerHTML="哈哈";</span>    <span class="token function">my$</span><span class="token punctuation">(</span><span class="token string">"dv"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>innerHTML<span class="token operator">=</span><span class="token string">"&lt;p>这是一个p&lt;/p>"</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//设置Html标签的</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//获取</span>  <span class="token function">my$</span><span class="token punctuation">(</span><span class="token string">"btn2"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>onclick<span class="token operator">=</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//可以获取标签中的文本内容</span>    <span class="token comment" spellcheck="true">//console.log(my$("dv").innerText);</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">my$</span><span class="token punctuation">(</span><span class="token string">"dv"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>innerHTML<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>body<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="节点的相关概念"><a href="#节点的相关概念" class="headerlink" title="节点的相关概念"></a>节点的相关概念</h3><p>文档：document</p><p>元素（element）：页面中所有的标签，元素（element）= 标签 = 对象</p><p>节点（node）：页面中所有的内容，包括标签，属性，文本（文字、换行、空格）</p><p>根元素：html标签</p><!-- more --><p>节点：能够获取任意一个标签中的元素</p><h4 id="节点的属性"><a href="#节点的属性" class="headerlink" title="节点的属性"></a>节点的属性</h4><p>节点的属性:可以用标签—-元素.出来，属性节点.出来，文本节点.点出来</p><ol><li>nodeType: 节点的类型：1—标签；2—-属性；3—-文本</li><li>nodeName：节点的名字：标签节点—大写的标签名字；属性节点—小写的标签名字；文本节点—#text</li><li>nodeValue:节点的值：标签节点—null，属性节点—属性值，文本节点—文本内容</li></ol><h4 id="12行代码–获取元素和节点"><a href="#12行代码–获取元素和节点" class="headerlink" title="12行代码–获取元素和节点"></a>12行代码–获取元素和节点</h4><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">var</span> ulObj<span class="token operator">=</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"uu"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//父级节点</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>ulObj<span class="token punctuation">.</span>parentNode<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//父级元素</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>ulObj<span class="token punctuation">.</span>parentElement<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//子节点</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>ulObj<span class="token punctuation">.</span>childNodes<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//子元素</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>ulObj<span class="token punctuation">.</span>children<span class="token punctuation">)</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"=============================================="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//第一个子节点</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>ulObj<span class="token punctuation">.</span>firstChild<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//IE8中是第一个子元素</span>  <span class="token comment" spellcheck="true">//第一个子元素</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>ulObj<span class="token punctuation">.</span>firstElementChild<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//IE8中不支持</span>  <span class="token comment" spellcheck="true">//最后一个子节点</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>ulObj<span class="token punctuation">.</span>lastChild<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//IE8中是第一个子元素</span>  <span class="token comment" spellcheck="true">//最后一个子元素</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>ulObj<span class="token punctuation">.</span>lastElementChild<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//IE8中不支持</span>  <span class="token comment" spellcheck="true">//某个元素的前一个兄弟节点</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">my$</span><span class="token punctuation">(</span><span class="token string">"three"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>previousSibling<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//IE8中是第一个子元素</span>  <span class="token comment" spellcheck="true">//某个元素的前一个兄弟元素</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">my$</span><span class="token punctuation">(</span><span class="token string">"three"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>previousElementSibling<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//IE8中不支持</span>  <span class="token comment" spellcheck="true">//某个元素的后一个兄弟节点</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">my$</span><span class="token punctuation">(</span><span class="token string">"three"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>nextSibling<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//IE8中是第一个子元素</span>  <span class="token comment" spellcheck="true">//某个元素的后一个兄弟元素</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">my$</span><span class="token punctuation">(</span><span class="token string">"three"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>nextElementSibling<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//IE8中不支持</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>总结：</strong></p><ul><li>凡是获取节点的代码在谷歌和火狐得到的都是—-相关的节点</li><li>凡是获取元素的代码在谷歌和火狐得到的都是—-相关的元素</li><li>除了父级节点和子级节点之外，凡是获取节点的代码在IE8中都是获取元素，不支持其他浏览器中获取元素的代码（结果是undefined）。</li></ul><p><strong>节点的兼容代码</strong></p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">/** * 获取父级元素中的第一个子元素 * @param element 父级元素 * @returns {*} 父级元素中的子级元素 */</span><span class="token keyword">function</span> <span class="token function">getFirstElement</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>element<span class="token punctuation">.</span>firstElementChild<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> element<span class="token punctuation">.</span>firstElementChild<span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token keyword">var</span> node <span class="token operator">=</span> element<span class="token punctuation">.</span>firstChild<span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>node <span class="token operator">&amp;&amp;</span> node<span class="token punctuation">.</span>nodeType <span class="token operator">!=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            node <span class="token operator">=</span> node<span class="token punctuation">.</span>nextSibling<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> node<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/** * 获取父级元素中的最后一个子元素 * @param element 父级元素 * @returns {*} 最后一个子元素 */</span><span class="token keyword">function</span> <span class="token function">getLastElement</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>element<span class="token punctuation">.</span>lastElementChild<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> element<span class="token punctuation">.</span>lastElementChild<span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token keyword">var</span> node <span class="token operator">=</span> element<span class="token punctuation">.</span>lastChild<span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>node <span class="token operator">&amp;&amp;</span> node<span class="token punctuation">.</span>nodeType <span class="token operator">!=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            node <span class="token operator">=</span> node<span class="token punctuation">.</span>previousSibling<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> node<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/** * 获取某个元素的前一个兄弟元素 * @param element 某个元素 * @returns {*} 前一个兄弟元素 */</span><span class="token keyword">function</span> <span class="token function">getPreviousElement</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>element<span class="token punctuation">.</span>previousElementSibling<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> element<span class="token punctuation">.</span>previousElementSibling    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token keyword">var</span> node <span class="token operator">=</span> element<span class="token punctuation">.</span>previousSibling<span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>node <span class="token operator">&amp;&amp;</span> node<span class="token punctuation">.</span>nodeType <span class="token operator">!=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            node <span class="token operator">=</span> node<span class="token punctuation">.</span>previousSibling<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> node<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/** * 获取某个元素的后一个兄弟元素 * @param element 某个元素 * @returns {*} 后一个兄弟元素 */</span><span class="token keyword">function</span> <span class="token function">getNextElement</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>element<span class="token punctuation">.</span>nextElementSibling<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> element<span class="token punctuation">.</span>nextElementSibling    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token keyword">var</span> node <span class="token operator">=</span> element<span class="token punctuation">.</span>nextSibling<span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>node <span class="token operator">&amp;&amp;</span> node<span class="token punctuation">.</span>nodeType <span class="token operator">!=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            node <span class="token operator">=</span> node<span class="token punctuation">.</span>nextSibling<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> node<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/** * 获取某个元素的所有兄弟元素 * @param element 某个元素 * @returns {Array} 兄弟元素 */</span><span class="token keyword">function</span> <span class="token function">getSiblings</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>element<span class="token punctuation">)</span><span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> elements <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> ele <span class="token operator">=</span> element<span class="token punctuation">.</span>previousSibling<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>ele<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>ele<span class="token punctuation">.</span>nodeType <span class="token operator">===</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            elements<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>ele<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        ele <span class="token operator">=</span> ele<span class="token punctuation">.</span>previousSibling<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    ele <span class="token operator">=</span> element<span class="token punctuation">.</span>nextSibling<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>ele<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>ele<span class="token punctuation">.</span>nodeType <span class="token operator">===</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            elements<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>ele<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        ele <span class="token operator">=</span> ele<span class="token punctuation">.</span>nextSibling<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> elements<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="创建元素"><a href="#创建元素" class="headerlink" title="创建元素"></a>创建元素</h3><p>创建元素：是为了提高用户体验</p><!-- more --><p><strong>元素创建的三种方式</strong></p><ol><li>document.write(“标签代码及内容”);</li><li>对象.innerHTML=”标签及代码”;</li><li>document.createElement(“标签及内容”);</li></ol><h4 id="第一种方式创建元素"><a href="#第一种方式创建元素" class="headerlink" title="第一种方式创建元素"></a>第一种方式创建元素</h4><p>document.write(“”);</p><pre class="line-numbers language-javascript"><code class="language-javascript"> <span class="token comment" spellcheck="true">//document.write("标签代码及内容");</span>  document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"btn"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>onclick<span class="token operator">=</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"&lt;p>这是一个p&lt;/p>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>缺陷</strong></p><p>如果是在页面加载完毕之后使用这种方式创建元素，那么页面上已经存在的元素会被覆盖掉</p><h4 id="第二种方式创建元素"><a href="#第二种方式创建元素" class="headerlink" title="第二种方式创建元素"></a>第二种方式创建元素</h4><p>对象.innerHTML = “标签代码及内容”;</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script<span class="token operator">></span>  <span class="token comment" spellcheck="true">//点击按钮,在div中创建一个p标签</span>  <span class="token comment" spellcheck="true">//第二种方式创建元素: 对象.innerHTML="标签代码及内容";</span>  document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"btn"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>onclick<span class="token operator">=</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"btn"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>innerHTML<span class="token operator">=</span><span class="token string">"&lt;p>窗前明月光,疑是地上霜,举头望明月,低头思故乡&lt;/p>"</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="第三种放肆创建元素"><a href="#第三种放肆创建元素" class="headerlink" title="第三种放肆创建元素"></a>第三种放肆创建元素</h4><p>1.创建元素—document.createElment(“标签代码及内容”);</p><p>2.把元素追加到父级元素中，父级标签.appendChild(创建的元素);</p><pre class="line-numbers language-javascript"><code class="language-javascript"> <span class="token comment" spellcheck="true">//创建元素</span>  <span class="token comment" spellcheck="true">//document.createElement("标签名字");对象</span>  <span class="token comment" spellcheck="true">//把元素追加到父级元素中</span>  <span class="token comment" spellcheck="true">//点击按钮,在div中创建一个p</span>   document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"btn"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>onclick <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//创建元素的</span>    <span class="token keyword">var</span> pObj <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">"p"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    pObj<span class="token punctuation">.</span>innerText <span class="token operator">=</span> <span class="token string">"这是一个p"</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//把创建后的子元素追加到父级元素中</span>     document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"dv"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>pObj<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="只创建一个元素"><a href="#只创建一个元素" class="headerlink" title="只创建一个元素"></a>只创建一个元素</h4><p>有则删除，无则创建</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//先判断有没有,有就删除,然后再创建</span>  <span class="token function">my$</span><span class="token punctuation">(</span><span class="token string">"btn"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>onclick<span class="token operator">=</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//判断,div中有没有这个按钮,有就删除</span>    <span class="token comment" spellcheck="true">//判断这个按钮的子元素是否存在</span>   <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">my$</span><span class="token punctuation">(</span><span class="token string">"btn2"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//如果为true就有</span>     <span class="token function">my$</span><span class="token punctuation">(</span><span class="token string">"dv"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">removeChild</span><span class="token punctuation">(</span><span class="token function">my$</span><span class="token punctuation">(</span><span class="token string">"btn2"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>    <span class="token keyword">var</span> obj<span class="token operator">=</span>document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">"input"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    obj<span class="token punctuation">.</span>type<span class="token operator">=</span><span class="token string">"button"</span><span class="token punctuation">;</span>    obj<span class="token punctuation">.</span>value<span class="token operator">=</span><span class="token string">"按钮"</span><span class="token punctuation">;</span>       obj<span class="token punctuation">.</span>id<span class="token operator">=</span><span class="token string">"btn2"</span><span class="token punctuation">;</span>       <span class="token function">my$</span><span class="token punctuation">(</span><span class="token string">"dv"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token function">my$</span><span class="token punctuation">(</span><span class="token string">"btn"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>onclick<span class="token operator">=</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//判断,div中有没有这个按钮,有就删除</span>    <span class="token comment" spellcheck="true">//判断这个按钮的子元素是否存在</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">my$</span><span class="token punctuation">(</span><span class="token string">"btn2"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">var</span> obj<span class="token operator">=</span>document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">"input"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      obj<span class="token punctuation">.</span>type<span class="token operator">=</span><span class="token string">"button"</span><span class="token punctuation">;</span>      obj<span class="token punctuation">.</span>value<span class="token operator">=</span><span class="token string">"按钮"</span><span class="token punctuation">;</span>      obj<span class="token punctuation">.</span>id<span class="token operator">=</span><span class="token string">"btn2"</span><span class="token punctuation">;</span>      <span class="token function">my$</span><span class="token punctuation">(</span><span class="token string">"dv"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="事件详解"><a href="#事件详解" class="headerlink" title="事件详解"></a>事件详解</h3><p>绑定事件的方法：addEventListener();  attachEvent();</p><p>区别：</p><ol><li>方法名不一样</li><li>参数个数不一样：addEventListener()三个参数，attachEvent两个参数</li><li>addEventListener–谷歌、火狐、IE11支持，IE8不支持；attachEvent–谷歌火狐 IE11不支持，IE8支持</li><li>this不同，addEventListener中的this是当前绑定事件的对象，attachEvent中的this是window</li><li>addEventListener中事件的类型（事件的名字），没有on；attachEvent中的事件的类型（事件的名字）有on</li></ol><h4 id="兼容代码"><a href="#兼容代码" class="headerlink" title="兼容代码"></a>兼容代码</h4><pre class="line-numbers language-javascript"><code class="language-javascript">  <span class="token comment" spellcheck="true">//为任意元素.绑定任意的事件, 任意的元素,事件的类型,事件处理函数</span>  <span class="token keyword">function</span> <span class="token function">addEventListener</span><span class="token punctuation">(</span>element<span class="token punctuation">,</span>type<span class="token punctuation">,</span>fn<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//判断浏览器是否支持这个方法</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>element<span class="token punctuation">.</span>addEventListener<span class="token punctuation">)</span><span class="token punctuation">{</span>      element<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span>type<span class="token punctuation">,</span>fn<span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>element<span class="token punctuation">.</span>attachEvent<span class="token punctuation">)</span><span class="token punctuation">{</span>      element<span class="token punctuation">.</span><span class="token function">attachEvent</span><span class="token punctuation">(</span><span class="token string">"on"</span><span class="token operator">+</span>type<span class="token punctuation">,</span>fn<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>      element<span class="token punctuation">[</span><span class="token string">"on"</span><span class="token operator">+</span>type<span class="token punctuation">]</span><span class="token operator">=</span>fn<span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token comment" spellcheck="true">//解绑事件的兼容</span>  <span class="token comment" spellcheck="true">//为任意的一个元素,解绑对应的事件</span>  <span class="token keyword">function</span> <span class="token function">removeEventListener</span><span class="token punctuation">(</span>element<span class="token punctuation">,</span>type<span class="token punctuation">,</span>fnName<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>element<span class="token punctuation">.</span>removeEventListener<span class="token punctuation">)</span><span class="token punctuation">{</span>      element<span class="token punctuation">.</span><span class="token function">removeEventListener</span><span class="token punctuation">(</span>type<span class="token punctuation">,</span>fnName<span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>element<span class="token punctuation">.</span>detachEvent<span class="token punctuation">)</span><span class="token punctuation">{</span>      element<span class="token punctuation">.</span><span class="token function">detachEvent</span><span class="token punctuation">(</span><span class="token string">"on"</span><span class="token operator">+</span>type<span class="token punctuation">,</span>fnName<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>      element<span class="token punctuation">[</span><span class="token string">"on"</span><span class="token operator">+</span>type<span class="token punctuation">]</span><span class="token operator">=</span><span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="事件的三个阶段"><a href="#事件的三个阶段" class="headerlink" title="事件的三个阶段"></a>事件的三个阶段</h4><ol><li><p>事件捕获阶段—1</p></li><li><p>事件目标阶段—2</p></li><li><p>事件冒泡阶段—3—-默认冒泡阶段，从里向外</p><p>事件对象.eventPhase属性可以查看事件触发时所处的阶段</p></li></ol><h3 id="阻止事件冒泡"><a href="#阻止事件冒泡" class="headerlink" title="阻止事件冒泡"></a>阻止事件冒泡</h3><ul><li>标准方式 event.stopPropagation();</li><li>IE低版本 event.cancelBubble = true; 标准中已废弃</li></ul><h3 id="事件对象的属性和方法"><a href="#事件对象的属性和方法" class="headerlink" title="事件对象的属性和方法"></a>事件对象的属性和方法</h3><ul><li>event.type 获取事件类型</li><li>clientX/clientY     所有浏览器都支持，窗口位置</li><li>pageX/pageY       IE8以前不支持，页面位置</li><li>event.target || event.srcElement 用于获取触发事件的元素</li><li>event.preventDefault() 取消默认行为</li></ul><h3 id="BOM"><a href="#BOM" class="headerlink" title="BOM"></a>BOM</h3><p>BOM(Browser Object Model) 是指浏览器对象模型，浏览器对象模型提供了独立于内容的、可以与浏览器窗口进行互动的对象结构。BOM由多个对象组成，其中代表浏览器窗口的Window对象是BOM的顶层对象，其他对象都是该对象的子对象。</p><h4 id="BOM的顶级对象window"><a href="#BOM的顶级对象window" class="headerlink" title="BOM的顶级对象window"></a>BOM的顶级对象window</h4><p>window是浏览器的顶级对象，当调用window下的属性和方法时，可以省略window；document从属于window<br>注意：window下一个特殊的属性 window.name，值为空</p><h4 id="页面加载的事件"><a href="#页面加载的事件" class="headerlink" title="页面加载的事件"></a>页面加载的事件</h4><ul><li><strong style="color:red">onload—页面加载完成之后执行</strong></li><li>onunload—页面关闭后执行</li><li>onbeforeload—页面关闭之前执行</li></ul><h4 id="定时器"><a href="#定时器" class="headerlink" title="定时器"></a>定时器</h4><p><strong>setTimeout()和clearTimeout()</strong></p><p>在指定的毫秒数到达之后执行指定的函数，只执行一次</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 创建一个定时器，1000毫秒后执行，返回定时器的标示</span><span class="token keyword">var</span> timerId <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Hello World'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 取消定时器的执行</span><span class="token function">clearTimeout</span><span class="token punctuation">(</span>timerId<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>setInterval()和clearInterval()</strong></p><p>定时调用的函数，可以按照给定的时间(单位毫秒)周期调用函数</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 创建一个定时器，每隔1秒调用一次</span><span class="token keyword">var</span> timerId <span class="token operator">=</span> <span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> date <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>date<span class="token punctuation">.</span><span class="token function">toLocaleTimeString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 取消定时器的执行</span><span class="token function">clearInterval</span><span class="token punctuation">(</span>timerId<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="location对象"><a href="#location对象" class="headerlink" title="location对象"></a>location对象</h3><p>location对象是window对象下的一个属性，可以获取或者设置浏览器地址栏的URL，可以省略window对象</p><p><strong>URL（Uniform Resource Locator,统一资源定位符）的组成</strong></p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//地址栏上#及后面的内容</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>window<span class="token punctuation">.</span>location<span class="token punctuation">.</span>hash<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//主机名及端口号</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>window<span class="token punctuation">.</span>location<span class="token punctuation">.</span>host<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//主机名</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>window<span class="token punctuation">.</span>location<span class="token punctuation">.</span>hostname<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//文件的路径---相对路径</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>window<span class="token punctuation">.</span>location<span class="token punctuation">.</span>pathname<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//端口号</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>window<span class="token punctuation">.</span>location<span class="token punctuation">.</span>port<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//协议</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>window<span class="token punctuation">.</span>location<span class="token punctuation">.</span>protocol<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//搜索的内容</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>window<span class="token punctuation">.</span>location<span class="token punctuation">.</span>search<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>location的一些属性和方法：</p><pre class="line-numbers language-javascript"><code class="language-javascript">    onload<span class="token operator">=</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"btn"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>onclick<span class="token operator">=</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//设置跳转的页面的地址</span>       <span class="token comment" spellcheck="true">//location.href="http://www.jd.com";//属性</span>       <span class="token comment" spellcheck="true">//location.assign("http://www.jd.com");//方法</span>        <span class="token comment" spellcheck="true">//location.reload();//重新加载--刷新</span>        <span class="token comment" spellcheck="true">//location.replace("http://www.jd.com");//没有历史记录</span>      <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="history对象"><a href="#history对象" class="headerlink" title="history对象"></a>history对象</h3><ul><li>back()</li><li>forward()</li><li>go()</li></ul><h3 id="navigator对象"><a href="#navigator对象" class="headerlink" title="navigator对象"></a>navigator对象</h3><ul><li>userAgent</li></ul><p>通过userAgent可以判断用户浏览器的类型</p><pre><code>console.log(window.navigator.userAgent);</code></pre><ul><li>platform</li></ul><p>通过platform可以判断浏览器所在的系统平台类型.</p><pre class="line-numbers language-javascript"><code class="language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>windodw<span class="token punctuation">.</span>navigator<span class="token punctuation">.</span>platform<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>js-学习案例：栏目切换</title>
      <link href="/archives/163a2d57.html"/>
      <url>/archives/163a2d57.html</url>
      
        <content type="html"><![CDATA[<h2 id="tags"><a href="#tags" class="headerlink" title="tags:"></a>tags:</h2><p>开始记录学习的经过，今天做了一个tab栏目切换的小功能，整了很久才做出来，最后还想实现背景切换，但是没能做出来，今天先这样吧</p><a id="more"></a><p>仿照爱词霸的搜索，用js实现切换<br><img src="/medias/loading.gif" data-original="https://gitee.com/aurorapic/BlogPic/raw/master/img/tab1.png" alt=""></p><pre><code>&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt;    &lt;meta charset=&quot;UTF-8&quot;&gt;    &lt;title&gt;搜索框切换功能&lt;/title&gt;    &lt;style&gt;        body {            background-image: url(&quot;banner-1x.png&quot;);        }        * {            margin: 0;            padding: 0;            box-sizing: border-box;        }        .search {            margin: 100px auto;            width: 680px;            position: relative;        }        .hd span {            display: inline-block;            width: 88px;            height: 36px;            background: rgba(0,0,0,.3);            font-size: 16px;            font-weight: 700;            cursor: pointer;            text-align: center;            line-height: 40px;        }        .hd span.current{            background-color: #fff;        }        input {            width: 600px;            height: 56px;            outline: none;            padding-left: 20px;            color: gray;            border: none;            display: none;            font-size: 18px;        }        input.current {            display: block;        }        .sea-click {            width: 80px;            height: 56px;            text-align: center;            line-height: 56px;            position: absolute;            right: 0;            bottom:0;            background-color: #383838;            color: #fff;            cursor: pointer;        }    &lt;/style&gt;&lt;/head&gt;&lt;body&gt;&lt;div class=&quot;search&quot; id=&quot;search&quot;&gt;    &lt;div class=&quot;hd&quot;&gt;        &lt;span class=&quot;current&quot;&gt;查词&lt;/span&gt;        &lt;span&gt;翻译&lt;/span&gt;    &lt;/div&gt;    &lt;div class=&quot;bd&quot;&gt;        &lt;input type=&quot;text&quot; value=&quot;请输入你要查询的单词&quot; id=&quot;search_btn&quot;  class=&quot;current&quot;/&gt;        &lt;input type=&quot;text&quot; value=&quot;请输入你要查询的短语或句子&quot; id=&quot;search_btn1&quot;  /&gt;        &lt;div class=&quot;sea-click&quot;&gt;搜索&lt;/div&gt;    &lt;/div&gt;&lt;/div&gt;&lt;script&gt;    //先获取最外层的div    var search = document.getElementById(&quot;search&quot;);    //然后获取里面的第一个div    var hd = search.getElementsByTagName(&quot;div&quot;)[0];    //获取里面的第二个div    var bd = search.getElementsByTagName(&quot;div&quot;)[1];    //获取第一个div中所有的span标签    var spans = hd.getElementsByTagName(&quot;span&quot;);    //获取下方搜索框中的input标签    var inputs = bd.getElementsByTagName(&quot;input&quot;);    //循环遍历所有的span标签，并注册点击事件    for (var i = 0; i &lt; spans.length; i++) {        //首先将span中的索引值存起来        spans[i].setAttribute(&quot;index&quot;,i);        //为每一个span注册点击事件        spans[i].onclick = function () {            //清除所有的span的类样式            for (var j = 0; j &lt; spans.length; j++) {                spans[j].removeAttribute(&quot;class&quot;);            }            //给当前的span对象设置类样式            this.className=&quot;current&quot;;            //获取当前span对象的索引值            var num = this.getAttribute(&quot;index&quot;);            //清除所有的input的类样式            for (var k = 0; k &lt; inputs.length; k++) {                inputs[k].removeAttribute(&quot;class&quot;);            }            //当前span对应的input标签设置类样式            inputs[num].className = &quot;current&quot;;        };    }    for (var i = 0; i &lt; inputs.length; i++) {        //注册获取焦点的点击事件        inputs[i].onfocus = function () {            //判断当前对象的value值            if (this.value == &quot;请输入你要查询的单词&quot; || &quot;请输入你要查询的短语或句子&quot;){                this.value = &quot;&quot;;                this.style.color=&quot;black&quot;;            }        };        //鼠标离开后的事件        inputs[i].onblur = function () {            //判断id值，设置value值            if (this.id == &quot;search_btn&quot;){                this.value = &quot;请输入你要查询的单词&quot;;                this.style.color=&quot;gray&quot;;            }else {                this.value = &quot;请输入你要查询的短语或句子&quot;;                this.style.color=&quot;gray&quot;;            }        };    }&lt;/script&gt;&lt;/body&gt;&lt;/html&gt;</code></pre><p>哎，整了一晚上，一开始就被布局给拦住了，css很多竟然又忘了。。爱词霸中查词和翻译那块是梯形，我也找到了一些做梯形的方法，可是在设置样式的时候总是出现问题，最后也放弃了继续深究，，只用普通的矩形来替代，先这样吧，整了一晚上才怎出个这么个玩意儿。。</p><p>但是不管怎么说也算是大概整明白排他功能。刚开始内容比较基础，但是觉得也可能比较重要，就先记录下来吧。</p>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>博客首页文章截断</title>
      <link href="/archives/66d1dd7.html"/>
      <url>/archives/66d1dd7.html</url>
      
        <content type="html"><![CDATA[<p>在文章中加入 <code>&lt;!-- more --&gt;</code> 就会自动截断文章内容，后面的文章内容不再自动显示。</p><a id="more"></a><p>也有需要配置config.yml文件的</p><pre><code># Automatically Excerpt. Not recommend.# Please use &lt;!-- more --&gt; in the post to control excerpt accurately.auto_excerpt:  enable: false  length: 150</code></pre><p>将false设置为true，然后自己在文章中的合适的位置设置<code>&lt;!-- more --&gt;</code></p><p>参考文章：<br><a href="https://blog.csdn.net/lewky_liu/article/details/81277337" target="_blank" rel="noopener">https://blog.csdn.net/lewky_liu/article/details/81277337</a><br><a href="https://blog.csdn.net/qq_32337109/article/details/78755729" target="_blank" rel="noopener">https://blog.csdn.net/qq_32337109/article/details/78755729</a></p>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>hexo博客之插入图片</title>
      <link href="/archives/b07c3b86.html"/>
      <url>/archives/b07c3b86.html</url>
      
        <content type="html"><![CDATA[<p>在博客中插入图片是一个不可或缺的功能，下面是我搭建博客过程中实现插入图片的方法。</p><a id="more"></a><h4 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h4><p>首先修改根目录下的config.yml文件中的post_asset_folder将false为true。<br>如下图所示：<br><img src="/medias/loading.gif" data-original="https://gitee.com/aurorapic/BlogPic/raw/master/img/pasted-0.png" alt=""></p><h4 id="插件安装与配置"><a href="#插件安装与配置" class="headerlink" title="插件安装与配置"></a>插件安装与配置</h4><p>先安装一个图片转换的插件,打开本地博客根目录，在git bash here 中输入</p><pre><code>npm install hexo-admin-image --save</code></pre><p><strong>注意</strong></p><p>这个插件的内容需要修改，不然可能导致图片显示不出来，最开始没有注意到，因此图片一直都显示不出来，后面才找到这个解决办法。</p><p>打开/node_modules/hexo-asset-image/index.js，将内容更换为下面的代码：</p><pre><code>&#39;use strict&#39;;var cheerio = require(&#39;cheerio&#39;);// http://stackoverflow.com/questions/14480345/how-to-get-the-nth-occurrence-in-a-stringfunction getPosition(str, m, i) {  return str.split(m, i).join(m).length;}var version = String(hexo.version).split(&#39;.&#39;);hexo.extend.filter.register(&#39;after_post_render&#39;, function(data){  var config = hexo.config;  if(config.post_asset_folder){        var link = data.permalink;    if(version.length &gt; 0 &amp;&amp; Number(version[0]) == 3)       var beginPos = getPosition(link, &#39;/&#39;, 1) + 1;    else       var beginPos = getPosition(link, &#39;/&#39;, 3) + 1;    // In hexo 3.1.1, the permalink of &quot;about&quot; page is like &quot;.../about/index.html&quot;.    var endPos = link.lastIndexOf(&#39;/&#39;) + 1;    link = link.substring(beginPos, endPos);    var toprocess = [&#39;excerpt&#39;, &#39;more&#39;, &#39;content&#39;];    for(var i = 0; i &lt; toprocess.length; i++){      var key = toprocess[i];      var $ = cheerio.load(data[key], {        ignoreWhitespace: false,        xmlMode: false,        lowerCaseTags: false,        decodeEntities: false      });      $(&#39;img&#39;).each(function(){        if ($(this).attr(&#39;src&#39;)){            // For windows style path, we replace &#39;\&#39; to &#39;/&#39;.            var src = $(this).attr(&#39;src&#39;).replace(&#39;\\&#39;, &#39;/&#39;);            if(!/http[s]*.*|\/\/.*/.test(src) &amp;&amp;               !/^\s*\//.test(src)) {              // For &quot;about&quot; page, the first part of &quot;src&quot; can&#39;t be removed.              // In addition, to support multi-level local directory.              var linkArray = link.split(&#39;/&#39;).filter(function(elem){                return elem != &#39;&#39;;              });              var srcArray = src.split(&#39;/&#39;).filter(function(elem){                return elem != &#39;&#39; &amp;&amp; elem != &#39;.&#39;;              });              if(srcArray.length &gt; 1)                srcArray.shift();              src = srcArray.join(&#39;/&#39;);              $(this).attr(&#39;src&#39;, config.root + link + src);              console.info&amp;&amp;console.info(&quot;update link as:--&gt;&quot;+config.root + link + src);            }        }else{            console.info&amp;&amp;console.info(&quot;no src attr, skipped...&quot;);            console.info&amp;&amp;console.info($(this));        }      });      data[key] = $.html();    }  }});</code></pre><h4 id="插入图片"><a href="#插入图片" class="headerlink" title="插入图片"></a>插入图片</h4><p>在博客根目录下，git bash here 中输入 <code>hexo new &quot;文章名&quot;</code> 然后在source/post目录下会生成一个 文章名.md 文件和一个与文章同名的文件夹，可以直接将想要上传的图片放到该文件夹里面，然后在.md文件中可以直接引用，如下：</p><pre><code>    ![图片的替换文字][文件夹名/xxx.jpg]</code></pre><p>因为博客名与文件名一直，直接引用相对路径就可以了。</p><p>然后</p><pre><code>    hexo clean   hexo g -d</code></pre><p>就部署到github上面了。</p>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博客插入图片 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
