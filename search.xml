<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>js-学习案例：栏目切换</title>
    <url>/2019/11/07/js-%E5%AD%A6%E4%B9%A0%E6%A1%88%E4%BE%8B%EF%BC%9A%E6%A0%8F%E7%9B%AE%E5%88%87%E6%8D%A2/</url>
    <content><![CDATA[<p>开始记录学习的经过，今天做了一个tab栏目切换的小功能，整了很久才做出来，最后还想实现背景切换，但是没能做出来，今天先这样吧</p>
<a id="more"></a>

<p>仿照爱词霸的搜索，用js实现切换<br><img src="/2019/11/07/js-%E5%AD%A6%E4%B9%A0%E6%A1%88%E4%BE%8B%EF%BC%9A%E6%A0%8F%E7%9B%AE%E5%88%87%E6%8D%A2/pasted-0.png" alt="结果"></p>
<div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;搜索框切换功能&lt;/title&gt;</span><br><span class="line">    &lt;style&gt;</span><br><span class="line">        body &#123;</span><br><span class="line">            background-image: url(&quot;banner-1x.png&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        * &#123;</span><br><span class="line">            margin: 0;</span><br><span class="line">            padding: 0;</span><br><span class="line">            box-sizing: border-box;</span><br><span class="line">        &#125;</span><br><span class="line">        .search &#123;</span><br><span class="line">            margin: 100px auto;</span><br><span class="line">            width: 680px;</span><br><span class="line">            position: relative;</span><br><span class="line">        &#125;</span><br><span class="line">        .hd span &#123;</span><br><span class="line">            display: inline-block;</span><br><span class="line">            width: 88px;</span><br><span class="line">            height: 36px;</span><br><span class="line">            background: rgba(0,0,0,.3);</span><br><span class="line">            font-size: 16px;</span><br><span class="line">            font-weight: 700;</span><br><span class="line">            cursor: pointer;</span><br><span class="line">            text-align: center;</span><br><span class="line">            line-height: 40px;</span><br><span class="line">        &#125;</span><br><span class="line">        .hd span.current&#123;</span><br><span class="line">            background-color: #fff;</span><br><span class="line">        &#125;</span><br><span class="line">        input &#123;</span><br><span class="line">            width: 600px;</span><br><span class="line">            height: 56px;</span><br><span class="line">            outline: none;</span><br><span class="line">            padding-left: 20px;</span><br><span class="line">            color: gray;</span><br><span class="line">            border: none;</span><br><span class="line">            display: none;</span><br><span class="line">            font-size: 18px;</span><br><span class="line">        &#125;</span><br><span class="line">        input.current &#123;</span><br><span class="line">            display: block;</span><br><span class="line">        &#125;</span><br><span class="line">        .sea-click &#123;</span><br><span class="line">            width: 80px;</span><br><span class="line">            height: 56px;</span><br><span class="line">            text-align: center;</span><br><span class="line">            line-height: 56px;</span><br><span class="line">            position: absolute;</span><br><span class="line">            right: 0;</span><br><span class="line">            bottom:0;</span><br><span class="line">            background-color: #383838;</span><br><span class="line">            color: #fff;</span><br><span class="line">            cursor: pointer;</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div class=&quot;search&quot; id=&quot;search&quot;&gt;</span><br><span class="line">    &lt;div class=&quot;hd&quot;&gt;</span><br><span class="line">        &lt;span class=&quot;current&quot;&gt;查词&lt;/span&gt;</span><br><span class="line">        &lt;span&gt;翻译&lt;/span&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;div class=&quot;bd&quot;&gt;</span><br><span class="line">        &lt;input type=&quot;text&quot; value=&quot;请输入你要查询的单词&quot; id=&quot;search_btn&quot;  class=&quot;current&quot;/&gt;</span><br><span class="line">        &lt;input type=&quot;text&quot; value=&quot;请输入你要查询的短语或句子&quot; id=&quot;search_btn1&quot;  /&gt;</span><br><span class="line">        &lt;div class=&quot;sea-click&quot;&gt;搜索&lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    //先获取最外层的div</span><br><span class="line">    var search = document.getElementById(&quot;search&quot;);</span><br><span class="line">    //然后获取里面的第一个div</span><br><span class="line">    var hd = search.getElementsByTagName(&quot;div&quot;)[0];</span><br><span class="line">    //获取里面的第二个div</span><br><span class="line">    var bd = search.getElementsByTagName(&quot;div&quot;)[1];</span><br><span class="line">    //获取第一个div中所有的span标签</span><br><span class="line">    var spans = hd.getElementsByTagName(&quot;span&quot;);</span><br><span class="line">    //获取下方搜索框中的input标签</span><br><span class="line">    var inputs = bd.getElementsByTagName(&quot;input&quot;);</span><br><span class="line"></span><br><span class="line">    //循环遍历所有的span标签，并注册点击事件</span><br><span class="line">    for (var i = 0; i &lt; spans.length; i++) &#123;</span><br><span class="line">        //首先将span中的索引值存起来</span><br><span class="line">        spans[i].setAttribute(&quot;index&quot;,i);</span><br><span class="line">        //为每一个span注册点击事件</span><br><span class="line">        spans[i].onclick = function () &#123;</span><br><span class="line">            //清除所有的span的类样式</span><br><span class="line">            for (var j = 0; j &lt; spans.length; j++) &#123;</span><br><span class="line">                spans[j].removeAttribute(&quot;class&quot;);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            //给当前的span对象设置类样式</span><br><span class="line">            this.className=&quot;current&quot;;</span><br><span class="line">            //获取当前span对象的索引值</span><br><span class="line">            var num = this.getAttribute(&quot;index&quot;);</span><br><span class="line">            //清除所有的input的类样式</span><br><span class="line">            for (var k = 0; k &lt; inputs.length; k++) &#123;</span><br><span class="line">                inputs[k].removeAttribute(&quot;class&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">            //当前span对应的input标签设置类样式</span><br><span class="line">            inputs[num].className = &quot;current&quot;;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    for (var i = 0; i &lt; inputs.length; i++) &#123;</span><br><span class="line">        //注册获取焦点的点击事件</span><br><span class="line">        inputs[i].onfocus = function () &#123;</span><br><span class="line">            //判断当前对象的value值</span><br><span class="line">            if (this.value == &quot;请输入你要查询的单词&quot; || &quot;请输入你要查询的短语或句子&quot;)&#123;</span><br><span class="line">                this.value = &quot;&quot;;</span><br><span class="line">                this.style.color=&quot;black&quot;;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        //鼠标离开后的事件</span><br><span class="line">        inputs[i].onblur = function () &#123;</span><br><span class="line">            //判断id值，设置value值</span><br><span class="line">            if (this.id == &quot;search_btn&quot;)&#123;</span><br><span class="line">                this.value = &quot;请输入你要查询的单词&quot;;</span><br><span class="line">                this.style.color=&quot;gray&quot;;</span><br><span class="line"></span><br><span class="line">            &#125;else &#123;</span><br><span class="line">                this.value = &quot;请输入你要查询的短语或句子&quot;;</span><br><span class="line">                this.style.color=&quot;gray&quot;;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure></div>
<p>哎，整了一晚上，一开始就被布局给拦住了，css很多竟然又忘了。。爱词霸中查词和翻译那块是梯形，我也找到了一些做梯形的方法，可是在设置样式的时候总是出现问题，最后也放弃了继续深究，，只用普通的矩形来替代，先这样吧，整了一晚上才怎出个这么个玩意儿。。</p>
<p>但是不管怎么说也算是大概整明白排他功能。刚开始内容比较基础，但是觉得也可能比较重要，就先记录下来吧。</p>
]]></content>
  </entry>
  <entry>
    <title>博客首页文章截断</title>
    <url>/2019/11/06/%E5%AE%A2%E9%A6%96%E9%A1%B5%E6%96%87%E7%AB%A0%E6%88%AA%E6%96%AD/</url>
    <content><![CDATA[<p>在文章中加入 <code>&lt;!-- more --&gt;</code> 就会自动截断文章内容，后面的文章内容不再自动显示。</p>
<a id="more"></a>

<p>也有需要配置config.yml文件的</p>
<div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line"># Automatically Excerpt. Not recommend.</span><br><span class="line"># Please use &lt;!-- more --&gt; in the post to control excerpt accurately.</span><br><span class="line">auto_excerpt:</span><br><span class="line">  enable: false</span><br><span class="line">  length: 150</span><br></pre></td></tr></table></figure></div>
<p>将false设置为true，然后自己在文章中的合适的位置设置<code>&lt;!-- more --&gt;</code></p>
<p>参考文章：<br><a href="https://blog.csdn.net/lewky_liu/article/details/81277337" target="_blank" rel="noopener">https://blog.csdn.net/lewky_liu/article/details/81277337</a><br><a href="https://blog.csdn.net/qq_32337109/article/details/78755729" target="_blank" rel="noopener">https://blog.csdn.net/qq_32337109/article/details/78755729</a></p>
]]></content>
  </entry>
  <entry>
    <title>hexo博客之插入图片</title>
    <url>/2019/11/06/hexo%E5%8D%9A%E5%AE%A2%E4%B8%AD%E6%8F%92%E5%85%A5%E5%9B%BE%E7%89%87/</url>
    <content><![CDATA[<p>怎样在博客中插入图片，这个问题我也整了好久，现在将具体的操作步骤记录如下：</p>
<a id="more"></a>

<h4 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h4><p>首先修改根目录下的config.yml文件中的post_asset_folder将false为true。<br>如下图所示：<br><img src="/2019/11/06/hexo%E5%8D%9A%E5%AE%A2%E4%B8%AD%E6%8F%92%E5%85%A5%E5%9B%BE%E7%89%87/pasted-0.png" alt="插入图片"></p>
<h4 id="插件安装与配置"><a href="#插件安装与配置" class="headerlink" title="插件安装与配置"></a>插件安装与配置</h4><p>先安装一个图片转换的插件,打开本地博客根目录，在git bash here 中输入</p>
<div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">npm install hexo-admin-image --save</span><br></pre></td></tr></table></figure></div>
<p><strong style="color:red">敲黑板，划重点</strong></p>
<p>这个插件的内容需要修改，不然可能导致图片显示不出来，最开始没有注意到，因此图片一直都显示不出来，后面才找到这个解决办法。</p>
<p>打开/node_modules/hexo-asset-image/index.js，将内容更换为下面的代码：</p>
<div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">&apos;use strict&apos;;</span><br><span class="line">var cheerio = require(&apos;cheerio&apos;);</span><br><span class="line"></span><br><span class="line">// http://stackoverflow.com/questions/14480345/how-to-get-the-nth-occurrence-in-a-string</span><br><span class="line">function getPosition(str, m, i) &#123;</span><br><span class="line">  return str.split(m, i).join(m).length;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var version = String(hexo.version).split(&apos;.&apos;);</span><br><span class="line">hexo.extend.filter.register(&apos;after_post_render&apos;, function(data)&#123;</span><br><span class="line">  var config = hexo.config;</span><br><span class="line">  if(config.post_asset_folder)&#123;</span><br><span class="line">    	var link = data.permalink;</span><br><span class="line">	if(version.length &gt; 0 &amp;&amp; Number(version[0]) == 3)</span><br><span class="line">	   var beginPos = getPosition(link, &apos;/&apos;, 1) + 1;</span><br><span class="line">	else</span><br><span class="line">	   var beginPos = getPosition(link, &apos;/&apos;, 3) + 1;</span><br><span class="line">	// In hexo 3.1.1, the permalink of &quot;about&quot; page is like &quot;.../about/index.html&quot;.</span><br><span class="line">	var endPos = link.lastIndexOf(&apos;/&apos;) + 1;</span><br><span class="line">    link = link.substring(beginPos, endPos);</span><br><span class="line"></span><br><span class="line">    var toprocess = [&apos;excerpt&apos;, &apos;more&apos;, &apos;content&apos;];</span><br><span class="line">    for(var i = 0; i &lt; toprocess.length; i++)&#123;</span><br><span class="line">      var key = toprocess[i];</span><br><span class="line"> </span><br><span class="line">      var $ = cheerio.load(data[key], &#123;</span><br><span class="line">        ignoreWhitespace: false,</span><br><span class="line">        xmlMode: false,</span><br><span class="line">        lowerCaseTags: false,</span><br><span class="line">        decodeEntities: false</span><br><span class="line">      &#125;);</span><br><span class="line"></span><br><span class="line">      $(&apos;img&apos;).each(function()&#123;</span><br><span class="line">		if ($(this).attr(&apos;src&apos;))&#123;</span><br><span class="line">			// For windows style path, we replace &apos;\&apos; to &apos;/&apos;.</span><br><span class="line">			var src = $(this).attr(&apos;src&apos;).replace(&apos;\\&apos;, &apos;/&apos;);</span><br><span class="line">			if(!/http[s]*.*|\/\/.*/.test(src) &amp;&amp;</span><br><span class="line">			   !/^\s*\//.test(src)) &#123;</span><br><span class="line">			  // For &quot;about&quot; page, the first part of &quot;src&quot; can&apos;t be removed.</span><br><span class="line">			  // In addition, to support multi-level local directory.</span><br><span class="line">			  var linkArray = link.split(&apos;/&apos;).filter(function(elem)&#123;</span><br><span class="line">				return elem != &apos;&apos;;</span><br><span class="line">			  &#125;);</span><br><span class="line">			  var srcArray = src.split(&apos;/&apos;).filter(function(elem)&#123;</span><br><span class="line">				return elem != &apos;&apos; &amp;&amp; elem != &apos;.&apos;;</span><br><span class="line">			  &#125;);</span><br><span class="line">			  if(srcArray.length &gt; 1)</span><br><span class="line">				srcArray.shift();</span><br><span class="line">			  src = srcArray.join(&apos;/&apos;);</span><br><span class="line">			  $(this).attr(&apos;src&apos;, config.root + link + src);</span><br><span class="line">			  console.info&amp;&amp;console.info(&quot;update link as:--&gt;&quot;+config.root + link + src);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;else&#123;</span><br><span class="line">			console.info&amp;&amp;console.info(&quot;no src attr, skipped...&quot;);</span><br><span class="line">			console.info&amp;&amp;console.info($(this));</span><br><span class="line">		&#125;</span><br><span class="line">      &#125;);</span><br><span class="line">      data[key] = $.html();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></div>
<h4 id="插入图片"><a href="#插入图片" class="headerlink" title="插入图片"></a>插入图片</h4><p>在博客根目录下，git bash here 中输入 <code>hexo new &quot;文章名&quot;</code> 然后在source/post目录下会生成一个 文章名.md 文件和一个与文章同名的文件夹，可以直接将想要上传的图片放到该文件夹里面，然后在.md文件中可以直接引用，如下：</p>
<div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">![图片的替换文字][文件夹名/xxx.jpg]</span><br></pre></td></tr></table></figure></div>
<p>因为博客名与文件名一直，直接引用相对路径就可以了。</p>
<p>然后</p>
<div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">  hexo g -d</span><br></pre></td></tr></table></figure></div>
<p>就部署到github上面了。</p>
<h4 id="另一种方法-hexo-admin需要配置好"><a href="#另一种方法-hexo-admin需要配置好" class="headerlink" title="另一种方法(hexo-admin需要配置好)"></a>另一种方法(hexo-admin需要配置好)</h4><p>在hexo-admin中插入图片：</p>
<p>hexo-admin中可以直接选择赋值粘贴图片在编辑区域，会自动下载到source/images中并重命名。但是在windows系统中，粘贴会导致裂图，只需把前后两条斜杠删去在最前面的斜杠添加两个..即可。</p>
<p><img src="/2019/11/06/hexo%E5%8D%9A%E5%AE%A2%E4%B8%AD%E6%8F%92%E5%85%A5%E5%9B%BE%E7%89%87/pasted-1.png" alt="hexo-admin中插入图片"></p>
<p>然后部署即可。</p>
]]></content>
  </entry>
  <entry>
    <title>我的博客完善计划</title>
    <url>/2019/11/06/%E6%88%91%E7%9A%84%E5%8D%9A%E5%AE%A2%E5%AE%8C%E5%96%84%E8%AE%A1%E5%88%92/</url>
    <content><![CDATA[<p>1.hexo-admin插件使用，实现可视化编辑和上传文章</p>
<a id="more"></a>

<p>2.博文插入图片</p>
<p>3.绑定域名</p>
<p>4.其他的等想到再做修改</p>
]]></content>
  </entry>
  <entry>
    <title>怎样使用hexo-admin插件</title>
    <url>/2019/11/03/%E6%80%8E%E6%A0%B7%E4%BD%BF%E7%94%A8hexo-admin%E6%8F%92%E4%BB%B6/</url>
    <content><![CDATA[<p>首先在博客根目录下输入</p>
<a id="more"></a>

<div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">hexo server -d 切换到后台管理页面 localhost：4000/admin/</span><br><span class="line">就可以进行可视化编辑文章</span><br><span class="line"></span><br><span class="line">编辑完之后，仍然需要</span><br><span class="line">hexo g 重新生成文件</span><br><span class="line">hexo s 本地查看</span><br><span class="line">hexo d 部署</span><br></pre></td></tr></table></figure></div>]]></content>
  </entry>
  <entry>
    <title>啊，我的博客-----</title>
    <url>/2019/11/03/%E5%95%8A%EF%BC%8C%E6%88%91%E7%9A%84%E5%8D%9A%E5%AE%A2-1/</url>
    <content><![CDATA[<p>–<br>author: 墨文<br>tags: []<br>categories: []<br>date: 2019-11-03 19:03:00</p>
<hr>
<p>–<br>author: 墨文</p>
<p>文笔不好，那就随便说说吧，反正也没人看到……</p>
<a id="more"></a>

<p>昨天考完了教资，从外面的回来的路上我就一直在想，明天我就一定要开始自己动手去做一个自己的博客，不管做的是好是坏，得动手，不能一直光想而不去做。。当然这个道理，我始终明白，但就是觉得学的东西太少（确实也学的太少），虽然知道网上有各种各样的教程，但就是迟迟没有动手。</p>
<p>在前两年的大学生活中，学了一些编程语言，如c#，Java，PHP等，当然都没有很明白，然后时间也就白白浪费了。现在大三上已经过去一半，大四就要去找实习岗位，可是啥都不会，学编程学了一年多，一直在门口徘徊。。。有时候一想到这都大三了就觉得急躁。。。。</p>
<p>前面说，大学前两年也接触了一些编程语言，甚至也决定了要去学习Java还整了一套网课，可是刚把Java基础语法看完，就发现头发少了不少。。。。加上本来就对抽象的东西不甚理解，逐渐的放弃了学后端的想法，觉得前端东西–所见即所得，而且确实比较容易入门，就逐渐想做前端了（虽然现在发现做啥要想做好都不容易…… 就这么滴吧）</p>
<p>然后，因为学习前端，在网上也看到了许多漂亮的网站，查资料的时候，也看到了许多很好的博客，就渐渐想去做一个自己的博客，虽然当时很菜基本是做不出来的，但是想就比较容易了，于是就一直在想……直到今天，才开始动手。。。</p>
<p>其实，在上学期结束的时候，就有以为朋友带着我用phpstudy+wordpress在本地搭建了一个博客，但是那个太简约了，而且当时对他的操作很迷，就听他讲也是云里雾里，而且最后做出来的就是一个搭建，没有期待的那种效果（太简约了，而且他教了几次我也不是很会写点东西和上传……），本来想着暑假在家自己在试试，上网上找点教程啥的，但是很不幸，回家一个月基本啥也没干，就把那三部大秦帝国看完了，，，，</p>
<p>前面墨迹着这么多，主要是为了练习打字……</p>
<p>现在说一说这个博客咋做的吧，，，好吧具体的步骤记得不清楚了，，，但是基本的步骤还是有印象的：首先，这个博客是基于hexo和node.js在github上搭建的。所以，得有个github账号吧，然后为了能将本地库上传到github上还需要下载一个git（就分布式版本控制系统，，目前还不是很理解），然后下载安装node.js，然后在本地的合适的位置新建要创建的博客目录，然后可以用DOS命令也可以用git bash安装hexo，可以上官网 <a href="http://hexo.io/" target="_blank" rel="noopener">http://hexo.io/</a>   ,那里有详细的安装过程，当然我是在B站找的视频，一步一步跟着做的。到这一步就本地博客就搭建好了，然后需要初始化，更换主题啥的。哦，对了，本地库要和远程的github建立关联（具体怎么关联，每次都是百度，这次是之前有关联过，就直接跳过了），然后可以把本地的库部署到github上，那么部署之前呢，需要在github上新建一个这样  <code>yourgithubname.github.io</code> 格式的仓库，我的是 <code>qllhuo.github.io</code> 然后每次上传文章基本上三行命令，如下：</p>
<div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">cd 到你的本地blog根目录</span><br><span class="line">hexo g 重新生成文件 （generate）</span><br><span class="line">  hexo s 在本地服务器查看（server）localhost:4000</span><br><span class="line">  hexo d 文件生成后立即部署到远程服务器 -deploy qlhuo.github.io</span><br></pre></td></tr></table></figure></div>

<p>哦，忘了说怎样写文章和上传文章了，有若干种方法，在此之前我是直接在本地相应的目录下写md文件，然后根据上面的三行代码直接上传文件。比较麻烦。然后刚刚找到了一个后台管理插件 hexo-admin，如下：</p>
<div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">cd yourblog</span><br><span class="line">npm install --save hexo-admin</span><br><span class="line">hexo server -d</span><br><span class="line">open http://localhost:4000/admin/</span><br></pre></td></tr></table></figure></div>

<p>原文链接：<a href="https://blog.kinpzz.com/2016/12/31/hexo-admin-backend-management/" target="_blank" rel="noopener">https://blog.kinpzz.com/2016/12/31/hexo-admin-backend-management/</a></p>
<p>到这应该就差不多了，博客的基本框架有了，选的主题也比较美观吧！然而，还是有很多不足的地方，慢慢改吧，今天算是开一个好头吧！</p>
]]></content>
  </entry>
  <entry>
    <title>替换元素</title>
    <url>/2019/11/03/%E6%9B%BF%E6%8D%A2%E5%85%83%E7%B4%A0/</url>
    <content><![CDATA[<h3 id="可替换元素"><a href="#可替换元素" class="headerlink" title="可替换元素"></a>可替换元素</h3><a id="more"></a>

<div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="HTML"><figure class="iseeu highlight /html"><table><tr><td class="code"><pre><span class="line">替换元素是浏览器根据其标签的元素与属性来判断显示具体的内容。</span><br><span class="line"></span><br><span class="line">比如：<span class="tag">&lt;<span class="name">input</span> /&gt;</span> type="text" 的是，这是一个文本输入框，换一个其他的时候，浏览器显示就不一样</span><br><span class="line"></span><br><span class="line">(X)HTML中的<span class="tag">&lt;<span class="name">img</span>&gt;</span>、<span class="tag">&lt;<span class="name">input</span>&gt;</span>、<span class="tag">&lt;<span class="name">textarea</span>&gt;</span>、<span class="tag">&lt;<span class="name">select</span>&gt;</span>、<span class="tag">&lt;<span class="name">object</span>&gt;</span>都是替换元素，这些元素都没有实际的内容。</span><br></pre></td></tr></table></figure></div>

<p><strong style="color:red">对于可替换元素（如 img、input、select 等），把 :before, :after 伪类用在可替换元素标签上，是无效的</strong></p>
<h3 id="非可替换元素"><a href="#非可替换元素" class="headerlink" title="非可替换元素"></a>非可替换元素</h3><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="HTML"><figure class="iseeu highlight /html"><table><tr><td class="code"><pre><span class="line">(X)HTML 的大多数元素是不可替换元素，他们将内容直接告诉浏览器，将其显示出来。</span><br><span class="line"></span><br><span class="line">比如<span class="tag">&lt;<span class="name">p</span>&gt;</span>wanmei.com<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line">浏览器将把这段内容直接显示出来。</span><br></pre></td></tr></table></figure></div>

]]></content>
  </entry>
</search>
