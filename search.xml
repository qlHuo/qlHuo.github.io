<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>前端相关知识点的思考</title>
      <link href="/2020/03/06/%E5%89%8D%E7%AB%AF%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86%E7%82%B9%E7%9A%84%E6%80%9D%E8%80%83/"/>
      <url>/2020/03/06/%E5%89%8D%E7%AB%AF%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86%E7%82%B9%E7%9A%84%E6%80%9D%E8%80%83/</url>
      
        <content type="html"><![CDATA[<p>本文记录前端相关的知识点，复习使用和面试准备。<a id="more"></a></p><h3 id="定位"><a href="#定位" class="headerlink" title="定位"></a>定位</h3><h4 id="为什么是子绝父相？"><a href="#为什么是子绝父相？" class="headerlink" title="为什么是子绝父相？"></a>为什么是子绝父相？</h4><ol><li>relative 相对定位 <strong>会</strong>在标准流中占据位置</li><li>absolute 绝对定位 <strong>不会</strong> 在标准流中占据位置</li><li>绝对定位 是相对于距离它最近的父元素进行定位</li></ol><p>为什么子元素要绝对定位？</p><p>​    一些小图标，如轮播图里的小圆点或者是小三角，需要放在其他子元素的上面，虽然float 以及除了static之外的定位属性都可以利用z-index让盒子由于其他元素显示，但是absolute完全脱标且不占位置，更加方便进行显示效果。</p><p>为什么父元素要相对定位？</p><p>​    不管是relative/absolute/fixed，都可以让子元素找到定位点，但如果是absolute，在文档流中不占位置，下面的元素会跑上去；fixed会使元素相对于页面定位，也不可取。relative占位，下面的元素就不会移动到上面。</p><p>总之：把脱离文档流的元素放到不脱离文档流（需要占位）的元素之上，就用“子绝父相”</p><h3 id="外边距塌陷（折叠）"><a href="#外边距塌陷（折叠）" class="headerlink" title="外边距塌陷（折叠）"></a>外边距塌陷（折叠）</h3><h4 id="为什么会产生外边距塌陷（折叠）？"><a href="#为什么会产生外边距塌陷（折叠）？" class="headerlink" title="为什么会产生外边距塌陷（折叠）？"></a>为什么会产生外边距塌陷（折叠）？</h4><p>根据MDN：</p><p>当块级元素（block）的<a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/margin-top" target="_blank" rel="noopener">上外边距(margin-top)</a>和<a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/margin-bottom" target="_blank" rel="noopener">下外边距(margin-bottom)</a>同时都有设定时只会只会保留最大边距，这种行为称为<strong>边界折叠</strong>（margin collapsing），有时也翻译为<strong>外边距重叠</strong>。</p><h4 id="外边距折叠产生的情况与解决方法"><a href="#外边距折叠产生的情况与解决方法" class="headerlink" title="外边距折叠产生的情况与解决方法"></a>外边距折叠产生的情况与解决方法</h4><h5 id="块级父元素与其第一个-最后一个子元素"><a href="#块级父元素与其第一个-最后一个子元素" class="headerlink" title="块级父元素与其第一个/最后一个子元素"></a>块级父元素与其第一个/最后一个子元素</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span>        </span><br><span class="line">     *&#123;            </span><br><span class="line">        padding: 0;            </span><br><span class="line">        margin: 0;        </span><br><span class="line">    &#125;        </span><br><span class="line"><span class="css">    <span class="selector-id">#sec</span>&#123; </span></span><br><span class="line">    height: 120px;           </span><br><span class="line"><span class="css">        <span class="selector-tag">background</span>: <span class="selector-id">#f00</span>;</span></span><br><span class="line"><span class="css">       <span class="comment">/*border: 1px solid #ccc;            */</span></span></span><br><span class="line"><span class="css">         <span class="comment">/*overflow: hidden;  //创建了一个BFC，块级格式化上下文   */</span></span></span><br><span class="line">    &#125;        </span><br><span class="line"><span class="css">    <span class="selector-class">.child</span>&#123;            </span></span><br><span class="line">        height: 100px;            </span><br><span class="line">        margin-top: 10px;            </span><br><span class="line">        background: yellow;  </span><br><span class="line"><span class="css">        <span class="comment">/* border: 1px solid blue; */</span>      </span></span><br><span class="line">    &#125;    </span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">section</span> <span class="attr">id</span>=<span class="string">"sec"</span>&gt;</span>        </span><br><span class="line">    <span class="tag">&lt;<span class="name">article</span> <span class="attr">class</span>=<span class="string">"child"</span>&gt;</span><span class="tag">&lt;/<span class="name">article</span>&gt;</span>    </span><br><span class="line"><span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这种情况是：子元素设置margin-top 为10px，父盒子和子元素的上边框合并到一起</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">h1 &#123;</span><br><span class="line">  margin: 0;</span><br><span class="line">  background: #cff;</span><br><span class="line">&#125;</span><br><span class="line">#div1&#123;</span><br><span class="line">margin: 40px 0 25px 0;</span><br><span class="line">  background: #999;</span><br><span class="line">&#125;</span><br><span class="line">#div2&#123;</span><br><span class="line">margin: 20px 0 10px 0;</span><br><span class="line">background: #cff;</span><br><span class="line">&#125;</span><br><span class="line">&lt;h1&gt;这是一个标题&lt;/h1&gt;</span><br><span class="line">&lt;div id=&quot;div1&quot;&gt;</span><br><span class="line">&lt;div id=&quot;div2&quot; &gt;这是第一个块级盒子&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><p>测试的结果是: h1与div2之间的margin值是40px而不是想象中的60px。</p><p>根据MDN：</p><p>如果块级父元素中，不存在上边框（border-top）、上内补（padding-top）、inline content、 清除浮动这四条属性(对于上边框和上内补，也可以说，当上边距及上内补宽度为0时),那么这个块级元素和其第一个子元素的上边距就会发生折叠。这个折叠之后的值在这里取的就是两者之间的最大值。</p><p>对于父子级块状元素解决外边距折叠的方法一般分为三大类</p><ul><li><p>给父级块级元素设置border-top，可以设置为：border-top:1px solid transparent</p></li><li><p>给父级块级元素设置一个padding-top,这个值就根据自己的布局来定吧。</p></li><li><p>最后一种方法，是给父级块级元素触发一个BFC(Block formatting contexts-块级格式上下文)。参考：<a href="https://juejin.im/post/5e60c2c7f265da574e22a1f5" target="_blank" rel="noopener">全面分析BFC</a></p><p>具体怎么触发BFC呢？一般触发BFC的条件包括：</p><ul><li>浮动元素：float除了none之外</li><li>用position绝对定位的元素，以及fixed固定定位的元素</li><li>display: inline-block等</li><li>overflow：除了visiable</li></ul></li></ul><h5 id="相邻的兄弟块级元素"><a href="#相邻的兄弟块级元素" class="headerlink" title="相邻的兄弟块级元素"></a>相邻的兄弟块级元素</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">div &#123;</span><br><span class="line">width:100px;</span><br><span class="line">height:100px;</span><br><span class="line">margin:40px;</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"div1"</span> &gt;</span>这是第一个块级盒子<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"div2"</span> &gt;</span>这是第二个块级盒子<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>测试的结果是两个div之间的边距是40px而不是80px。</p><p>对于兄弟级块状元素，解决的方法一般有两种：</p><ul><li>直接只写一边的margin例如都是margin-top或者都是margin-bottom，我觉得这是我用过最简单的方法了，直接就避免了塌陷。</li><li>给两个块状元素形成两个不同的BFC</li></ul><h5 id="空块元素"><a href="#空块元素" class="headerlink" title="空块元素"></a>空块元素</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">#div1,#div2 &#123;</span><br><span class="line">margin:0px;</span><br><span class="line">&#125;</span><br><span class="line">#voidDiv &#123;</span><br><span class="line">margin-top:40px;</span><br><span class="line">margin-bottom:40px;</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"div1"</span> &gt;</span>这是第一个块级盒子<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"voidDiv"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"div2"</span> &gt;</span>这是第二个块级盒子<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>测试的结果是div1与div2之间的边距是40px而不是80px。</p><p>根据MDN，产生的原因就在于</p><blockquote><p>如果存在一个空的块级元素，其 border、padding、inline content、height、min-height都不存在，那么此时上下边距就会发生折叠</p></blockquote><p>对于空的块状元素，解决的方法列举以下几种：</p><ul><li>设置border</li><li>设置padding</li><li>设置inline-block等等方法都可</li></ul><p>参考：</p><p><a href="https://zhuanlan.zhihu.com/p/25876599" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/25876599</a></p><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/CSS_Box_Model/Mastering_margin_collapsing" target="_blank" rel="noopener">https://developer.mozilla.org/zh-CN/docs/Web/CSS/CSS_Box_Model/Mastering_margin_collapsing</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> 知识点 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2020寒假总结</title>
      <link href="/2020/03/01/2020%E5%AF%92%E5%81%87%E6%80%BB%E7%BB%93/"/>
      <url>/2020/03/01/2020%E5%AF%92%E5%81%87%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<p>今天是这个假期的最后一天，疫情还在继续，明天就要开始上网课了。简单的回顾一下这个假期吧。<a id="more"></a></p><h3 id="北京"><a href="#北京" class="headerlink" title="北京"></a>北京</h3><p>放假之后的几天路过北京，顺带转了转。北京是一直想去的一个城市吧，这次算是遂了心愿。第一天下了火车已经是10点多了，在我住的青年旅社的胡同口遇到一阿姨，听她的推荐去了八达岭长城，是跟着类似于旅游团去的，花了300多块钱，来回车费160+缆车140+买了一些吃的。enmmm，其实是不太喜欢这种的，在车上的时候有点被骗的感觉（后来想想也不能怪别人，主要是自己没有经验吧），但看着有一车子人，觉得也不会太那啥，内心也就平衡了下来。在车上的时候，才大概明白好像只有两个小时的游玩时间。然后下了车就开始去去爬长城了，晚上回去就感觉腿都软了。。。第二天去了紫禁城，从早上9点一直到下午4点闭馆的时候才出来，从北京回到家没几天故宫就被推到了风口浪尖，原因是一个女子在故宫开着大奔，还拍了照片上网上炫耀。想当年法国总统奥朗德参观故宫得步行，哎这事整的enmmm。。。第三天去了恭王府和颐和园，原本想去圆明园但是从颐和园出来之后就很晚了也没去，然后路过了中关村，嗯，想去看看是啥呢，结果在哪个美食城吃了个鸭血粉丝汤就回了，晚上在南锣鼓巷转了一圈吃了个大串面筋15元。。。。然后晚上好像是骑着共享单车回去的，我就在自行车道骑着，前面有一辆大货车在我这一侧横着，好像是在装什么东西，我看着他不走，我就想赶快骑着走过去，我刚走过去就听到一阵猛的刹车声，我回头看了一眼接着走了，现在想想还是心有余悸。。最后一天去了天安门广场，在毛主席纪念堂给这位伟人鞠了个躬，接着就在国家博物院转了大半天，仅仅是看完了一个复兴之路的展厅，走之前去看了那尊后母戊鼎，当时我学的时候它还叫司母戊鼎。。。从国家博物馆出来吃了个饭就下午了，天气也好就到故宫后面的景山上拍了好多照片，前几天我在整理相册的时候，删了好多。。。</p><p>这些地方很多都是心念念的地方，可是一到那里，反而也不过如此。就像故宫，我一直就觉得很神圣，可是当真正走在哪里，心里一直有个像要穷尽这座宫殿的念头，想要去理解我之前不曾理解的关于这座宫殿的某些东西，可是好像并没有得到什么，至多的，就像每一个到故宫的人都可以了解到的关于故宫的一些专属故事。有时候更多的是一种朦胧的感受吧。每个景点，人都很多，人们都在拿着各式各样的设备去记录现在正在经历的，我也是。不知道在北京四天拍了有多少张照片，反正我前几天删了一个多小时，大部分是没必要的，但总是想要拍出满意的照片，或许是仅仅想记录，或许是为了满足某种虚荣心。有些事情可能总是后知后觉，如果真想拍出满意的照片那就置办好设备专门到某个景区去拍，在每一处都有见到过一些人（主要是老爷子）拿着照相机在拍，只是在纯粹的拍，也是一种享受吧；而如果只是作为游客来参观，那还是尽量好好想感受此刻的感受吧。北京，细想这个名字，不禁让人感到肃穆。在北京的几天中，越来越感觉它是严肃的，天安门附近到处是巡警，在紫禁城里也有时感觉到某种寒意，不能细想。如果以后要在这个城市生活会怎样呢？不敢细想。</p><h3 id="疫情"><a href="#疫情" class="headerlink" title="疫情"></a>疫情</h3><p>这还要从一只蝙蝠说起。。。关于疫情，确实很严重传播速度极快，就在我们国家有好转的趋势的时候，国外又发生了不应该是意外的意外。韩国日本意大利确诊人数急剧上升，美国那么多流感患者不知道是不是仅仅是流感。。之前喊着“武汉加油，中国加油”，现在要喊“世界加油，人类加油”了，那些民主国家的政府在关键的时候究竟能怎样保护他们的人民，希望他们有能力保护好。</p><p>疫情对我的影响，可能算不上影响，仅仅是没办法提前去学校。在家里也还好，最起码有所学习，有所收获。</p><h3 id="读书"><a href="#读书" class="headerlink" title="读书"></a>读书</h3><p>从1月1日开始到现在，我已经读了6本书了，从学校要求的读书打卡活动开始之后读了5本。第一本是傅高义的《邓小平时代》，读了一个月，一开始觉得书中有些观点有失偏颇，但是总体来讲这本书的还是一本好书，更加深刻了解邓小平及改革开放初期的一些事件，相比于以前的知识和理解更加深刻。然后读书打卡的第一本书是吴晓波的《腾讯传》，语言文字很流畅，思路很清晰，对于腾讯的成长和发展介绍的挺清楚的，对于我来说让我更全面的了解腾讯。但我看到有些书友说，对一些腾讯不好的事情，作者淡化了，可能是吧。信息时代刚发展20多年就就有如此巨大的威力，从移动端的兴起到现在不过十年左右的时间就渗透到我们生活的边边角角，我们也正因有了像bat这样的大型的互联网公司才使我们日常使用这些互联网工具更加便捷和安全，主要是安全。另外，还读了丰子恺先生的《万般生活，都是滋味》，每一篇文章读起来都很美妙并且富有哲理，而且插图也很好看，很是向往那种生活，但现在仅是向往而已。那本《一个叫欧维的男人决定去死》是我感觉这几年开看的最好的一本，名著，我可能是太久没有看过好书了。可能主要是关于爱情的吧，真希望拥有想欧维和索雅那样的爱情。昨天开始看的《30岁前的每一天》，也还是很好的，它首先让我想想我的梦想是什么，之前有门课，老师也谈到过这个问题，当时也确实搜索不到我的梦想，就想着下课想，结果没想，或是想了也忘了。这两天我想了之后，发现我的“梦想”是很现实的，就是挣钱，多挣钱，我以前多么不齿啊，可是慢慢的发现没有钱不行，而我现在的所有的方向目标就是它，那就是它了。多少钱是多啊？1000万？30岁之前？1000万30岁之前。</p><h3 id="学习"><a href="#学习" class="headerlink" title="学习"></a>学习</h3><p>这个假期确实比之前强，最起码踏踏实实学了。学了移动端的布局，四种原来好像没有学过，这次给补上了，主要这个假期看了小程序的东西，掌握的可能不是很好但基本的都有了解。最近看到好多关于找实习的，字节跳动，百度腾讯也有还看到了几篇关于大三面试实习的文章，但是看到他们写的面试经历，我发现该我就知道布局方面的，js相关的就不会了，之前学的都忘记了，开学还得补啊。到现在也没什么退路可有了，一心一意搞前端，学好js。多敲多练，1万小时理论。争取在暑假之前，把前端相关的知识学个遍，然后js主要。</p><h3 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h3><p>除了上面说的这个假期，做菜的手艺有些长进，这是真的。还有辅导小妹学习，虽然有事很气也占用时间，也算一项任务吧。。。六级又没过，不得不承认的是之前确实没有认真学习英语，本来就是抱着侥幸的心理考试的，这学期争取给过了吧！和读书打卡活动一起的我还想做点运动，每天在家院子里走半个小时，然后再在keep上连一些动作，只坚持了半个多月。哦，还有啊，玩斗地主，哎，这两天手气不那么好了，又输了好多，不过还有好多，也还好。玩斗地主的过程中呢，很容易被游戏牵着走，就是那个好胜心啊。可能还有一种赢豆的快感吧，之前都是三人斗地主，现在出了个四人的，可以和队友配合然后，赢欢乐豆，一赢一大把，炸弹比较多比较刺激。。。但是很不好的是啥，我记得有一天我竟然玩了三个多小时，主要是那天运气不太好，总是输赢也赢的不多，就很不爽就一直玩，时间就白白的浪费在游戏上了。大多数情况下还是能够把持住的，偶尔会着魔吧。还好，开学之后就不再玩太多了。还有，这个假期看了345季的爱情公寓，看了有十几部电影吧，都是很不错的，也算是多多少少开阔了眼界吧。</p><p>废话那么多，竟然发现慢慢的可以写好东西，最起码通顺吧，不知道是不是看书的缘故，但是看书总没坏处。总之，这个假期过得自我感觉还是很有意义，很充实。开学之后，应该专心于专业知识，时间不多了，不应太分散注意力，多敲代码。学好英语。</p><p>最后希望疫情能尽快结束，早日返校！</p>]]></content>
      
      
      <categories>
          
          <category> 杂感 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>微信小程序格式化日期</title>
      <link href="/2020/02/29/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E6%A0%BC%E5%BC%8F%E5%8C%96%E6%97%A5%E6%9C%9F/"/>
      <url>/2020/02/29/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E6%A0%BC%E5%BC%8F%E5%8C%96%E6%97%A5%E6%9C%9F/</url>
      
        <content type="html"><![CDATA[<h3 id="wxml里的格式化日期"><a href="#wxml里的格式化日期" class="headerlink" title="wxml里的格式化日期"></a>wxml里的格式化日期</h3><p>新建一个filter.wxs 文件，放到utils文件夹下。<a id="more"></a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">//日期格式化-------------------------------------------------------------</span><br><span class="line">var formatTime = function (strDate, format = &quot;yyyy-MM-dd hh:mm:ss&quot;) &#123;</span><br><span class="line">  // 解决ios出现NaN问题</span><br><span class="line">  var realDate = strDate ? getDate(strDate.replace(getRegExp(&apos;-&apos;, &apos;g&apos;), &apos;/&apos;)) : getDate();</span><br><span class="line">  var regYear = getRegExp(&quot;(y+)&quot;, &quot;i&quot;);</span><br><span class="line">  var date = [</span><br><span class="line">    [&quot;M+&quot;, realDate.getMonth() + 1],</span><br><span class="line">    [&quot;d+&quot;, realDate.getDate()],</span><br><span class="line">    [&quot;h+&quot;, realDate.getHours()],</span><br><span class="line">    [&quot;m+&quot;, realDate.getMinutes()],</span><br><span class="line">    [&quot;s+&quot;, realDate.getSeconds()],</span><br><span class="line">    [&quot;q+&quot;, Math.floor((realDate.getMonth() + 3) / 3)],</span><br><span class="line">    [&quot;S+&quot;, realDate.getMilliseconds()],</span><br><span class="line">  ];</span><br><span class="line">  var reg1 = regYear.exec(format);</span><br><span class="line">  if (reg1) &#123;</span><br><span class="line">    format = format.replace(reg1[1], (realDate.getFullYear() + &apos;&apos;).substring(4 - reg1[1].length));</span><br><span class="line">  &#125;</span><br><span class="line">  for (var i = 0; i &lt; date.length; i++) &#123;</span><br><span class="line">    var reg2 = getRegExp(&quot;(&quot; + date[i][0] + &quot;)&quot;).exec(format);</span><br><span class="line">    if (reg2) &#123;</span><br><span class="line">      format = format.replace(reg2[1], reg2[1].length == 1 ? v : (&quot;00&quot; + date[i][1]).substring((&quot;&quot; + date[i][1]).length));</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  return format;</span><br><span class="line">&#125;</span><br><span class="line">module.exports = &#123;</span><br><span class="line">  formatTime: formatTime,//日期格式化</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>wxml 里面这么使用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">引入：&lt;wxs module=&quot;filter&quot; src=&quot;/utils/filter.wxs&quot;&gt;&lt;/wxs&gt;</span><br><span class="line">使用：&lt;text class=&apos;valid-text&apos;&gt;有效期：&#123;&#123;filter.formatTime(data.startTime, &apos;yyyy-MM-dd&apos;)&#125;&#125;&lt;/text&gt;</span><br></pre></td></tr></table></figure><h3 id="js的格式化日期代码"><a href="#js的格式化日期代码" class="headerlink" title="js的格式化日期代码"></a>js的格式化日期代码</h3><p>在小程序自己提供的utils工具中，有一个日期格式化的函数。<br>先在js文件中导入var util = require(‘../../utils/util.js’)，然后使用util.formatTime(new Date)格式化日期。<br><strong>utils.js</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> formatTime = <span class="function"><span class="params">date</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> year = date.getFullYear()</span><br><span class="line">  <span class="keyword">const</span> month = date.getMonth() + <span class="number">1</span></span><br><span class="line">  <span class="keyword">const</span> day = date.getDate()</span><br><span class="line">  <span class="keyword">const</span> hour = date.getHours()</span><br><span class="line">  <span class="keyword">const</span> minute = date.getMinutes()</span><br><span class="line">  <span class="keyword">const</span> second = date.getSeconds()</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> [year, month, day].map(formatNumber).join(<span class="string">'/'</span>) + <span class="string">' '</span> + [hour, minute, second].map(formatNumber).join(<span class="string">':'</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> formatNumber = <span class="function"><span class="params">n</span> =&gt;</span> &#123;</span><br><span class="line">  n = n.toString()</span><br><span class="line">  <span class="keyword">return</span> n[<span class="number">1</span>] ? n : <span class="string">'0'</span> + n</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  formatTime: formatTime</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>需要格式化日期的js</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">// 在需要使用的js文件中，导入js  </span></span><br><span class="line"><span class="keyword">var</span> util = <span class="built_in">require</span>(<span class="string">'../../utils/util.js'</span>);  </span><br><span class="line">Page(&#123;  </span><br><span class="line">  data: &#123;  </span><br><span class="line">  time:util.formatTime(<span class="keyword">new</span> <span class="built_in">Date</span>())</span><br><span class="line">  &#125;,  </span><br><span class="line">  onLoad: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;  </span><br><span class="line">    <span class="comment">// 调用函数时，传入new Date()参数，返回值是日期和时间  </span></span><br><span class="line">    <span class="keyword">var</span> time = util.formatTime(<span class="keyword">new</span> <span class="built_in">Date</span>());  </span><br><span class="line">    <span class="comment">// 再通过setData更改Page()里面的data，动态更新页面的数据  </span></span><br><span class="line">    <span class="keyword">this</span>.setData(&#123;  </span><br><span class="line">      time: time  </span><br><span class="line">    &#125;);  </span><br><span class="line">  &#125;    </span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="小程序自定义格式化时间戳函数"><a href="#小程序自定义格式化时间戳函数" class="headerlink" title="小程序自定义格式化时间戳函数"></a>小程序自定义格式化时间戳函数</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">formatTime (time) &#123;</span><br><span class="line"><span class="keyword">const</span> formatNumber = <span class="function"><span class="params">n</span> =&gt;</span> &#123;</span><br><span class="line">n = n.toString()</span><br><span class="line"><span class="keyword">return</span> n[<span class="number">1</span>] ? n : <span class="string">'0'</span> + n</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> date = <span class="keyword">new</span> <span class="built_in">Date</span>(time);</span><br><span class="line"><span class="keyword">const</span> year = date.getFullYear()</span><br><span class="line"><span class="keyword">const</span> month = date.getMonth() + <span class="number">1</span></span><br><span class="line"><span class="keyword">const</span> day = date.getDate()</span><br><span class="line"><span class="keyword">return</span> [year, month, day].map(formatNumber).join(<span class="string">'.'</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>参考文章：<a href="https://blog.csdn.net/weixin_40292626/article/details/79668543" target="_blank" rel="noopener">https://blog.csdn.net/weixin_40292626/article/details/79668543</a><br><a href="https://blog.csdn.net/ZHFDBK/article/details/98882526" target="_blank" rel="noopener">https://blog.csdn.net/ZHFDBK/article/details/98882526</a><br><a href="https://blog.csdn.net/liukai6/article/details/80844171" target="_blank" rel="noopener">https://blog.csdn.net/liukai6/article/details/80844171</a></p>]]></content>
      
      
      <categories>
          
          <category> 小程序 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>移动端基础知识</title>
      <link href="/2020/02/06/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
      <url>/2020/02/06/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/</url>
      
        <content type="html"><![CDATA[<h2 id="移动端基础知识"><a href="#移动端基础知识" class="headerlink" title="移动端基础知识"></a>移动端基础知识</h2><p>当前，国内常见的移动端浏览器都是根据webkit修改过来的内核，因此在兼容移动端主流浏览时，处理webkit内核浏览器即可。<a id="more"></a></p><h3 id="1视口"><a href="#1视口" class="headerlink" title="1视口"></a>1视口</h3><p>视口（viewport）就是浏览器显示页面的屏幕区域。视口可分布局视口、视觉视口和理想视口。</p><h4 id="1-1布局视口layout-viewport"><a href="#1-1布局视口layout-viewport" class="headerlink" title="1.1布局视口layout viewport"></a>1.1布局视口layout viewport</h4><p>一般移动设备的浏览器都默认设置了一个布局视口，用于解决早期的PC端页面在手机上显示的问题。</p><p>iOS, Android基本都将这个视口分辨率设置为 980px，所以PC上的网页大多都能在手机上呈现，只不过元素看上去很小，一般默认可以通过<strong>手动缩放网页</strong>。</p><h4 id="1-2视觉视口-visual-viewport"><a href="#1-2视觉视口-visual-viewport" class="headerlink" title="1.2视觉视口 visual viewport"></a>1.2视觉视口 visual viewport</h4><p>字面意思，它是用户正在看到的网站的区域。注意：是网站的区域。</p><p>我们可以通过缩放去操作视觉视口，但不会影响布局视口，布局视口仍保持原来的宽度。</p><h4 id="1-3理想视口-idealviewport"><a href="#1-3理想视口-idealviewport" class="headerlink" title="1.3理想视口 idealviewport"></a>1.3理想视口 idealviewport</h4><p>为了使网站在移动端有最理想的浏览和阅读宽度而设定理想视口，对设备来讲，是最理想的视口尺寸。</p><p>需要手动添加meta视口标签通知浏览器操作。meta视口标签的主要目的是：布局视口的宽度应该与理想视口的宽度一致，简单来说就是设备有多宽，布局视口就有多宽。</p><p>开发最终会使用理想视口，而理想视口就是将布局视口的宽度修改为视觉视口。</p><h4 id="1-4-meta标签"><a href="#1-4-meta标签" class="headerlink" title="1.4 meta标签"></a>1.4 meta标签</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width,user-scalable=no,initial-scale=1.0,maximum-scale=1.0,minimum-scale=1.0"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">width: 宽度设置的是viewport宽度，可以设置device-width特殊值</span><br><span class="line">initial-scale: 初始缩放比，大于0 的数字，一般为1.0；</span><br><span class="line">maximum-scale:最大缩放比，大于0 的数字，一般1.0；</span><br><span class="line">minimum-scale:最小缩放比，大于0 的数字，一般1.0；</span><br><span class="line">user-scale：用户是否可以缩放，yes或no(1或0)</span><br></pre></td></tr></table></figure><p>最标准的viewport设置：</p><ol><li>视口宽度和设备保持一致</li><li>视口的默认缩放比例1.0</li><li>不允许用户自行缩放</li><li>最大允许的缩放比例为1.0</li><li>最小允许的缩放比例为1.0</li></ol><h3 id="2-二倍图"><a href="#2-二倍图" class="headerlink" title="2 二倍图"></a>2 二倍图</h3><h4 id="物理像素"><a href="#物理像素" class="headerlink" title="物理像素"></a>物理像素</h4><p><strong>物理像素</strong>点指的是屏幕显示的最小颗粒，是物理真实存在的。这是厂商在出厂时就设置好了,比如苹果6 是  750* 1334</p><p>一个px的能显示的物理像素点的个数，称为<strong>物理像素比或屏幕像素比</strong></p><p><strong>Retina（视网膜屏幕）</strong>是一种显示技术，可以将把更多的物理像素点压缩至一块屏幕里，从而达到更高的分辨率，并提高屏幕显示的细腻程度。</p><p>在标准的viewport设置中，使用<strong>倍图</strong>来提高图片质量，解决在高清设备中的模糊问题。通常使用二倍图</p><h4 id="背景缩放background-size"><a href="#背景缩放background-size" class="headerlink" title="背景缩放background-size"></a>背景缩放background-size</h4><p>background-size 属性规定背景图像的尺寸</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">background-size:  背景图片宽度 背景图片高度;</span><br></pre></td></tr></table></figure><p>属性值：长度|百分比|cover|contain;</p><p>cover把背景图像扩展至足够大，以使背景图像完全覆盖背景区域。</p><p>contain把图像图像扩展至最大尺寸，以使其宽度和高度完全适应内容区域</p><h3 id="3-移动开发选择和技术解决方案"><a href="#3-移动开发选择和技术解决方案" class="headerlink" title="3 移动开发选择和技术解决方案"></a>3 移动开发选择和技术解决方案</h3><h4 id="3-1移动端主流方案"><a href="#3-1移动端主流方案" class="headerlink" title="3.1移动端主流方案"></a>3.1移动端主流方案</h4><p>1.单独制作移动端页面（主流）</p><p>通常情况下，网址域名前面加 m(mobile) 可以打开移动端。通过判断设备，如果是移动设备打开，则跳到移动端页面。  </p><p>也就是说，PC端和移动端为两套网站，pc端是pc断的样式，移动端在写一套，专门针对移动端适配的一套网站.</p><p>2.响应式页面兼容移动端（其次）</p><h4 id="3-2-移动端技术解决方案"><a href="#3-2-移动端技术解决方案" class="headerlink" title="3.2 移动端技术解决方案"></a>3.2 移动端技术解决方案</h4><p>1.移动端浏览器兼容问题</p><p>移动端浏览器基本以 webkit 内核为主，因此我们就考虑webkit兼容性问题。我们可以放心使用 H5 标签和 CSS3 样式。同时我们浏览器的私有前缀我们只需要考虑添加 webkit 即可</p><p>2.移动端公共样式</p><p>移动端 CSS 初始化推荐使用 normalize.css/</p><p>Normalize.css：保护了有价值的默认值</p><p>Normalize.css：修复了浏览器的bug</p><p>Normalize.css：是模块化的</p><p>Normalize.css：拥有详细的文档</p><p>官网地址： <a href="http://necolas.github.io/normalize.css/" target="_blank" rel="noopener">http://necolas.github.io/normalize.css/</a></p><h4 id="3-3-移动端大量使用-CSS3盒子模型box-sizing"><a href="#3-3-移动端大量使用-CSS3盒子模型box-sizing" class="headerlink" title="3.3 移动端大量使用 CSS3盒子模型box-sizing"></a>3.3 移动端大量使用 CSS3盒子模型box-sizing</h4><p>传统模式宽度计算：盒子的宽度 = CSS中设置的width + border + padding </p><p>CSS3盒子模型：     盒子的宽度=  CSS中设置的宽度width 里面包含了 border 和 padding </p><p>也就是说，我们的CSS3中的盒子模型， padding 和 border 不会撑大盒子了</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*CSS3盒子模型*/</span></span><br><span class="line"><span class="selector-tag">box-sizing</span>: <span class="selector-tag">border-box</span>;</span><br><span class="line"><span class="comment">/*传统盒子模型*/</span></span><br><span class="line"><span class="selector-tag">box-sizing</span>: <span class="selector-tag">content-box</span>;</span><br></pre></td></tr></table></figure><p>移动端可以全部使用CSS3 盒子模型</p><p>PC端如果完全需要兼容，就用传统模式，如果不考虑兼容性，就选择 CSS3 盒子模型</p><h4 id="3-4移动端特殊样式"><a href="#3-4移动端特殊样式" class="headerlink" title="3.4移动端特殊样式"></a>3.4移动端特殊样式</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*CSS3盒子模型*/</span></span><br><span class="line"><span class="selector-tag">box-sizing</span>: <span class="selector-tag">border-box</span>;</span><br><span class="line"><span class="selector-tag">-webkit-box-sizing</span>: <span class="selector-tag">border-box</span>;</span><br><span class="line"><span class="comment">/*点击高亮我们需要清除清除  设置为transparent 完成透明*/</span></span><br><span class="line"><span class="selector-tag">-webkit-tap-highlight-color</span>: <span class="selector-tag">transparent</span>;</span><br><span class="line"><span class="comment">/*在移动端浏览器默认的外观在iOS上加上这个属性才能给按钮和输入框自定义样式*/</span></span><br><span class="line"><span class="selector-tag">-webkit-appearance</span>: <span class="selector-tag">none</span>;</span><br><span class="line"><span class="comment">/*禁用长按页面时的弹出菜单*/</span></span><br><span class="line"><span class="selector-tag">img</span>,<span class="selector-tag">a</span> &#123; <span class="attribute">-webkit-touch-callout</span>: none; &#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 移动web开发 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>移动web开发布局</title>
      <link href="/2020/02/05/%E7%A7%BB%E5%8A%A8web%E5%BC%80%E5%8F%91%E5%B8%83%E5%B1%80/"/>
      <url>/2020/02/05/%E7%A7%BB%E5%8A%A8web%E5%BC%80%E5%8F%91%E5%B8%83%E5%B1%80/</url>
      
        <content type="html"><![CDATA[<h2 id="移动web开发布局"><a href="#移动web开发布局" class="headerlink" title="移动web开发布局"></a>移动web开发布局</h2><p>移动端布局主要分为四类：流式布局（百分比布局），flex布局（伸缩布局），rem适配布局，响应式布局。<a id="more"></a></p><h3 id="移动端基础知识"><a href="#移动端基础知识" class="headerlink" title="移动端基础知识"></a>移动端基础知识</h3><p>当前，国内常见的移动端浏览器都是根据webkit修改过来的内核，因此在兼容移动端主流浏览时，处理webkit内核浏览器即可。<!-- more --></p><h4 id="视口"><a href="#视口" class="headerlink" title="视口"></a>视口</h4><p>视口（viewport）就是浏览器显示页面的屏幕区域。视口可分布局视口、视觉视口和理想视口。</p><h5 id="布局视口layout-viewport"><a href="#布局视口layout-viewport" class="headerlink" title="布局视口layout viewport"></a>布局视口layout viewport</h5><p>一般移动设备的浏览器都默认设置了一个布局视口，用于解决早期的PC端页面在手机上显示的问题。</p><p>iOS, Android基本都将这个视口分辨率设置为 980px，所以PC上的网页大多都能在手机上呈现，只不过元素看上去很小，一般默认可以通过<strong>手动缩放网页</strong>。</p><h5 id="视觉视口-visual-viewport"><a href="#视觉视口-visual-viewport" class="headerlink" title="视觉视口 visual viewport"></a>视觉视口 visual viewport</h5><p>字面意思，它是用户正在看到的网站的区域。注意：是网站的区域。</p><p>我们可以通过缩放去操作视觉视口，但不会影响布局视口，布局视口仍保持原来的宽度。</p><h5 id="理想视口-idealviewport"><a href="#理想视口-idealviewport" class="headerlink" title="理想视口 idealviewport"></a>理想视口 idealviewport</h5><p>为了使网站在移动端有最理想的浏览和阅读宽度而设定理想视口，对设备来讲，是最理想的视口尺寸。</p><p>需要手动添加meta视口标签通知浏览器操作。meta视口标签的主要目的是：布局视口的宽度应该与理想视口的宽度一致，简单来说就是设备有多宽，布局视口就有多宽。</p><p>开发最终会使用理想视口，而理想视口就是将布局视口的宽度修改为视觉视口。</p><h5 id="meta标签"><a href="#meta标签" class="headerlink" title="meta标签"></a>meta标签</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width,user-scalable=no,initial-scale=1.0,maximum-scale=1.0,minimum-scale=1.0"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">width: 宽度设置的是viewport宽度，可以设置device-width特殊值</span><br><span class="line">initial-scale: 初始缩放比，大于0 的数字，一般为1.0；</span><br><span class="line">maximum-scale:最大缩放比，大于0 的数字，一般1.0；</span><br><span class="line">minimum-scale:最小缩放比，大于0 的数字，一般1.0；</span><br><span class="line">user-scale：用户是否可以缩放，yes或no(1或0)</span><br></pre></td></tr></table></figure><p>最标准的viewport设置：</p><ol><li>视口宽度和设备保持一致</li><li>视口的默认缩放比例1.0</li><li>不允许用户自行缩放</li><li>最大允许的缩放比例为1.0</li><li>最小允许的缩放比例为1.0</li></ol><h4 id="二倍图"><a href="#二倍图" class="headerlink" title="二倍图"></a>二倍图</h4><h5 id="物理像素"><a href="#物理像素" class="headerlink" title="物理像素"></a>物理像素</h5><p><strong>物理像素</strong>点指的是屏幕显示的最小颗粒，是物理真实存在的。这是厂商在出厂时就设置好了,比如苹果6 是  750* 1334</p><p>一个px的能显示的物理像素点的个数，称为<strong>物理像素比或屏幕像素比</strong></p><p><strong>Retina（视网膜屏幕）</strong>是一种显示技术，可以将把更多的物理像素点压缩至一块屏幕里，从而达到更高的分辨率，并提高屏幕显示的细腻程度。</p><p>在标准的viewport设置中，使用<strong>倍图</strong>来提高图片质量，解决在高清设备中的模糊问题。通常使用二倍图</p><h5 id="背景缩放background-size"><a href="#背景缩放background-size" class="headerlink" title="背景缩放background-size"></a>背景缩放background-size</h5><p>background-size 属性规定背景图像的尺寸</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">background-size:  背景图片宽度 背景图片高度;</span><br></pre></td></tr></table></figure><p>属性值：长度|百分比|cover|contain;</p><p>cover把背景图像扩展至足够大，以使背景图像完全覆盖背景区域。</p><p>contain把图像图像扩展至最大尺寸，以使其宽度和高度完全适应内容区域</p><h4 id="移动开发选择和技术解决方案"><a href="#移动开发选择和技术解决方案" class="headerlink" title="移动开发选择和技术解决方案"></a>移动开发选择和技术解决方案</h4><h5 id="移动端主流方案"><a href="#移动端主流方案" class="headerlink" title="移动端主流方案"></a>移动端主流方案</h5><p>1.单独制作移动端页面（主流）</p><p>通常情况下，网址域名前面加 m(mobile) 可以打开移动端。通过判断设备，如果是移动设备打开，则跳到移动端页面。  </p><p>也就是说，PC端和移动端为两套网站，pc端是pc断的样式，移动端在写一套，专门针对移动端适配的一套网站.</p><p>2.响应式页面兼容移动端（其次）</p><h5 id="移动端技术解决方案"><a href="#移动端技术解决方案" class="headerlink" title="移动端技术解决方案"></a>移动端技术解决方案</h5><p>1.移动端浏览器兼容问题</p><p>移动端浏览器基本以 webkit 内核为主，因此我们就考虑webkit兼容性问题。我们可以放心使用 H5 标签和 CSS3 样式。同时我们浏览器的私有前缀我们只需要考虑添加 webkit 即可</p><p>2.移动端公共样式</p><p>移动端 CSS 初始化推荐使用 normalize.css/</p><p>Normalize.css：保护了有价值的默认值</p><p>Normalize.css：修复了浏览器的bug</p><p>Normalize.css：是模块化的</p><p>Normalize.css：拥有详细的文档</p><p>官网地址： <a href="http://necolas.github.io/normalize.css/" target="_blank" rel="noopener">http://necolas.github.io/normalize.css/</a></p><h5 id="移动端大量使用-CSS3盒子模型box-sizing"><a href="#移动端大量使用-CSS3盒子模型box-sizing" class="headerlink" title="移动端大量使用 CSS3盒子模型box-sizing"></a>移动端大量使用 CSS3盒子模型box-sizing</h5><p>传统模式宽度计算：盒子的宽度 = CSS中设置的width + border + padding </p><p>CSS3盒子模型：     盒子的宽度=  CSS中设置的宽度width 里面包含了 border 和 padding </p><p>也就是说，我们的CSS3中的盒子模型， padding 和 border 不会撑大盒子了</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*CSS3盒子模型*/</span></span><br><span class="line"><span class="selector-tag">box-sizing</span>: <span class="selector-tag">border-box</span>;</span><br><span class="line"><span class="comment">/*传统盒子模型*/</span></span><br><span class="line"><span class="selector-tag">box-sizing</span>: <span class="selector-tag">content-box</span>;</span><br></pre></td></tr></table></figure><p>移动端可以全部使用CSS3 盒子模型</p><p>PC端如果完全需要兼容，就用传统模式，如果不考虑兼容性，就选择 CSS3 盒子模型</p><h5 id="移动端特殊样式"><a href="#移动端特殊样式" class="headerlink" title="移动端特殊样式"></a>移动端特殊样式</h5><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*CSS3盒子模型*/</span></span><br><span class="line"><span class="selector-tag">box-sizing</span>: <span class="selector-tag">border-box</span>;</span><br><span class="line"><span class="selector-tag">-webkit-box-sizing</span>: <span class="selector-tag">border-box</span>;</span><br><span class="line"><span class="comment">/*点击高亮我们需要清除清除  设置为transparent 完成透明*/</span></span><br><span class="line"><span class="selector-tag">-webkit-tap-highlight-color</span>: <span class="selector-tag">transparent</span>;</span><br><span class="line"><span class="comment">/*在移动端浏览器默认的外观在iOS上加上这个属性才能给按钮和输入框自定义样式*/</span></span><br><span class="line"><span class="selector-tag">-webkit-appearance</span>: <span class="selector-tag">none</span>;</span><br><span class="line"><span class="comment">/*禁用长按页面时的弹出菜单*/</span></span><br><span class="line"><span class="selector-tag">img</span>,<span class="selector-tag">a</span> &#123; <span class="attribute">-webkit-touch-callout</span>: none; &#125;</span><br></pre></td></tr></table></figure><h4 id="设置视口标签及初始化样式"><a href="#设置视口标签及初始化样式" class="headerlink" title="设置视口标签及初始化样式"></a>设置视口标签及初始化样式</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, user-scalable=no,initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"css/normalize.css"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"css/index.css"</span>&gt;</span></span><br></pre></td></tr></table></figure><p>常用初始化样式</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="attribute">max-width</span>: <span class="number">540px</span>;</span><br><span class="line">  <span class="attribute">min-width</span>: <span class="number">320px</span>;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span> auto;</span><br><span class="line">  <span class="attribute">font</span>: normal <span class="number">14px</span>/<span class="number">1.5</span> Tahoma,<span class="string">"Lucida Grande"</span>,Verdana,<span class="string">"Microsoft Yahei"</span>,STXihei,hei;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#000</span>;</span><br><span class="line">  <span class="attribute">background</span>: <span class="number">#f2f2f2</span>;</span><br><span class="line">  <span class="attribute">overflow-x</span>: hidden;</span><br><span class="line">  <span class="attribute">-webkit-tap-highlight-color</span>: transparent;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="流式布局"><a href="#流式布局" class="headerlink" title="流式布局"></a>流式布局</h3><p>流式布局，就是百分比布局，也称非固定像素布局。通过盒子的宽度设置成百分比来根据屏幕的宽度来进行伸缩，不受固定像素的限制，内容向两侧填充。</p><p>网页中主要的划分区域的尺寸使用 <strong>百分数</strong>（搭配min-width, max-width 属性使用），例如，设置网页的主题宽度为80%，min-width为960px。图片也做类似处理（width：100%， max-width 一般设置为图片本身的尺寸，防止被拉伸而失真）。</p><h4 id="布局特点"><a href="#布局特点" class="headerlink" title="布局特点"></a>布局特点</h4><p>屏幕分辨了变化时，页面里元素的大小会变化但布局不会改变。<strong>【如果屏幕太大或者太小都会导致元素无法正常显示】</strong></p><h4 id="设计方法"><a href="#设计方法" class="headerlink" title="设计方法"></a>设计方法</h4><p>使用%百分比定义宽度，高度大都是用px来固定住，可以根据可视区域（viewport）和父元素的实时尺寸进行调整，尽可能的适应各种分辨率。往往配合max-width 和 min-width等属性控制尺寸流动范围以免过大或者过小影响阅读。</p><h4 id="主要缺点"><a href="#主要缺点" class="headerlink" title="主要缺点"></a>主要缺点</h4><p>这种布局方式在Web前端开发的早期历史上，用来应对不同尺寸的PC屏幕（那时屏幕尺寸的差异不会太大），在当今的移动端开发也是常用布局方式，但是<strong>缺点明显：</strong></p><ol><li>如果屏幕尺寸过大或过小，原始设计不能够正常显示。</li><li>宽度使用百分比定义，但是高度和文字大小使用px来固定无法实现高度上的流式效果，显示效果会不够协调。</li></ol><h3 id="felx布局（伸缩布局）"><a href="#felx布局（伸缩布局）" class="headerlink" title="felx布局（伸缩布局）"></a>felx布局（伸缩布局）</h3><h4 id="flex布局简述"><a href="#flex布局简述" class="headerlink" title="flex布局简述"></a>flex布局简述</h4><p>felx是flexible Box的缩写，意为“弹性布局”，用来为盒状模型提供最大的灵活性，任何一个容器都可以指定为felx布局。felx布局操作方便，布局极其简单，移动端使用比较广泛，PC端浏览器支持情况差，IE11或更低版不支持flex或仅部分支持。</p><p><strong>flex布局原理</strong></p><ul><li>当父盒子设置为flex布局之后，子元素的float，clear和vertical-align属性将失效。</li><li>采用flex布局的元素，称为felx容器（flex container），简称“容器”，它的所有的子元素自动称为容器成员，称为flex项目（flex item），简称“项目”。</li></ul><p>总结</p><p><strong>总结</strong>：就是通过给父盒子添加flex属性，来控制子盒子的位置和排列方式。</p><h4 id="flex布局父项常见属性"><a href="#flex布局父项常见属性" class="headerlink" title="flex布局父项常见属性"></a>flex布局父项常见属性</h4><ol><li>flex-direction：设置主轴的方向</li><li>justify-content：设置主轴上的子元素排列方式</li><li>flex-wrap：设置子元素是否换行</li><li>align-content：设置侧轴上的子元素的排列方式（多行）</li><li>align-items：设置侧轴上的子元素排列方式（单行）</li><li>flex-flow：复合属性，相当于同时设置了felx-direction和flex-wrap</li></ol><h5 id="flex-direction-主轴方向"><a href="#flex-direction-主轴方向" class="headerlink" title="flex-direction 主轴方向"></a>flex-direction 主轴方向</h5><ul><li>在flex 布局中，是分为主轴和侧轴两个方向，同样的叫法有：行和列， x轴和y轴</li><li>默认主轴方向就是x轴方向，水平向右</li><li>默认侧轴方向就是y轴方向，水平向下</li></ul><img src="http://a1.qpic.cn/psc?/V10aCLDm3zQV1S/mPdwwrXc9C9STJBS6xNM92QP4AZxhkzxyuamPLdjq.QtyKA49DITpE04q5VAmEtcxvTnVwuefbiG7Ch048tMxQ!!/c&ek=1&kp=1&pt=0&bo=8QEiAQAAAAADF.E!&tl=1&vuin=1322346367&tm=1581217200&sce=60-2-2&rf=viewer_4"><p><strong>注意</strong>：主轴和侧轴是会改变的，就看flex-direction设置谁为主轴，剩下的就是侧轴。</p><table><thead><tr><th align="center">row</th><th>默认值：从左到右</th></tr></thead><tbody><tr><td align="center">row-reverse</td><td>从右到左</td></tr><tr><td align="center"><strong>column</strong></td><td><strong>从上到下</strong></td></tr><tr><td align="center">column-reverse</td><td>从下到上</td></tr></tbody></table><h5 id="justify-content-属性"><a href="#justify-content-属性" class="headerlink" title="justify-content 属性"></a>justify-content 属性</h5><table><thead><tr><th align="center">flex-start</th><th>默认值：从头开始 如果主轴是x轴，则从左到右</th></tr></thead><tbody><tr><td align="center">flex-end</td><td>从尾部开始排列</td></tr><tr><td align="center">center</td><td>在主轴居中对齐（如果主轴是x轴 则水平居中）</td></tr><tr><td align="center">space-around</td><td>平分剩余空间</td></tr><tr><td align="center">space-between</td><td>先两边贴边 再平分剩余空间（重要）</td></tr></tbody></table><h5 id="flex-wrap-换行"><a href="#flex-wrap-换行" class="headerlink" title="flex-wrap 换行"></a>flex-wrap 换行</h5><ul><li>默认情况下，项目都排在一条线上（轴线）。flex-wrap属性定义，flex布局中默认是不换行的</li><li>nowrap 不换行</li><li>wrap换行</li></ul><h5 id="align-items-侧轴子元素（-单行排列）"><a href="#align-items-侧轴子元素（-单行排列）" class="headerlink" title="align-items 侧轴子元素（ 单行排列）"></a>align-items 侧轴子元素（ 单行排列）</h5><ul><li>该属性是控制子项在侧轴（默认是y轴）上的排列方式 在子项为单行的时候使用</li><li>flex-start 从头部开始</li><li>flex-end 从尾部开始</li><li>center 居中显示</li><li>stretch 拉伸</li></ul><h5 id="align-content-侧轴子元素（多行排列）"><a href="#align-content-侧轴子元素（多行排列）" class="headerlink" title="align-content 侧轴子元素（多行排列）"></a>align-content 侧轴子元素（多行排列）</h5><p>align-content设置子项在侧轴上的排列方式 并且只能用于子项出现换行的情况（多行），在单行的下是没有效果的。</p><table><thead><tr><th align="center">flex-start</th><th>默认值在侧轴的头部开始排列</th></tr></thead><tbody><tr><td align="center">flex-end</td><td>在侧轴的尾部开始排列</td></tr><tr><td align="center"><strong>center</strong></td><td><strong>在侧轴的中间显示</strong></td></tr><tr><td align="center"><strong>space-around</strong></td><td><strong>子项在侧轴平分剩余空间</strong></td></tr><tr><td align="center"><strong>space-between</strong></td><td><strong>子项在侧轴先分布两边，在平分剩余空间</strong></td></tr><tr><td align="center"><strong>stretch</strong></td><td><strong>设置直线法元素高度平分父元素高度</strong></td></tr></tbody></table><h5 id="flex-flow属性"><a href="#flex-flow属性" class="headerlink" title="flex-flow属性"></a>flex-flow属性</h5><p>flex-flow属性是flex-direction和flex-wrap属性的复合属性</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">flex-flow</span>: <span class="selector-tag">row</span> <span class="selector-tag">wrap</span>;</span><br></pre></td></tr></table></figure><h4 id="align-content-和-align-items的区别"><a href="#align-content-和-align-items的区别" class="headerlink" title="align-content 和 align-items的区别"></a>align-content 和 align-items的区别</h4><ol><li>align-items 适用于单行情况下，只有上对齐、下对齐、居中和拉伸</li><li>align-content适用于换行（多行）的情况下（单行情况下无效），可以设置上对齐、下对齐、居中、拉伸以及平均分配剩余空间等属性值。</li></ol><p><strong>总结</strong>： 单行找align-items 多行找align-content</p><h4 id="flex布局子项常见属性"><a href="#flex布局子项常见属性" class="headerlink" title="flex布局子项常见属性"></a>flex布局子项常见属性</h4><ol><li>flex：子项目占得份数</li><li>align-self：控制子项自己在侧轴上的排列顺序</li><li>order： 定义子项的排列顺序（前后顺序）</li></ol><h5 id="flex属性"><a href="#flex属性" class="headerlink" title="flex属性"></a>flex属性</h5><p>flex属性定义子项目<strong>分配剩余空间</strong>，用flex来表示占多少份数</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.item</span> &#123;</span><br><span class="line"><span class="attribute">flex</span>: &lt;number&gt;; <span class="comment">/*默认值为0*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="align-self-子项-侧轴排列"><a href="#align-self-子项-侧轴排列" class="headerlink" title="align-self 子项 侧轴排列"></a>align-self 子项 侧轴排列</h5><p>align-self 属性允许单个项目有与其他项目不一样的对齐方式，可覆盖align-items属性。</p><p>默认值为auto，表示继承父元素的align-items属性，如果没有父元素，则等同于stretch。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">span</span><span class="selector-pseudo">:nth-child(2)</span> &#123;</span><br><span class="line">      <span class="comment">/* 设置自己在侧轴上的排列方式 */</span></span><br><span class="line">      <span class="attribute">align-self</span>: flex-end;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="order-项目排列顺序"><a href="#order-项目排列顺序" class="headerlink" title="order 项目排列顺序"></a>order 项目排列顺序</h5><p>数值越小，排列越靠前，默认为0；</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.item</span> &#123;</span><br><span class="line">    <span class="attribute">order</span>: &lt;number&gt;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="rem适配布局"><a href="#rem适配布局" class="headerlink" title="rem适配布局"></a>rem适配布局</h3><h4 id="rem基础"><a href="#rem基础" class="headerlink" title="rem基础"></a>rem基础</h4><p><strong>rem和em区别</strong>  rem（root em）和 em 都是顺茵不同网页字体大小展现而产生的。其中，em 是相对于其父元素，在实际应用中会带来许多不便；而rem是始终相对于html大小，及页面根元素。</p><p>比如，根元素（html）设置font-size=12px; 非根元素设置width:2rem; 则换成px表示就是24px。</p><p><strong>rem的优势</strong>：父元素文字大小可能不一致， 但是整个页面只有一个html，可以很好来控制整个页面的元素大小。</p><p><strong>特点：</strong> 包裹文字的各元素的尺寸采用rem做单位，而页面的主要划分区域的尺寸仍使用百分数或px做单位（同「流式布局」或「静态/固定布局」）<strong>。</strong>早期浏览器不支持整个页面按比例缩放，仅支持网页内文字尺寸的放大，这种情况下。使用rem做单位，可以使包裹文字的元素随着文字的缩放而缩放。</p><h4 id="媒体查询"><a href="#媒体查询" class="headerlink" title="媒体查询"></a>媒体查询</h4><h5 id="什么是媒体查询"><a href="#什么是媒体查询" class="headerlink" title="什么是媒体查询"></a>什么是媒体查询</h5><p>媒体查询（Media Query） 是CSS3新语法。</p><ul><li>使用@media查询，可以针对不同的媒体类型定义不同的样式</li><li>@media可以针对不同的屏幕尺寸设置不同的样式</li><li>当重置浏览器大小时，页面会根据浏览器的宽度和高度重新渲染页面</li><li>目前针对很多苹果手机，Android手机、平板等设备都用到媒体查询</li></ul><h5 id="媒体查询语法规范"><a href="#媒体查询语法规范" class="headerlink" title="媒体查询语法规范"></a>媒体查询语法规范</h5><ul><li>用@media开头 注意@符号</li><li>mediatype 媒体类型</li><li>关键字 and not only</li><li>media feature 媒体特性必须有小括号包含</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">@<span class="keyword">media</span> mediatype and|not|only (meadia feature) &#123;</span><br><span class="line"><span class="selector-tag">CSS-CODE</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li><p>mediatype 查询类型</p><p>​    将不同的终端设备划分成不同的类型，称为媒体查询。</p><table><thead><tr><th align="center">值</th><th>解释说明</th></tr></thead><tbody><tr><td align="center">all</td><td>用于所有设备</td></tr><tr><td align="center">print</td><td>用于打印机和打印预览</td></tr><tr><td align="center">screen</td><td>用于所有电脑屏幕、平板电脑、智能手机等</td></tr></tbody></table></li><li><p>关键字</p><p>关键字是将媒体类型或多个媒体特性连接到一起作为媒体查询的条件。</p><ul><li>and：可以将多个媒体特性连接到一起，相当于“且”的意思</li><li>not：排除某个媒体类型，相当于“非”的意思，肯省略</li><li>only：制定某个特殊的媒体类型，可以省略</li></ul></li><li><p>媒体特性</p><p>每种媒体查询都有各自不同的特性，根据不同的媒体类型设置不同的展示风格。</p></li></ol><table><thead><tr><th align="center">值</th><th>解释说明</th></tr></thead><tbody><tr><td align="center">width</td><td>定义输出设备中页面课件区域的宽度</td></tr><tr><td align="center">min-width</td><td>定义输出设备中页面最小可见区域宽度</td></tr><tr><td align="center">max-width</td><td>定义输出设备中页面最大可见区域宽度</td></tr></tbody></table><p>​    4. 媒体查询书写规则</p><p><strong>注意：</strong>为了防止混乱，媒体查询我们要按照从小到大或者从大到小的顺序来写，推荐从小到大写，这样代码更简洁。</p><img src="http://m.qpic.cn/psc?/V10aCLDm3zQV1S/I4FpFoYXzdFm.OkebEsY*jQawNHeGrjnxg8RM1ByXNwLJwnSju4bYmHjGwP.DUM3.RNcRg3VOmcZL5YLlednE4HXo2ITKizNM3W7T3KvOwU!/b&bo=lQJYAQAAAAADB.w!&rf=viewer_4"><h4 id="less-基础"><a href="#less-基础" class="headerlink" title="less 基础"></a>less 基础</h4><h5 id="维护css的弊端"><a href="#维护css的弊端" class="headerlink" title="维护css的弊端"></a>维护css的弊端</h5><p>css是一门非程序式语言，没有变量、函数、SCOPE(作用域)等概念。</p><ul><li>css需要书写大量看似没有逻辑的代码，css冗余是比较高。</li><li>不方便维护及扩展，不利于复用</li><li>css没有很好的计算能力</li><li>非前端开发工程师，往往会因为缺少css编写经验而很难写出组织良好且易于维护的css代码项目。</li></ul><h5 id="less介绍"><a href="#less介绍" class="headerlink" title="less介绍"></a>less介绍</h5><p>less（LeanerStyle sheets的缩写）是一门css扩展语言，也成为css预处理器。作为css的一种形式的扩展，他并没有减少css的功能，而是在现有的css的基础上，为css加入程序式语言的特性。一句话：less是一门css预处理语言，它扩展了css的动态属性。</p><p>它在css的语言基础上，引入了变量，Mixin（混入），运算以及函数等功能，大大简化了css的编写，并且降低了css的维护成本，就像它的名称一样，less可以让我们用更少的代码做更多的事情。</p><p>less中文网址：<a href="http://lesscss.cn/" target="_blank" rel="noopener">http://lesscss.cn/</a></p><p>其他常见的css预处理器;Sass,less,Stylus</p><h5 id="less：变量规范"><a href="#less：变量规范" class="headerlink" title="less：变量规范"></a>less：变量规范</h5><p>变量是指没有固定的值，可以改变。css中的一些颜色和数值等经常使用。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@变量名：值；</span><br></pre></td></tr></table></figure><ol><li>必须要有@为前缀</li><li>不能包含特殊符号</li><li>不能以数字开头</li><li>大小写敏感</li></ol><h5 id="Less编译-vscode插件"><a href="#Less编译-vscode插件" class="headerlink" title="Less编译 vscode插件"></a>Less编译 vscode插件</h5><p>Easy Less插件用来把less文件编译为css文件。下载安装Easy Less插件，只要保存一下less文件，就会自动生成css文件。</p><h5 id="Less-嵌套"><a href="#Less-嵌套" class="headerlink" title="Less 嵌套"></a>Less 嵌套</h5><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 将css改为less</span></span><br><span class="line"><span class="selector-id">#header</span> <span class="selector-class">.logo</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#header</span> &#123;</span><br><span class="line">    <span class="selector-class">.logo</span> &#123;</span><br><span class="line">       <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果遇见 （交集|伪类|伪元素选择器） ，利用&amp;进行连接</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">a</span>:hover&#123;</span><br><span class="line">    <span class="attribute">color</span>:red;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">a</span>&#123;</span><br><span class="line">  <span class="selector-tag">&amp;</span><span class="selector-pseudo">:hover</span>&#123;</span><br><span class="line">      <span class="attribute">color</span>:red;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="less-运算"><a href="#less-运算" class="headerlink" title="less 运算"></a>less 运算</h5><p>任何数字、颜色或者变量都可以参与运算。就是Less提供了加（+）、减（-）、乘（*）、除（/）算术运算。</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*Less 里面写*/</span></span><br><span class="line"><span class="variable">@witdh:</span> <span class="number">10px</span> + <span class="number">5</span>;</span><br><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">    <span class="attribute">border</span>: <span class="variable">@witdh</span> solid red;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*生成的css*/</span></span><br><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">15px</span> solid red;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*Less 甚至还可以这样 */</span></span><br><span class="line"><span class="attribute">width</span>: (<span class="variable">@width</span> + <span class="number">5</span>) * <span class="number">2</span>;</span><br></pre></td></tr></table></figure><ul><li><p>乘号（*）和除号（/）的写法  </p></li><li><p>运算符中间左右有个空格隔开 1px + 5</p></li><li><p>对于两个不同的单位的值之间的运算，运算结果的值取第一个值的单位 </p></li><li><p>如果两个值之间只有一个值有单位，则运算结果就取该单位</p><p>rem适配方案</p></li></ul><p>1.让一些不能等比自适应的元素，达到当设备尺寸发生改变的时候，等比例适配当前设备。</p><p>2.使用媒体查询根据不同设备按比例设置html的字体大小，然后页面元素使用rem做尺寸单位，当html字体大小变化元素尺寸也会发生变化，从而达到等比缩放的适配。</p><h5 id="rem实际开发适配方案1"><a href="#rem实际开发适配方案1" class="headerlink" title="rem实际开发适配方案1"></a>rem实际开发适配方案1</h5><p>①假设设计稿是750px</p><p>②假设我们把整个屏幕划分为15等份（划分标准不一可以是20份也可以是10等份）</p><p>③每一份作为html字体大小，这里就是50px</p><p>④那么在320px设备的时候，字体大小为320/15就是  21.33px</p><p>⑤用我们页面元素的大小除以不同的 html字体大小会发现他们比例还是相同的</p><p>⑥比如我们以750为标准设计稿</p><p>⑦一个100<em>100像素的页面元素在  750屏幕下，  就是 100/ 50  转换为rem  是  2rem</em>2rem  比例是1比1</p><p>⑧320屏幕下，  html字体大小为21.33   则 2rem=  42.66px  此时宽和高都是 42.66  但是宽和高的比例还是 1比1</p><p>⑨但是已经能实现不同屏幕下  页面元素盒子等比例缩放的效果</p><p>总结：</p><p>①最后的公式：页面元素的rem值 =  页面元素值（px） /  （屏幕宽度  /  划分的份数）</p><p>②屏幕宽度/划分的份数就是 htmlfont-size 的大小</p><p>③或者：页面元素的rem值 =  页面元素值（px） /  html font-size 字体大小</p><h5 id="rem-适配方案2"><a href="#rem-适配方案2" class="headerlink" title="rem 适配方案2"></a>rem 适配方案2</h5><p>手机淘宝团队出的简洁高效 移动端适配库</p><p>我们再也不需要在写不同屏幕的媒体查询，因为里面js做了处理</p><p>它的原理是把当前设备划分为10等份，但是不同设备下，比例还是一致的。</p><p>我们要做的，就是确定好我们当前设备的html 文字大小就可以了</p><p>比如当前设计稿是 750px， 那么我们只需要把 html 文字大小设置为 75px(750px / 10) 就可以</p><p><strong>里面页面元素rem值： 页面元素的px 值 /  75</strong>  </p><p>剩余的，让flexible.js来去算</p><p>github地址：<a href="https://link.jianshu.com/?t=https://github.com/amfe/lib-flexible" target="_blank" rel="noopener">https://github.com/amfe/lib-flexible</a></p><p>总结：</p><p>因为flexible是默认将屏幕分为10等分</p><p>但是当屏幕大于750的时候希望不要再去重置html字体了</p><p>所以要自己通过媒体查询设置一下</p><p>并且要把权重提到最高</p><p>VSCode  px 转换rem 插件 cssrem </p><p>因为cssrem中css自动转化为rem是参照默认插件的16转换的所以需要自己配置</p><img src="http://m.qpic.cn/psc?/V10aCLDm3zQV1S/I4FpFoYXzdFm.OkebEsY*nic5t5V*O9pCIMCmX4i6n5.m80rsbtV2eIW4zac8.GG2KElEuAgvomzuIKVb2NjsS2SebxxItyIhTSJ7KJlRos!/b&bo=yQIYAgAAAAARF*E!&rf=viewer_4"><img src="http://m.qpic.cn/psc?/V10aCLDm3zQV1S/I4FpFoYXzdFm.OkebEsY*i7k3PMsI1cQd1TRRlN4alQ9.5h.RxZfKE6UuyYvxbRQDvY30UgeGCUBVzTJbeoa6Lcuv5peEFJENYW6Si7jjao!/b&bo=NgIgAgAAAAARFzY!&rf=viewer_4"><h3 id="响应式布局"><a href="#响应式布局" class="headerlink" title="响应式布局"></a>响应式布局</h3><h4 id="响应式开发原理"><a href="#响应式开发原理" class="headerlink" title="响应式开发原理"></a>响应式开发原理</h4><p>就是使用媒体查询针对不同宽度的设备进行布局和样式的设置，从而适配不同设备的目的。可以把响应式布局看作是流式布局和自适应布局设计理念的融合。</p><p>设备的划分情况：</p><ul><li>小于768的为超小屏幕（手机）</li><li>768~992之间的为小屏设备（平板）</li><li>992~1200的中等屏幕（桌面显示器）</li><li>大于1200的宽屏设备（大桌面显示器）</li></ul><h4 id="响应式布局容器"><a href="#响应式布局容器" class="headerlink" title="响应式布局容器"></a>响应式布局容器</h4><p>响应式需要一个父级做为布局容器，来配合子级元素来实现变化效果。</p><p>原理就是在不同屏幕下，通过媒体查询来改变这个布局容器的大小，再改变里面子元素的排列方式和大小，从而实现不同屏幕下，看到不同的页面布局和样式变化。</p><p>父容器版心的尺寸划分</p><ul><li>超小屏幕（手机，小于 768px）：设置宽度为 100%</li><li>小屏幕（平板，大于等于 768px）：设置宽度为 750px</li><li>中等屏幕（桌面显示器，大于等于 992px）：宽度设置为 970px</li><li>大屏幕（大桌面显示器，大于等于 1200px）：宽度设置为 1170px </li></ul><p>但是我们也可以根据实际情况自己定义划分</p><h4 id="设计方法-1"><a href="#设计方法-1" class="headerlink" title="设计方法"></a>设计方法</h4><p>　　<strong>媒体查询+流式布局</strong>。通常使用 @media 媒体查询 和网格系统 (Grid System) 配合相对布局单位进行布局，实际上就是综合响应式、流动等上述技术通过 CSS 给单一网页不同设备返回不同样式的技术统称。</p><p><strong>优点</strong>：适应pc和移动端，如果足够耐心，效果完美。</p><p><strong>缺点</strong>：（1）媒体查询是有限的，也就是可以枚举出来的，只能适应主流的宽高。（2）要匹配足够多的屏幕大小，工作量不小，设计也需要多个版本。</p><h3 id="bootstrap"><a href="#bootstrap" class="headerlink" title="bootstrap"></a>bootstrap</h3><h4 id="Bootstrap简介"><a href="#Bootstrap简介" class="headerlink" title="Bootstrap简介"></a>Bootstrap简介</h4><p>Bootstrap 来自 Twitter（推特），是目前最受欢迎的前端框架。Bootstrap 是基于HTML、CSS 和 JAVASCRIPT 的，它简洁灵活，使得 Web 开发更加快捷。</p><p><a href="lhttp://www.bootcss.com/" target="_blank" rel="noopener">中文网</a>  <a href="lhttp://getbootstrap.com/" target="_blank" rel="noopener">官网</a>  <a href="https://v3.bootcss.com" target="_blank" rel="noopener">推荐网站</a></p><p>框架：顾名思义就是一套架构，它有一套比较完整的网页功能解决方案，而且控制权在框架本身，有预制样式库、组件和插件。使用者要按照框架所规定的某种规范进行开发。</p><h4 id="bootstrap优点"><a href="#bootstrap优点" class="headerlink" title="bootstrap优点"></a>bootstrap优点</h4><ul><li>标准化的html+css编码规范</li><li>提供了一套简洁、直观、强悍的组件</li><li>有自己的生态圈，不断的更新迭代</li><li>让开发更简单，提高了开发的效率</li></ul><h4 id="版本简介"><a href="#版本简介" class="headerlink" title="版本简介"></a>版本简介</h4><p>2.x.x：停止维护,兼容性好,代码不够简洁，功能不够完善。</p><p>3.x.x：目前使用最多,稳定,但是放弃了IE6-IE7。对 IE8 支持但是界面效果不好,偏向用于开发响应式布局、移动设备优先的WEB 项目。</p><p>4.x.x：最新版，目前还不是很流行</p><h4 id="bootstrap基本使用"><a href="#bootstrap基本使用" class="headerlink" title="bootstrap基本使用"></a>bootstrap基本使用</h4><p>Bootstrap 使用四步曲： </p><ol><li><p>创建文件夹结构  —–bootstrap单独新建一个文件夹</p></li><li><p>创建 html 骨架结构</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"zh-CN"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"IE=edge"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 上述3个meta标签*必须*放在最前面，任何其他内容都*必须*跟随其后！ --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Bootstrap 101 Template<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- Bootstrap --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">"css/bootstrap.min.css"</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- HTML5 shim and Respond.js for IE8 support of HTML5 elements and media queries --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- WARNING: Respond.js doesn't work if you view the page via file:// --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--[if lt IE 9]&gt;</span></span><br><span class="line"><span class="comment">      &lt;script src="//cdn.bootcss.com/html5shiv/3.7.2/html5shiv.min.js"&gt;&lt;/script&gt;</span></span><br><span class="line"><span class="comment">      &lt;script src="//cdn.bootcss.com/respond.js/1.4.2/respond.min.js"&gt;&lt;/script&gt;</span></span><br><span class="line"><span class="comment">    &lt;![endif]--&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>你好，世界！<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- jQuery (necessary for Bootstrap's JavaScript plugins) --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- Include all compiled plugins (below), or include individual files as needed --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/bootstrap.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>引入相关样式文件</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;!<span class="selector-tag">--</span> <span class="selector-tag">Bootstrap</span> 核心样式<span class="selector-tag">--</span>&gt;</span><br><span class="line">&lt;link rel="stylesheet" href="bootstrap/css/bootstrap.min.css"&gt;</span><br></pre></td></tr></table></figure></li><li><p>书写内容</p><p>直接拿Bootstrap 预先定义好的样式来使用</p><p>修改Bootstrap 原来的样式，注意权重问题</p><p>学好Bootstrap 的关键在于知道它定义了哪些样式，以及这些样式能实现什么样的效果</p></li></ol><h4 id="bootstrap布局容器"><a href="#bootstrap布局容器" class="headerlink" title="bootstrap布局容器"></a>bootstrap布局容器</h4><p>Bootstrap 需要为页面内容和栅格系统包裹一个 .container 或者.container-fluid 容器，它提供了两个作此用处的类。</p><p>.container</p><ul><li>响应式布局的容器  固定宽度</li><li>大屏 ( &gt;=1200px)  宽度定为 1st</li><li>中屏 ( &gt;=992px)   宽度定为  970px</li><li>小屏 ( &gt;=768px)   宽度定为  750px</li><li>超小屏  (100%) </li></ul><p>.container-fluid</p><ul><li>流式布局容器 百分百宽度</li><li>占据全部视口（viewport）的容器。</li></ul><h4 id="bootstrap栅格系统"><a href="#bootstrap栅格系统" class="headerlink" title="bootstrap栅格系统"></a>bootstrap栅格系统</h4><p>Bootstrap提供了一套响应式、移动设备优先的流式栅格系统，随着屏幕或视口（viewport）尺寸的增加，系统会自动分为最多12列。</p><p>栅格系统用于通过一系列的行（row）与列（column）的组合来创建页面布局，你的内容就可以放入这些创建好的布局中。</p><ul><li>按照不同屏幕划分为1~12 等份</li><li>行（row） 可以去除父容器作用15px的边距</li><li>xs-extra small：超小； sm-small：小；  md-medium：中等； lg-large：大；</li><li>列（column）大于 12，多余的“列（column）”所在的元素将被作为一个整体另起一行排列</li><li>每一列默认有左右15像素的 padding</li><li>可以同时为一列指定多个设备的类名，以便划分不同份数  例如 class=”col-md-4 col-sm-6”</li></ul><p><strong>栅格嵌套</strong></p><p>栅格系统内置的栅格系统将内容再次嵌套。简单理解就是一个列内再分成若干份小列。我们可以通过添加一个新的 .row 元素和一系列 .col-sm-* 元素到已经存在的 .col-sm-*元素内。</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;!<span class="selector-tag">--</span> 列嵌套 <span class="selector-tag">--</span>&gt;</span><br><span class="line"> &lt;div class="col-sm-4"&gt;</span><br><span class="line">    &lt;div class="row"&gt;</span><br><span class="line">         &lt;div class="col-sm-6"&gt;小列&lt;/div&gt;</span><br><span class="line">         &lt;div class="col-sm-6"&gt;小列&lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><p><strong>列偏移</strong></p><p>使用 .col-md-offset-* 类可以将列向右侧偏移。这些类实际是通过使用 * 选择器为当前元素增加了左侧的边距（margin）。</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;!<span class="selector-tag">--</span> 列偏移 <span class="selector-tag">--</span>&gt;</span><br><span class="line">  &lt;div class="row"&gt;</span><br><span class="line">      &lt;div class="col-lg-4"&gt;1&lt;/div&gt;</span><br><span class="line">      &lt;div class="col-lg-4 col-lg-offset-4"&gt;2&lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br></pre></td></tr></table></figure><p><strong>列排序</strong></p><p>通过使用 .col-md-push-* 和 .col-md-pull-* 类就可以很容易的改变列（column）的顺序。</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;!<span class="selector-tag">--</span> 列排序 <span class="selector-tag">--</span>&gt;</span><br><span class="line">  &lt;div class="row"&gt;</span><br><span class="line">      &lt;div class="col-lg-4 col-lg-push-8"&gt;左侧&lt;/div&gt;</span><br><span class="line">      &lt;div class="col-lg-8 col-lg-pull-4"&gt;右侧&lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br></pre></td></tr></table></figure><p><strong>响应式工具</strong></p><p>为了加快对移动设备友好的页面开发工作，利用媒体查询功能，并使用这些工具类可以方便的针对不同设备展示或隐藏页面内容。</p><table><thead><tr><th align="center">类名</th><th align="center">超小屏</th><th align="center">小屏</th><th align="center">中屏</th><th align="center">大屏</th></tr></thead><tbody><tr><td align="center">.hidden-xs</td><td align="center">隐藏</td><td align="center">可见</td><td align="center">可见</td><td align="center">可见</td></tr><tr><td align="center">.hidden-sm</td><td align="center">可见</td><td align="center">隐藏</td><td align="center">可见</td><td align="center">可见</td></tr><tr><td align="center">.hidden-md</td><td align="center">可见</td><td align="center">可见</td><td align="center">隐藏</td><td align="center">可见</td></tr><tr><td align="center">.hidden-lg</td><td align="center">可见</td><td align="center">可见</td><td align="center">可见</td><td align="center">隐藏</td></tr></tbody></table><p>参考文章：<a href="https://www.cnblogs.com/yanayana/p/7066948.html" target="_blank" rel="noopener">https://www.cnblogs.com/yanayana/p/7066948.html</a></p>]]></content>
      
      
      <categories>
          
          <category> 移动web开发 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>2019的最后一次日暮</title>
      <link href="/2019/12/31/2019%E7%9A%84%E6%9C%80%E5%90%8E%E4%B8%80%E6%AC%A1%E6%97%A5%E6%9A%AE/"/>
      <url>/2019/12/31/2019%E7%9A%84%E6%9C%80%E5%90%8E%E4%B8%80%E6%AC%A1%E6%97%A5%E6%9A%AE/</url>
      
        <content type="html"><![CDATA[<p>哈尔滨的气温一如往常–零下20多度的气温让人不敢在外面停留，就连去食堂吃个饭都小步慢跑，同时还得注意脚下光滑的地面，可能一不留神就滑倒了。气温虽然很低，还是太阳公公还是勇敢的挂在了哈尔滨的蓝天上，从屋里面透过窗户往外看外面的天空依然那么美。</p><p>冬天的哈尔滨太阳太阳很快就落下了，今天下午4点在图书馆复习的时候，一抬头，发现了这2019年的最后一次日暮，从发现一直到它完全消失……<a id="more"></a></p><img src="http://a1.qpic.cn/psc?/V10aCLDm3NRTyd/mPdwwrXc9C9STJBS6xNM9yDcsBFao.F3BJpWFIwG3ZUKCU0wTM*iHAcMMCTAQXi6qI7gJWJNRnQYH0vwIDrNdg!!/b&bo=OASgBQAAAAARAK4!&rf=mood_app"><p>很多人都说21世纪的十年代就结束了。确实是的，我是一个时空观念很敏感的人，每每到一年结束的时候都会莫名有很多感慨，很多时候这种感叹都是庸人自扰。昨天在知乎上看到一句话：时间是人类发明出来记录世界变化的工具，可是也给人类增加了许多感叹的理由。或许，时间本身就没有什么意义，只是人们赋予了它太多所谓的内涵。</p><p>看到这最后的日暮，我突然来了“灵感”，2019最后一次日暮，听着轻音乐，短短几个字再配上这个图，仿佛也有很多的意境，想提笔写点什么，却只有那几个字，最后憋出了，百十字的“诗”。</p><p>​                        2019的最后一个日暮<br>​                        没来得及向它挥一挥手<br>​                        就要匆匆溜走了<br>​                        所有的故事<br>​                        都将随着它的离去而离去<br>​                        不必为此而感到难过<br>​                        因为我们正书写着关于它的记忆<br>​                        </p><p>​                        2019的最后一个日暮<br>​                        不必向它挥手<br>​                        我知道<br>​                        明天的黎明<br>​                        它依然守候</p><p>​                        2019的最后一个日暮<br>​                        已经不见踪影<br>​                        明天再见                    </p><p>“诗”很烂，可一有点感触还是会下意识拿起笔写。生活嘛，还是要有一点记录的。</p><p>回忆2019，发现收获还是不少的，最起码很多没去做过的事情尝试做了，大学已经过去了一大半，努力方向也大概找到了</p><p>首先关于学习方面，年初的时候，觉得要好好学习java，用寒假打工挣的钱买了一套课程，把基础部分学了，感觉啥也不会，后来接触到了前端，觉得前端挺有意思，慢慢转向了前端的学习，那套课程也就撂下了。大概从暑假前后开始决定要好好学前端，然而暑假在一个多月，只学习了几天便沉迷于大秦帝国电视剧无法自拔，一直到大三开学后才继续学习，到现在刚把jQuery学完，同时又是学着忘着。有时候也很迷茫，特别是学JavaScript基本知识的时候，对于一些概念不是很了解，似懂非懂，到了最近看了jquery突然觉得非常简单，确实简单，也发现了如果前面的知识不是很了解的话，框架好用是好用，但终究只是知其然而不知其所以然，可能就真是码农了。所以我还是想着假期找点时间在把js看一看，理解透彻。</p><p>其次呢是个人的生活方面，这一年把哈尔滨的转了转，自己骑着车子或者是和同学一起，没有一直呆在学校，这是我觉得很好的。还有今年暑假7月份，自己一个人去了沈阳看了盛京故宫，对于别人来说可能很平常的事情，对我来说却是破天荒头一遭。我勇敢的迈出了第一个脚步，自己一个人去一个陌生的地方也无没什么大不了的，没那么可怕，只是一个人的旅途，可能有些落寞吧。这仍然是我的勇敢的一步，寒假还要去一趟北京，看看紫禁城，但愿会有美好的经历吧。</p><p>接下来的2020年，算是人生的十字路口了，最重要的是还是要沿着既定的方向认真努力，踏踏实实的学习，愉快的生活，未来嘛，可期。</p>]]></content>
      
      
      <categories>
          
          <category> 杂感 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>正则表达式</title>
      <link href="/2019/12/22/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
      <url>/2019/12/22/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h3 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h3><p>今天简单学习了正则表达式，现在把基础知识点做一些记录。</p><a id="more"></a><h4 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h4><p>正则表达式是对字符串操作的一种逻辑公式，就是用事先定义好的一些特定字符、及这些特定字符的组合，组成一个“规则字符串”，这个“规则字符串”用来表达对字符串的一种过滤逻辑。</p><h4 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h4><ol><li>判断给定的字符串是否符合正则表达式的过滤逻辑（匹配）</li><li>可以通过正则表达式，从字符串中获取我们想要的特定部分（提取）</li><li>强大的字符串替换能力（替换）</li></ol><p>总而言之，正则表达式的主要作用是：匹配字符串，然后进行操作</p><h4 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h4><ol><li>灵活性、逻辑性和功能性强</li><li>可以迅速地用非常简单的方式达到对字符串地复杂控制</li></ol><h4 id="元字符和限定符"><a href="#元字符和限定符" class="headerlink" title="元字符和限定符"></a>元字符和限定符</h4><p>正则表达式的组成：是由元字符或者限定字符组成的一个式子</p><p><strong>常用元字符</strong></p><table><thead><tr><th>元字符</th><th>说明</th></tr></thead><tbody><tr><td>\d</td><td>匹配数字</td></tr><tr><td>\D</td><td>匹配任意非数字的字符</td></tr><tr><td>\w</td><td>匹配字母或数字或下划线</td></tr><tr><td>\W</td><td>匹配任意不是字母、数字、下划线</td></tr><tr><td>\s</td><td>匹配任意的空白符</td></tr><tr><td>\S</td><td>匹配任意不是空白符的字符</td></tr><tr><td>.</td><td>匹配除换行符以外的任意单个字符</td></tr><tr><td>^</td><td>表示匹配行首的文本（以谁开始）</td></tr><tr><td>$</td><td>表示匹配行尾的文本（以谁结束）</td></tr></tbody></table><p><strong>限定符</strong></p><table><thead><tr><th>限定符</th><th>说明</th></tr></thead><tbody><tr><td>*</td><td>出现0次或多次</td></tr><tr><td>+</td><td>出现1次或多次</td></tr><tr><td>？</td><td>出现0次或1次</td></tr><tr><td>{n}</td><td>出现n次</td></tr><tr><td>{n,m}</td><td>出现n次到m次</td></tr><tr><td>{n,}</td><td>出现n次或多次</td></tr></tbody></table><p><strong>其他</strong></p><ol><li><input disabled type="checkbox"> 字符串用中括号括起来，表示匹配其中任意一个字符，相当于或的意思</li><li>[^] 匹配除中括号以内的内容</li><li>\  转义符</li><li>| 或者，选择两者中的一个。注意|将左右两边分为两部分，而不管左右两边有多长多乱</li><li>()  分组，提升优先级</li><li>[\u4e00-\u9fa5]  匹配汉字</li></ol><h4 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h4><p>验证手机号：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">^\d&#123;11&#125;$</span><br></pre></td></tr></table></figure><p>验证邮编：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">^\d&#123;<span class="number">6</span>&#125;$</span><br></pre></td></tr></table></figure><p>验证邮箱：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">^\w+@\w+\.\w+$</span><br><span class="line"></span><br><span class="line">[<span class="number">0</span><span class="number">-9</span>a-zA-Z_.-]+[@][<span class="number">0</span><span class="number">-9</span>a-zA-Z_.-]+([.][a-zA-Z]+)&#123;<span class="number">1</span>,<span class="number">2</span>&#125;</span><br></pre></td></tr></table></figure><p>验证IP地址127.0.0.1</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">^\d&#123;<span class="number">1</span>,<span class="number">3</span>&#125;\(.\d&#123;<span class="number">1</span>,<span class="number">3</span>&#125;)&#123;<span class="number">3</span>&#125;$</span><br></pre></td></tr></table></figure><h4 id="JavaScript创建正则表达式"><a href="#JavaScript创建正则表达式" class="headerlink" title="JavaScript创建正则表达式"></a>JavaScript创建正则表达式</h4><p>方式1：通过调用构造函数的方式创建</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> reg=<span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="regexp">/\d&#123;5&#125;/</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> reg = <span class="keyword">new</span> Regex(<span class="string">'\d'</span>, <span class="string">'gi'</span>);</span><br></pre></td></tr></table></figure><p>方式2：通过字面量的方式创建</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/\d/i</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> reg=<span class="regexp">/\d&#123;1,5&#125;/</span>;</span><br></pre></td></tr></table></figure><p>参数</p><table><thead><tr><th>标志</th><th>说明</th></tr></thead><tbody><tr><td>i</td><td>忽略大小写</td></tr><tr><td>g</td><td>全局匹配</td></tr><tr><td>gi</td><td>全局匹配+忽略大小写</td></tr></tbody></table><h4 id="匹配正则表达式"><a href="#匹配正则表达式" class="headerlink" title="匹配正则表达式"></a>匹配正则表达式</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="regexp">/./</span>.test(<span class="string">"除了回车换行以为的任意字符"</span>));<span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="regexp">/.*/</span>.test(<span class="string">"0个到多个"</span>));<span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="regexp">/.+/</span>.test(<span class="string">"1个到多个"</span>));<span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="regexp">/.?/</span>.test(<span class="string">"哈哈"</span>));<span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="regexp">/[0-9]/</span>.test(<span class="string">"9527"</span>));<span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="regexp">/[a-z]/</span>.test(<span class="string">"what"</span>));<span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="regexp">/[A-Z]/</span>.test(<span class="string">"Are"</span>));<span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="regexp">/[a-zA-Z]/</span>.test(<span class="string">"干啥子"</span>));<span class="comment">//false</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="regexp">/[0-9a-zA-Z]/</span>.test(<span class="string">"9ebg"</span>));<span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="regexp">/b|(ara)/</span>.test(<span class="string">"abra"</span>));<span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="regexp">/[a-z]&#123;2,3&#125;/</span>.test(<span class="string">"arfsf"</span>));<span class="comment">//</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="regexp">/\d/</span>.test(<span class="string">"998"</span>));</span><br><span class="line"><span class="built_in">console</span>.log(<span class="regexp">/\d*/</span>.test(<span class="string">"998"</span>));</span><br><span class="line"><span class="built_in">console</span>.log(<span class="regexp">/\d+/</span>.test(<span class="string">"998"</span>));</span><br><span class="line"><span class="built_in">console</span>.log(<span class="regexp">/\d&#123;0,&#125;/</span>.test(<span class="string">"998"</span>));</span><br><span class="line"><span class="built_in">console</span>.log(<span class="regexp">/\d&#123;2,3&#125;/</span>.test(<span class="string">"998"</span>));</span><br><span class="line"><span class="built_in">console</span>.log(<span class="regexp">/\D/</span>.test(<span class="string">"eat"</span>));</span><br><span class="line"><span class="built_in">console</span>.log(<span class="regexp">/\s/</span>.test(<span class="string">"  "</span>));</span><br><span class="line"><span class="built_in">console</span>.log(<span class="regexp">/\S/</span>.test(<span class="string">"嘎嘎 "</span>));</span><br><span class="line"><span class="built_in">console</span>.log(<span class="regexp">/\w/</span>.test(<span class="string">"_"</span>));</span><br><span class="line"><span class="built_in">console</span>.log(<span class="regexp">/\W/</span>.test(<span class="string">"_"</span>));</span><br></pre></td></tr></table></figure><h4 id="案例-1"><a href="#案例-1" class="headerlink" title="案例"></a>案例</h4><p><strong>验证密码的强度</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line">&lt;style type=<span class="string">"text/css"</span>&gt;</span><br><span class="line">    #dv&#123;</span><br><span class="line">        width: <span class="number">300</span>px;</span><br><span class="line">        height:<span class="number">200</span>px;</span><br><span class="line">        position: absolute;</span><br><span class="line">        left:<span class="number">300</span>px;</span><br><span class="line">        top:<span class="number">100</span>px;</span><br><span class="line">    &#125;</span><br><span class="line">    .strengthLv0 &#123;</span><br><span class="line">        height: <span class="number">6</span>px;</span><br><span class="line">        width: <span class="number">120</span>px;</span><br><span class="line">        border: 1px solid #ccc;</span><br><span class="line">        padding: <span class="number">2</span>px;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .strengthLv1 &#123;</span><br><span class="line">        background: red;</span><br><span class="line">        height: <span class="number">6</span>px;</span><br><span class="line">        width: <span class="number">40</span>px;</span><br><span class="line">        border: 1px solid #ccc;</span><br><span class="line">        padding: <span class="number">2</span>px;</span><br><span class="line">    &#125;</span><br><span class="line">    .strengthLv2 &#123;</span><br><span class="line">        background: orange;</span><br><span class="line">        height: <span class="number">6</span>px;</span><br><span class="line">        width: <span class="number">80</span>px;</span><br><span class="line">        border: 1px solid #ccc;</span><br><span class="line">        padding: <span class="number">2</span>px;</span><br><span class="line">    &#125;</span><br><span class="line">    .strengthLv3 &#123;</span><br><span class="line">        background: green;</span><br><span class="line">        height: <span class="number">6</span>px;</span><br><span class="line">        width: <span class="number">120</span>px;</span><br><span class="line">        border: 1px solid #ccc;</span><br><span class="line">        padding: <span class="number">2</span>px;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;<span class="regexp">/style&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;div id="dv"&gt;</span></span><br><span class="line"><span class="regexp">    &lt;label for="pwd"&gt;密码&lt;/</span>label&gt;</span><br><span class="line">    &lt;input type=<span class="string">"text"</span> id=<span class="string">"pwd"</span> maxlength=<span class="string">"16"</span>&gt;<span class="xml"><span class="comment">&lt;!--课外话题--&gt;</span></span></span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;em&gt;密码强度：&lt;/em&gt;</span><br><span class="line">        &lt;em id="strength"&gt;&lt;/em&gt;</span><br><span class="line">        &lt;div id="strengthLevel" class="strengthLv0"&gt;&lt;/div&gt;</span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">     <span class="function"><span class="keyword">function</span> <span class="title">my$</span>(<span class="params">id</span>)</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">document</span>.getElementById(<span class="string">"id"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="comment">//获取文本框注册键盘抬起事件</span></span><br><span class="line">    my$(<span class="string">"pwd"</span>).onkeyup = <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="comment">//每次键盘抬起的时候都要获取文本框中的内容，验证文本框中有什么东西，得到一个级别，然后下面的div显示对应的颜色</span></span><br><span class="line">        <span class="comment">//如果密码的长度小于6，没必要判断</span></span><br><span class="line">        <span class="comment">// if(this.value.length &gt;= 6)&#123;</span></span><br><span class="line">        <span class="comment">//     var lvl = getLvl(this.value);</span></span><br><span class="line">        <span class="comment">//     my$("strengthLevel").className="strengthLv"+lvl;</span></span><br><span class="line">        <span class="comment">// &#125;else&#123;</span></span><br><span class="line">        <span class="comment">//     my$("strengthLevel").className="strengthLv0";</span></span><br><span class="line">        <span class="comment">// &#125;   </span></span><br><span class="line">        my$(<span class="string">"strengthLevel"</span>).className=<span class="string">"strengthLv"</span>+(<span class="keyword">this</span>.value.length&gt;=<span class="number">6</span>?getLvl(<span class="keyword">this</span>.value):<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="comment">//输入密码，返回对应的级别</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">getLvl</span>(<span class="params">pwd</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> lvl = <span class="number">0</span>;<span class="comment">//默认是0级</span></span><br><span class="line">        <span class="comment">//密码中是否有数字，或者字母，或是特殊符号</span></span><br><span class="line">        <span class="keyword">if</span>(<span class="regexp">/[0-9]/</span>.test(pwd))&#123;</span><br><span class="line">            lvl++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//判断密码中是不是有字母</span></span><br><span class="line">        <span class="keyword">if</span>(<span class="regexp">/[a-zA-Z]/</span>.test(pwd))&#123;</span><br><span class="line">            lvl++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//判断密码中有没有特殊符号</span></span><br><span class="line">        <span class="keyword">if</span>(<span class="regexp">/[^0-9a-zA-Z]/</span>.test(pwd))&#123;</span><br><span class="line">            lvl++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> lvl;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><p><strong>表单验证</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line">  &lt;style type=<span class="string">"text/css"</span>&gt;</span><br><span class="line">    body &#123;</span><br><span class="line">      background: #ccc;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    label &#123;</span><br><span class="line">      width: <span class="number">40</span>px;</span><br><span class="line">      display: inline-block;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    span &#123;</span><br><span class="line">      color: red;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .container &#123;</span><br><span class="line">      margin: <span class="number">100</span>px auto;</span><br><span class="line">      width: <span class="number">400</span>px;</span><br><span class="line">      padding: <span class="number">50</span>px;</span><br><span class="line">      line-height: <span class="number">40</span>px;</span><br><span class="line">      border: 1px solid #999;</span><br><span class="line">      background: #efefef;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    span &#123;</span><br><span class="line">      margin-left: <span class="number">30</span>px;</span><br><span class="line">      font-size: <span class="number">12</span>px;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .wrong &#123;</span><br><span class="line">      color: red</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .right &#123;</span><br><span class="line">      color: green;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .defau &#123;</span><br><span class="line">      width: <span class="number">200</span>px;</span><br><span class="line">      height: <span class="number">20</span>px;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .de1 &#123;</span><br><span class="line">      background-position: <span class="number">0</span> <span class="number">-20</span>px;</span><br><span class="line">    &#125;</span><br><span class="line">  &lt;<span class="regexp">/style&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;div class="container" id="dv"&gt;</span></span><br><span class="line"><span class="regexp">  &lt;label for="qq"&gt;Q Q&lt;/</span>label&gt;<span class="xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">id</span>=<span class="string">"qq"</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span></span><br><span class="line">  &lt;label&gt;手机&lt;/label&gt;&lt;input type="text" id="phone"&gt;&lt;span&gt;&lt;/span&gt;&lt;br/&gt;</span><br><span class="line">  &lt;label&gt;邮箱&lt;/label&gt;&lt;input type="text" id="e-mail"&gt;&lt;span&gt;&lt;/span&gt;&lt;br/&gt;</span><br><span class="line">  &lt;label&gt;座机&lt;/label&gt;&lt;input type="text" id="telephone"&gt;&lt;span&gt;&lt;/span&gt;&lt;br/&gt;</span><br><span class="line">  &lt;label&gt;姓名&lt;/label&gt;&lt;input type="text" id="fullName"&gt;&lt;span&gt;&lt;/span&gt;&lt;br/&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line"> function my$(id)&#123;</span><br><span class="line">            return document.getElementById("id");</span><br><span class="line">        &#125;</span><br><span class="line">  //qq的</span><br><span class="line">  checkInput(my$("qq"),/^\d&#123;5,11&#125;$/);</span><br><span class="line">  //手机</span><br><span class="line">  checkInput(my$("phone"),/^\d&#123;11&#125;$/);</span><br><span class="line">  //邮箱</span><br><span class="line">  checkInput(my$("e-mail"),/^[0-9a-zA-Z_.-]+[@][0-9a-zA-Z_.-]+([.][a-zA-Z]+)&#123;1,2&#125;$/);</span><br><span class="line">  //座机号码</span><br><span class="line">  checkInput(my$("telephone"),/^\d&#123;3,4&#125;[-]\d&#123;7,8&#125;$/);</span><br><span class="line">  //中文名字</span><br><span class="line">  checkInput(my$("fullName"),/^[\u4e00-\u9fa5]&#123;2,6&#125;$/);</span><br><span class="line">  //给我文本框,给我这个文本框相应的正则表达式,我把结果显示出来</span><br><span class="line">  //通过正则表达式验证当前的文本框是否匹配并显示结果</span><br><span class="line">  function checkInput(input,reg) &#123;</span><br><span class="line">    //文本框注册失去焦点的事件</span><br><span class="line">    input.onblur=function () &#123;</span><br><span class="line">      if(reg.test(this.value))&#123;</span><br><span class="line">        this.nextElementSibling.innerText="正确了";</span><br><span class="line">        this.nextElementSibling.style.color="green";</span><br><span class="line">      &#125;else&#123;</span><br><span class="line">        this.nextElementSibling.innerText="让你得瑟,错了吧";</span><br><span class="line">        this.nextElementSibling.style.color="red";</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h4 id="附录4"><a href="#附录4" class="headerlink" title="附录4"></a>附录4</h4><p><a href="https://c.runoob.com/front-end/854" target="_blank" rel="noopener">正则表达式在线测试工具</a></p><p>电子文档制作工具: <a href="https://github.com/egoist/docute" target="_blank" rel="noopener">docute</a></p><p>流程图工具：<a href="http://logicnet.dk/DiagramDesigner/" target="_blank" rel="noopener">DiagramDesigner</a></p>]]></content>
      
      
      <categories>
          
          <category> 正则表达式 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>动画函数的封装</title>
      <link href="/2019/11/29/%E5%8A%A8%E7%94%BB%E5%87%BD%E6%95%B0%E7%9A%84%E5%B0%81%E8%A3%85/"/>
      <url>/2019/11/29/%E5%8A%A8%E7%94%BB%E5%87%BD%E6%95%B0%E7%9A%84%E5%B0%81%E8%A3%85/</url>
      
        <content type="html"><![CDATA[<h3 id="匀速动画函数"><a href="#匀速动画函数" class="headerlink" title="匀速动画函数"></a>匀速动画函数</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//任意一个元素到达指定的位置</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">animate</span>(<span class="params">element,target</span>)</span>&#123;</span><br><span class="line">        <span class="comment">//保证每次点击只有一个定时器生效，首先要清理定时器</span></span><br><span class="line">        clearInterval(element.timeId);</span><br><span class="line">        <span class="comment">//设置定时器</span></span><br><span class="line">        element.timeId = setInterval(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="comment">//获取当前元素所在的位置</span></span><br><span class="line">            <span class="keyword">var</span> current = element.offsetLeft;</span><br><span class="line">            <span class="comment">//设置每次移动的距离</span></span><br><span class="line">            <span class="keyword">var</span> step = <span class="number">10</span>;</span><br><span class="line">            <span class="comment">//判断走正数还是走负数</span></span><br><span class="line">            step = current&lt;target?step:-step;</span><br><span class="line">            current +=step;</span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">Math</span>.abs(current-target) &gt; <span class="built_in">Math</span>.abs(step))&#123;</span><br><span class="line">                element.style.left = current+<span class="string">"px"</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                clearInterval(element.timeId);</span><br><span class="line">                element.style.left = target+<span class="string">"px"</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;,<span class="number">20</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="变速动画函数封装"><a href="#变速动画函数封装" class="headerlink" title="变速动画函数封装"></a>变速动画函数封装</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">animate</span>(<span class="params">element,target</span>)</span>&#123;</span><br><span class="line">        clearInterval(element.timeId);</span><br><span class="line"></span><br><span class="line">        element.timeId = setInterval(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> current = element.offsetLeft;</span><br><span class="line">            <span class="comment">//移动的距离</span></span><br><span class="line">            <span class="keyword">var</span> step = (target-current)/<span class="number">10</span>;</span><br><span class="line">            <span class="comment">//如果step大于0，那么向上取整；如果小于0，向下取整</span></span><br><span class="line">            step = step&gt;<span class="number">0</span>?<span class="built_in">Math</span>.ceil(step):<span class="built_in">Math</span>.floor(step);</span><br><span class="line">            current += step;</span><br><span class="line">            <span class="comment">//设置当前位置</span></span><br><span class="line">            element.style.left = current + <span class="string">"px"</span>;</span><br><span class="line">            <span class="keyword">if</span>(current == target)&#123;</span><br><span class="line">                <span class="comment">//如果不清理定时器，当到达目标位置的时候，仍然会不停执行，只是距离为0</span></span><br><span class="line">                clearInterval(element.timeId);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//测试代码</span></span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">"目标位置："</span>+target+<span class="string">"，当前位置："</span>+current+<span class="string">"每次移动的距离："</span>+step);</span><br><span class="line">        &#125;,<span class="number">20</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="缓动动画封装"><a href="#缓动动画封装" class="headerlink" title="缓动动画封装"></a>缓动动画封装</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line">        <span class="comment">//获取任意一个元素的属性的值</span></span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">getStyle</span>(<span class="params">element,attr</span>)</span>&#123;</span><br><span class="line">            <span class="comment">//判断浏览器是否支持这个方法</span></span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">window</span>.getComputedStyle?<span class="built_in">window</span>.getComputedStyle(element,<span class="literal">null</span>)[attr]:element.currentStyle[attr]||<span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">animate</span>(<span class="params">element,json,fn</span>)</span>&#123;</span><br><span class="line">            clearInterval(element.timeId);</span><br><span class="line">            element.timeId = setInterval(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">                <span class="comment">//默认全部到达目标</span></span><br><span class="line">                <span class="keyword">var</span> flag = <span class="literal">true</span>;</span><br><span class="line">                <span class="comment">//循环遍历json中所有的键值对</span></span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">var</span> attr <span class="keyword">in</span> json) &#123;</span><br><span class="line">                    <span class="comment">//判断是不是opacity</span></span><br><span class="line">                    <span class="keyword">if</span>(attr == <span class="string">"opacity"</span>)&#123;</span><br><span class="line">                        <span class="comment">//获取当前元素的透明度，放大100倍</span></span><br><span class="line">                        <span class="keyword">var</span> current = getStyle(element,attr)*<span class="number">100</span>;</span><br><span class="line">                        <span class="comment">//目标透明度放大100倍</span></span><br><span class="line">                        <span class="keyword">var</span> target = json[attr]*<span class="number">100</span>;</span><br><span class="line">                        <span class="comment">//设置变化范围</span></span><br><span class="line">                        <span class="keyword">var</span> step = (target-current)/<span class="number">10</span>;</span><br><span class="line">                        <span class="comment">//判断是变化的正负值</span></span><br><span class="line">                        step = step&gt;<span class="number">0</span> ?<span class="built_in">Math</span>.ceil(step):<span class="built_in">Math</span>.floor(step);</span><br><span class="line">                        <span class="comment">//设置当前元素透明度</span></span><br><span class="line">                        current +=step;</span><br><span class="line">                        <span class="comment">//设置该元素的opacity属性值</span></span><br><span class="line">                        element.style[attr]=current/<span class="number">100</span>;</span><br><span class="line">                    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(attr == <span class="string">"zIndex"</span>)&#123;<span class="comment">//判断这个attr变量中存储的是不是zIndex</span></span><br><span class="line">                        <span class="comment">//层级改变就是直接改变这个属性的值</span></span><br><span class="line">                        element.style[attr]=json[attr];</span><br><span class="line">                    &#125;<span class="keyword">else</span>&#123;<span class="comment">//普通的属性</span></span><br><span class="line">                        <span class="comment">//获取元素这个属性的当前的值</span></span><br><span class="line">                        <span class="keyword">var</span> current = <span class="built_in">parseInt</span>(getStyle(element,attr));</span><br><span class="line">                        <span class="comment">//获取目标值，就是传过来的值</span></span><br><span class="line">                        <span class="keyword">var</span> target = json[attr];</span><br><span class="line">                        <span class="keyword">var</span> step = (target-current)/<span class="number">10</span>;</span><br><span class="line">                        step = step&gt;<span class="number">0</span>?<span class="built_in">Math</span>.ceil(step):<span class="built_in">Math</span>.floor(step);</span><br><span class="line">                        current +=step;</span><br><span class="line">                        element.style[attr]=current+<span class="string">"px"</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="comment">//是否到达目标</span></span><br><span class="line">                    <span class="keyword">if</span>(current!=target)&#123;</span><br><span class="line">                        flag=<span class="literal">false</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (flag)&#123;</span><br><span class="line">                    clearInterval(element.timeId);</span><br><span class="line">                    <span class="keyword">if</span> (fn)&#123;</span><br><span class="line">                        fn();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//测试代码</span></span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">"目标位置："</span>+target+<span class="string">"，当前位置："</span>+current+<span class="string">"每次移动的距离："</span>+step);</span><br><span class="line">            &#125;,<span class="number">20</span>);</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">//测试</span></span><br><span class="line"> my$(<span class="string">"btn1"</span>).onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> json1 = &#123;<span class="string">"width"</span>: <span class="number">400</span>, <span class="string">"height"</span>: <span class="number">500</span>, <span class="string">"left"</span>: <span class="number">500</span>, <span class="string">"top"</span>: <span class="number">80</span>, <span class="string">"opacity"</span>: <span class="number">0.2</span>&#125;;</span><br><span class="line">        animate(my$(<span class="string">"dv"</span>), json1, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            animate(my$(<span class="string">"dv"</span>), &#123;<span class="string">"width"</span>: <span class="number">40</span>, <span class="string">"height"</span>: <span class="number">50</span>, <span class="string">"left"</span>: <span class="number">0</span>, <span class="string">"top"</span>: <span class="number">0</span>, <span class="string">"opacity"</span>: <span class="number">1</span>, <span class="string">"zIndex"</span>: <span class="number">1000</span>&#125;);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> JavaScript学习 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>javascript三大系列</title>
      <link href="/2019/11/28/javascript%E4%B8%89%E5%A4%A7%E7%B3%BB%E5%88%97/"/>
      <url>/2019/11/28/javascript%E4%B8%89%E5%A4%A7%E7%B3%BB%E5%88%97/</url>
      
        <content type="html"><![CDATA[<h3 id="offset系列"><a href="#offset系列" class="headerlink" title="offset系列"></a>offset系列</h3><p><strong>问题</strong></p><p>获取标签的样式属性值，如果标签的属性是在style标签中设置的，无法通过标签.style.属性，来获取宽高等属性值。如果在标签自身中设置style属性则可以获取。<a id="more"></a></p><p><strong>offset系列的属性</strong></p><ul><li>对象.offsetWidth: 获取元素自身的宽（包含边框）</li><li>对象.offsetHeight: 获取元素自身的高（包含边框）</li><li>对象.offsetLeft: 距页面左边的距离，若父级盒子有定位，则是与父级盒子的左侧距离，若是父盒子都没有定位则是与body的left值</li><li>对象.offsetTop: 距页面上面的距离，若父级盒子有定位，则是与父级盒子的上面距离，若是父盒子都没有定位则是与body的top值</li><li>对象.offsetParent：用于获取元素中有定位的最近父级元素，如果父级元素都没有定位获取的是body</li></ul><p><strong>注意</strong></p><ol><li>offset系列返回值都是数值类型，不带“px”单位，可以直接进行计算</li><li>offset系列的是只读属性，通过style可以进行读写</li></ol><h3 id="scroll系列"><a href="#scroll系列" class="headerlink" title="scroll系列"></a>scroll系列</h3><p><strong>scroll系列的属性</strong></p><ul><li>scrollHeight：元素中的内容的实际高度（不包括边框），如果内容不足，就是元素的高度</li><li>scrollWidth：元素中内容的实际宽度（不包括边框），如果内容不足就是元素的宽度</li><li>scrollTop： onscroll事件发生时，元素向上卷曲出去的距离</li><li>scrollLeft:  onscroll事件发生时，元素向左卷曲出去的距离</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获取页面向上或者向左卷曲出去的距离的值,兼容代码</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getScroll</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    left: <span class="built_in">window</span>.pageXOffset || <span class="built_in">document</span>.documentElement.scrollLeft || <span class="built_in">document</span>.body.scrollLeft || <span class="number">0</span>,</span><br><span class="line">    top: <span class="built_in">window</span>.pageYOffset || <span class="built_in">document</span>.documentElement.scrollTop || <span class="built_in">document</span>.body.scrollTop || <span class="number">0</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>兼容问题</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">谷歌火狐支持以下两种方式：</span><br><span class="line"><span class="built_in">document</span>.body.scrollTop/scrollLeft</span><br><span class="line"><span class="built_in">window</span>.pageYoffset/pageXoffset</span><br><span class="line"></span><br><span class="line">IE8支持以下方式：</span><br><span class="line"><span class="built_in">document</span>.documentElement.scrollTop/scrollLeft</span><br></pre></td></tr></table></figure><h3 id="client系列—可视区域"><a href="#client系列—可视区域" class="headerlink" title="client系列—可视区域"></a>client系列—可视区域</h3><p><strong>client的属性</strong></p><ul><li>clientWidth：可视区域的宽（内部，不包括边框）</li><li>clientHeight:  可视区域的高（内部，不包括边框）</li><li>clientLeft：左边边框的宽度</li><li>clientTop：上边边框的宽度</li><li>clientX： 获取鼠标事件发生时可视区域的水平坐标</li><li>clientY： 获取鼠标事件发生时可视区域的垂直坐标</li></ul><p><strong>兼容问题</strong></p><p>1.clientWidth 和 clientHeight的兼容问题</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">谷歌火狐支持：</span><br><span class="line"><span class="built_in">document</span>.body.clientWidth/clientHeight</span><br><span class="line"><span class="built_in">window</span>.innerWidth/innerHeight</span><br><span class="line"></span><br><span class="line">IE8支持：</span><br><span class="line"><span class="built_in">document</span>.documentElement.clientWidth/clientHeight</span><br></pre></td></tr></table></figure><p>兼容代码</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">client</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">window</span>.innerWidth)&#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            <span class="string">"width"</span>:<span class="built_in">window</span>.innerWidth,</span><br><span class="line">            <span class="string">"height"</span>:<span class="built_in">window</span>.innerHeight</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="built_in">document</span>.compatMode === <span class="string">"CSS1Compat"</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            <span class="string">"width"</span>:<span class="built_in">document</span>.documentElement.clientWidth,</span><br><span class="line">            <span class="string">"height"</span>:<span class="built_in">document</span>.documentElement.clientHeight</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            <span class="string">"width"</span>:<span class="built_in">document</span>.body.clientWidth,</span><br><span class="line">            <span class="string">"height"</span>:<span class="built_in">document</span>.body.clientHeight</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">    使用方法:</span><br><span class="line">    <span class="number">1.</span> 取得clientWidth的值: client().width</span><br><span class="line">    <span class="number">2.</span> 取得clientHeight的值: client().height</span><br></pre></td></tr></table></figure><p>2.clientX 和 clientY的兼容问题</p><ul><li>谷歌,火狐,IE9+: 事件参数对象随着事件处理函数的参数传入</li><li>IE8以下: event对象必须作为window对象的一个属性(window.event)</li></ul><p>clientX 和 clientY的兼容性代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//将client和scroll的兼容问题进行对象的封装</span></span><br><span class="line">    <span class="keyword">var</span> evtTools=&#123;</span><br><span class="line">        <span class="comment">//获取兼容的事件参数对象</span></span><br><span class="line">        getEvt:<span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">window</span>.event?<span class="built_in">window</span>.event:e;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="comment">//获取的是可视区域的横坐标</span></span><br><span class="line">        getClientX:<span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.getEvt(e).clientX;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="comment">//获取的是可视区域的纵坐标</span></span><br><span class="line">        getClientY:<span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.getEvt(e).clientY;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="comment">//获取向左卷曲出去的距离的横坐标</span></span><br><span class="line">        getScrollLeft:<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">window</span>.pageXOffset||<span class="built_in">document</span>.body.scrollLeft||<span class="built_in">document</span>.documentElement.scrollLeft||<span class="number">0</span>;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="comment">//获取向上卷曲出去的距离的纵坐标</span></span><br><span class="line">        getScrollTop:<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">window</span>.pageYOffset||<span class="built_in">document</span>.body.scrollTop||<span class="built_in">document</span>.documentElement.scrollTop||<span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> JavaScript学习 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>酒</title>
      <link href="/2019/11/20/%E9%85%92/"/>
      <url>/2019/11/20/%E9%85%92/</url>
      
        <content type="html"><![CDATA[<p>酒和欢乐总是联系在一起——无酒不欢</p><p>酒和苦恼也常联系在一起——借酒消愁</p><p>欢乐和苦恼必然联系在一起——每一个欢乐背后都隐藏着当这个快乐消失后的苦恼，每一个苦恼背后都隐藏着当这个苦恼失去后的快乐。</p><p>这话是许嵩说的但是我记不住，可能没那么快乐也没那么苦恼吧！</p><a id="more"></a><p><strong>是酒不是水，莫要当酒鬼</strong></p><p>大概是最近一年慢慢喝起了白酒，自从这个学期更甚——几乎每个星期都要和朋友喝上一点，感觉也还不错。隐约记得是因为啤酒不好喝，还有白酒喝着可能更有感觉。起初喝的是江小白，主要是因为他的情怀——总是有很多让人或许叫产生共鸣的话，哦，对了还有他的瓶装设计，一瓶二两，我和朋友一人一两就着周黑鸭慢慢的啜（chuo）。我总是对他讲，以后退休了，每天啜二两白酒的生活也着实让人羡慕呐。然鹅，现在才20岁却在想几十年以后的事情，未免显得太过幼稚或者叫想的太多。其实，想一想也还不错，当做是越过现实幻想吧。</p><p>喝酒的时候我学着去品，慢慢的喝，确实有一股清醇，当下肚的时候确有一股暖意，特别是在寒冷的哈尔滨，喝上一口，暖和。</p><p>今天买了一瓶一斤的红星二锅头，我俩尽然喝了大半瓶，其实觉得也没有多少，他喝两杯半我喝了两杯（记得当初是我邀他一起喝的，现在居然这么能喝，一口下去半杯没了，我只是啜了很少一部分）。不过这个酒可能确实不一样，刚入口的时候是没有酒味的，入口之后渐渐显现酒味，朋友说真不愧是绵柔啊。我能喝出不同却不能很好理解其中的韵味，虽说每次是在“品”，总是觉得太过肤浅，可能是人生阅历还不太够又或许不想去理解其中的味道吧。</p><p><img src="/2019/11/20/%E9%85%92/IMG_20191120_180124.jpg" alt="酒水"></p><p>然而，酒就是酒，不是水，少喝为上，达到微醺的效果最好。其实每次只要喝一点我就会有点晕乎乎的感觉，我渐渐的喜欢上了这种感觉。不愿当个酒鬼，也不会当个酒鬼，当经历什么事情之后自然会醉。</p>]]></content>
      
      
      <categories>
          
          <category> 杂感 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>js-轮播图</title>
      <link href="/2019/11/18/js-%E8%BD%AE%E6%92%AD%E5%9B%BE/"/>
      <url>/2019/11/18/js-%E8%BD%AE%E6%92%AD%E5%9B%BE/</url>
      
        <content type="html"><![CDATA[<p>javascript实现轮播图效果—</p><p>今天整了一下午，仍然是没有完全理解，先上传经常看看。。</p><a id="more"></a><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">"en"</span>&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">  &lt;meta charset=<span class="string">"UTF-8"</span>&gt;</span><br><span class="line">  &lt;title&gt;<span class="xml"><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span></span><br><span class="line">  &lt;style type=<span class="string">"text/css"</span>&gt;</span><br><span class="line">    * &#123;</span><br><span class="line">      padding: <span class="number">0</span>;</span><br><span class="line">      margin: <span class="number">0</span>;</span><br><span class="line">      list-style: none;</span><br><span class="line">      border: <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .all &#123;</span><br><span class="line">      width: <span class="number">500</span>px;</span><br><span class="line">      height: <span class="number">200</span>px;</span><br><span class="line">      padding: <span class="number">7</span>px;</span><br><span class="line">      border: 1px solid #ccc;</span><br><span class="line">      margin: <span class="number">100</span>px auto;</span><br><span class="line">      position: relative;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .screen &#123;</span><br><span class="line">      width: <span class="number">500</span>px;</span><br><span class="line">      height: <span class="number">200</span>px;</span><br><span class="line">      overflow: hidden;</span><br><span class="line">      position: relative;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .screen li &#123;</span><br><span class="line">      width: <span class="number">500</span>px;</span><br><span class="line">      height: <span class="number">200</span>px;</span><br><span class="line">      overflow: hidden;</span><br><span class="line">      float: left;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .screen ul &#123;</span><br><span class="line">      position: absolute;</span><br><span class="line">      left: <span class="number">0</span>;</span><br><span class="line">      top: <span class="number">0</span>px;</span><br><span class="line">      width: <span class="number">3000</span>px;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .all ol &#123;</span><br><span class="line">      position: absolute;</span><br><span class="line">      right: <span class="number">10</span>px;</span><br><span class="line">      bottom: <span class="number">10</span>px;</span><br><span class="line">      line-height: <span class="number">20</span>px;</span><br><span class="line">      text-align: center;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .all ol li &#123;</span><br><span class="line">      float: left;</span><br><span class="line">      width: <span class="number">20</span>px;</span><br><span class="line">      height: <span class="number">20</span>px;</span><br><span class="line">      background: #fff;</span><br><span class="line">      border: 1px solid #ccc;</span><br><span class="line">      margin-left: <span class="number">10</span>px;</span><br><span class="line">      cursor: pointer;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .all ol li.current &#123;</span><br><span class="line">      background: #DB192A;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    #arr &#123;</span><br><span class="line">      display: none;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    #arr span &#123;</span><br><span class="line">      width: <span class="number">40</span>px;</span><br><span class="line">      height: <span class="number">40</span>px;</span><br><span class="line">      position: absolute;</span><br><span class="line">      left: <span class="number">5</span>px;</span><br><span class="line">      top: <span class="number">50</span>%;</span><br><span class="line">      margin-top: <span class="number">-20</span>px;</span><br><span class="line">      background: #000;</span><br><span class="line">      cursor: pointer;</span><br><span class="line">      line-height: <span class="number">40</span>px;</span><br><span class="line">      text-align: center;</span><br><span class="line">      font-weight: bold;</span><br><span class="line">      font-family: <span class="string">'黑体'</span>;</span><br><span class="line">      font-size: <span class="number">30</span>px;</span><br><span class="line">      color: #fff;</span><br><span class="line">      opacity: <span class="number">0.3</span>;</span><br><span class="line">      border: 1px solid #fff;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    #arr #right &#123;</span><br><span class="line">      right: <span class="number">5</span>px;</span><br><span class="line">      left: auto;</span><br><span class="line">    &#125;</span><br><span class="line">  &lt;<span class="regexp">/style&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"all"</span> id=<span class="string">'box'</span>&gt;</span><br><span class="line">  &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"screen"</span>&gt;<span class="xml"><span class="comment">&lt;!--相框--&gt;</span></span></span><br><span class="line">    &lt;ul&gt;</span><br><span class="line">      &lt;li&gt;&lt;img src="images/1.jpg" width="500" height="200"/&gt;&lt;/li&gt;</span><br><span class="line">      &lt;li&gt;&lt;img src="images/2.jpg" width="500" height="200"/&gt;&lt;/li&gt;</span><br><span class="line">      &lt;li&gt;&lt;img src="images/3.jpg" width="500" height="200"/&gt;&lt;/li&gt;</span><br><span class="line">      &lt;li&gt;&lt;img src="images/4.jpg" width="500" height="200"/&gt;&lt;/li&gt;</span><br><span class="line">      &lt;li&gt;&lt;img src="images/5.jpg" width="500" height="200"/&gt;&lt;/li&gt;</span><br><span class="line">    &lt;/ul&gt;</span><br><span class="line">    &lt;ol&gt;</span><br><span class="line">    &lt;/ol&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">  &lt;div id="arr"&gt;&lt;span id="left"&gt;&amp;lt;&lt;/span&gt;&lt;span id="right"&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;script src="common.js"&gt;&lt;/script&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">  // 获取box</span><br><span class="line">  var box = my$("box");</span><br><span class="line">  //获取相框</span><br><span class="line">  var screen = box.children[0];</span><br><span class="line">  //获取相框的宽度</span><br><span class="line">  var imgWidth = screen.offsetWidth;</span><br><span class="line">  //获取ul</span><br><span class="line">  var ulObj = screen.children[0];</span><br><span class="line">  //获取ul下的所有的li</span><br><span class="line">  var list = ulObj.children;</span><br><span class="line">  //获取ol</span><br><span class="line">  var olObj = screen.children[1];</span><br><span class="line">  //获取焦点的div</span><br><span class="line">  var arr = my$("arr");</span><br><span class="line"></span><br><span class="line">  //设置全局变量,控制ul移动的位置</span><br><span class="line">  var pic = 0;</span><br><span class="line"></span><br><span class="line">  //创建小按钮，根据ul中li的个数</span><br><span class="line">  for (var i = 0; i &lt; list.length; i++) &#123;</span><br><span class="line">    //创建li标签，加入到ol中</span><br><span class="line">    var liObj = document.createElement("li");</span><br><span class="line">    olObj.appendChild(liObj);</span><br><span class="line">    //为li设置值</span><br><span class="line">    liObj.innerHTML = (i+1);</span><br><span class="line"></span><br><span class="line">    //在每个ol标签中的li标签中添加一个自定义属性</span><br><span class="line">    liObj.setAttribute("index",i);</span><br><span class="line"></span><br><span class="line">    //注册鼠标进入事件</span><br><span class="line">    liObj.onmouseover = function () &#123;</span><br><span class="line">      //先清除所有ol中的li的背景颜色</span><br><span class="line">      for (var j = 0; j &lt; olObj.children.length; j++) &#123;</span><br><span class="line">        olObj.children[j].removeAttribute("class");</span><br><span class="line">      &#125;</span><br><span class="line">      //设置当前鼠标进入li的背景颜色</span><br><span class="line">      this.className = "current";</span><br><span class="line">      //获取鼠标进入的li的当前的索引值</span><br><span class="line">      pic = this.getAttribute("index");</span><br><span class="line">      //移动ul</span><br><span class="line">      animate(ulObj,-pic*imgWidth);</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">    // 设置ol中第一个li有背景颜色</span><br><span class="line">    olObj.children[0].className="current";</span><br><span class="line"></span><br><span class="line">    //克隆ul中的第一个li加入到ul最后</span><br><span class="line">    ulObj.appendChild(ulObj.children[0].cloneNode(true));</span><br><span class="line"></span><br><span class="line">    //自动播放</span><br><span class="line">    var timeId = setInterval(clickHandle,1000);</span><br><span class="line"></span><br><span class="line">    //鼠标进入到box的div显示左右焦点</span><br><span class="line">    box.onmouseover = function () &#123;</span><br><span class="line">      arr.style.display = "block";</span><br><span class="line">      //鼠标进入，清除之前的定时器</span><br><span class="line">      clearInterval(timeId);</span><br><span class="line">    &#125;;</span><br><span class="line">    box.onmouseout = function () &#123;</span><br><span class="line">      arr.style.display = "none";</span><br><span class="line">      //鼠标离开自动播放</span><br><span class="line">      timeId = setInterval(clickHandle,1000);</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    //右边按钮</span><br><span class="line">    my$("right").onclick = clickHandle;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    function clickHandle() &#123;</span><br><span class="line">      //如果pic的值是5，恰巧是ul中li个数-1的值，此时页面中显示第六张图片，而用户会认为这是第一个图，所以如果用户再次点击按钮，用户就会看到第二个图片</span><br><span class="line">      if(pic == list.length - 1)&#123;</span><br><span class="line">        //先设置pic=0</span><br><span class="line">        pic = 0;</span><br><span class="line">        //把ul的位置还原成开始的默认位置</span><br><span class="line">        ulObj.style.left = 0+"px";</span><br><span class="line">      &#125;</span><br><span class="line">      //立即设置pic加1，那么此时用户就会看到第二个图片了</span><br><span class="line">      pic++;</span><br><span class="line">      //pic从0的值加1之后，pic的值是1，然后 ul移动出去一个图片</span><br><span class="line">      animate(ulObj, -pic*imgWidth);</span><br><span class="line">      //如果pic==5说明，此时显示第六章图片（内容是第一张图片，第一个小按钮有颜色）</span><br><span class="line">      if(pic == list.length-1)&#123;</span><br><span class="line">        //第五个颜色清除</span><br><span class="line">        olObj.children[olObj.children.length-1].className="";</span><br><span class="line">        //设置第一个按钮的颜色</span><br><span class="line">        olObj.children[0].className="current";</span><br><span class="line">      &#125;else &#123;</span><br><span class="line">        //清除所有的小按钮的背景颜色</span><br><span class="line">        for (var j = 0; j &lt; olObj.children.length; j++) &#123;</span><br><span class="line">          olObj.children[j].removeAttribute("class");</span><br><span class="line">        &#125;</span><br><span class="line">        olObj.children[pic].className = "current";</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    //左边按钮</span><br><span class="line">    my$("left").onclick = function () &#123;</span><br><span class="line">      if (pic == 0)&#123;</span><br><span class="line">        pic = 5;</span><br><span class="line">        ulObj.style.left = -pic * imgWidth + "px";</span><br><span class="line">      &#125;</span><br><span class="line">      pic--;</span><br><span class="line">      animate(ulObj,-pic*imgWidth);</span><br><span class="line">      //设置小按钮的颜色---所有的小按钮的颜色全部删除</span><br><span class="line">      for (var j = 0; j &lt; olObj.children.length; j++) &#123;</span><br><span class="line">        olObj.children[j].removeAttribute("class");</span><br><span class="line">      &#125;</span><br><span class="line">      //当前的pic索引值对应的按钮设置颜色</span><br><span class="line">      olObj.children[pic].className = "current";</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">  //设置任意的一个元素,移动到指定的目标位置</span><br><span class="line">  function animate(element, target) &#123;</span><br><span class="line">    clearInterval(element.timeId);</span><br><span class="line">    //定时器的id值存储到对象的一个属性中</span><br><span class="line">    element.timeId = setInterval(function () &#123;</span><br><span class="line">      //获取元素的当前的位置,数字类型</span><br><span class="line">      var current = element.offsetLeft;</span><br><span class="line">      //每次移动的距离</span><br><span class="line">      var step = 10;</span><br><span class="line">      step = current &lt; target ? step : -step;</span><br><span class="line">      //当前移动到位置</span><br><span class="line">      current += step;</span><br><span class="line">      if (Math.abs(current - target) &gt; Math.abs(step)) &#123;</span><br><span class="line">        element.style.left = current + "px";</span><br><span class="line">      &#125; else &#123;</span><br><span class="line">        //清理定时器</span><br><span class="line">        clearInterval(element.timeId);</span><br><span class="line">        //直接到达目标</span><br><span class="line">        element.style.left = target + "px";</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;, 10);</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> js学习案例 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>hexo主题优化</title>
      <link href="/2019/11/13/hexo%E4%B8%BB%E9%A2%98%E4%BC%98%E5%8C%96/"/>
      <url>/2019/11/13/hexo%E4%B8%BB%E9%A2%98%E4%BC%98%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<p>本次增加博客评论功能和页面访问量统计功能</p><a id="more"></a><h3 id="评论功能的实现"><a href="#评论功能的实现" class="headerlink" title="评论功能的实现"></a>评论功能的实现</h3><p>在刚刚搭建好博客之后就准备增加评论功能，也找了一些资料，其中有基于Leancloud系统的Valine评论系统和基于github开发的Gitment评论系统。对于前者，看到很多评论说很不错的，但是我注册的时候发现需要提交身份证号，想一想还是算了吧（即使我的身份信息很不值钱）。。后者呢，我一开始用的那个博客主题集成了这个功能，但是我在配置的时候没有配置好，印象不太好，而且好像只能关联github账号，也就放弃了。</p><p>后来偶然发现了一个叫做来必力的评论系统，感觉还不错，然后就装了，真的还不错。</p><p><strong>安装过程如下</strong></p><ol><li><p>打开<a href="https://www.livere.com/" target="_blank" rel="noopener">来必力</a>官网，注册账号（只需要邮箱验证，不需要身份证。。）</p></li><li><p>点击安装</p><p><img src="/2019/11/13/hexo%E4%B8%BB%E9%A2%98%E4%BC%98%E5%8C%96/TIM%E6%88%AA%E5%9B%BE20191113225944.png" alt="安装来必力"></p></li><li><p>选择city免费版</p><p><img src="/2019/11/13/hexo%E4%B8%BB%E9%A2%98%E4%BC%98%E5%8C%96/TIM%E6%88%AA%E5%9B%BE20191113230124.png" alt="安装city免费版"></p></li><li><p>复制data-uid里面的代码（双引号里面的代码），将其粘贴到主题配置文件的<code>livere_uid</code> 下面：</p><p><img src="/2019/11/13/hexo%E4%B8%BB%E9%A2%98%E4%BC%98%E5%8C%96/InkedTIM%E6%88%AA%E5%9B%BE20191113230519_LI.jpg" alt="配置代码"></p></li><li><p>然后测试，部署就可以了。就这么简单。。。</p><p><img src="/2019/11/13/hexo%E4%B8%BB%E9%A2%98%E4%BC%98%E5%8C%96/hexo%E4%B8%BB%E9%A2%98%E4%BC%98%E5%8C%96%5CTIM%E6%88%AA%E5%9B%BE20191113231231.png" alt="结果"></p></li><li><p>这个来必力评论系统的后台管理也非常方便，能够进行评论管理，评论提醒等。</p></li></ol><h3 id="页面访问量的统计"><a href="#页面访问量的统计" class="headerlink" title="页面访问量的统计"></a>页面访问量的统计</h3><p>这个我用的是不蒜子进行访客统计量的设置，我用的是next主题，应该是自带有不蒜子功能，所以直接在主题配置文件下找到busuanzi_count 将其下面的enable的值改成true就可以了，就能在页面底部实现访客统计以及在文章页面实现阅读量的统计。。</p><p><img src="/2019/11/13/hexo%E4%B8%BB%E9%A2%98%E4%BC%98%E5%8C%96/TIM%E6%88%AA%E5%9B%BE20191113231911.png" alt="修改配置"></p><p>参考链接：</p><p><a href="http://wangwlj.com/2017/12/18/blog_comment/" target="_blank" rel="noopener">http://wangwlj.com/2017/12/18/blog_comment/</a></p><p><a href="https://www.jianshu.com/p/c311d31265e0" target="_blank" rel="noopener">https://www.jianshu.com/p/c311d31265e0</a></p>]]></content>
      
      
      <categories>
          
          <category> hexo博客搭建 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>关于IE浏览器测试html代码的一些问题</title>
      <link href="/2019/11/12/IE%E6%B5%8F%E8%A7%88%E5%99%A8%E6%B5%8B%E8%AF%95html%E4%BB%A3%E7%A0%81/"/>
      <url>/2019/11/12/IE%E6%B5%8F%E8%A7%88%E5%99%A8%E6%B5%8B%E8%AF%95html%E4%BB%A3%E7%A0%81/</url>
      
        <content type="html"><![CDATA[<p>测试节点的兼容代码，在谷歌和火狐上面都能正常显示，然而使用IE浏览器测试的时候，IE提示说无法访问此页面，确保web地址的正确：</p><a id="more"></a><p><img src="/2019/11/12/IE%E6%B5%8F%E8%A7%88%E5%99%A8%E6%B5%8B%E8%AF%95html%E4%BB%A3%E7%A0%81/TIM%E5%9B%BE%E7%89%8720191112152038.png" alt="无法访问"></p><p>上网查了一下，才知道可能是因为挂了代理导致本地的服务器无法启动，需要在IE浏览器中找到设置选项—-Internet选项—-局域网设置–在对于本地地址不使用代理服务器前面勾选，点击确定即可。</p><p><img src="/2019/11/12/IE%E6%B5%8F%E8%A7%88%E5%99%A8%E6%B5%8B%E8%AF%95html%E4%BB%A3%E7%A0%81/TIM%E6%88%AA%E5%9B%BE20191112153259.png" alt="代理服务器设置"></p><p>但是，设置完成之后好像还是不行，提示未找到文件。</p><p><img src="/2019/11/12/IE%E6%B5%8F%E8%A7%88%E5%99%A8%E6%B5%8B%E8%AF%95html%E4%BB%A3%E7%A0%81/TIM%E6%88%AA%E5%9B%BE20191112153913.png" alt="未找到文件"></p><p>这就很挠头了，同样的代码在谷歌和火狐里面运行的好好的，在ie里面就是各种问题，然后找了各种方案。一开始以为是webStrom的原因，网上也有通过配置webstrom内置服务器和端口的方式解决问题，但是搁我这就不行。</p><p>后来发现，将文件名设置成英文可以正常在IE中打开。。。但中文就是乱码，提示找不到文件。</p><p>最后我把在谷歌上面能正常访问的地址复制到IE上面，能够正常显示。这就应该是IE浏览器的问题了，真是很想吐槽IE。。</p><p><strong>IE浏览器测试的解决办法：</strong></p><ul><li>手动输入要打开的文件地址</li><li>把文件名换成英文，不要用中文</li><li>找到源文件选择打开方式—IE浏览器</li><li>将谷歌或火狐的地址复制到IE上面</li></ul><p>在测试IE的时候总是会有“是否阻止脚本运行的弹窗”，在head标签中插入下面的代码即可：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- saved from url=(0014)about:internet --&gt;</span><br></pre></td></tr></table></figure><p>下面是一篇关于URL编码的文章，虽然没看太明白先放这里吧：</p><p><a href="http://www.ruanyifeng.com/blog/2010/02/url_encoding.htmlhttp://www.ruanyifeng.com/blog/2010/02/url_encoding.html" target="_blank" rel="noopener">http://www.ruanyifeng.com/blog/2010/02/url_encoding.htmlhttp://www.ruanyifeng.com/blog/2010/02/url_encoding.html</a></p>]]></content>
      
      
      <categories>
          
          <category> JavaScript学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> IE测试的问题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DOM学习笔记</title>
      <link href="/2019/11/11/DOM%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
      <url>/2019/11/11/DOM%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="DOM学习笔记"><a href="#DOM学习笔记" class="headerlink" title="DOM学习笔记"></a>DOM学习笔记</h2><h3 id="API的概念"><a href="#API的概念" class="headerlink" title="API的概念"></a>API的概念</h3><p>API（Application Programming Interface，应用程序编程接口）是一些预先定义好的函数，目的是提供应用程序与开发人员基于某软件或硬件得以访问一组例程的能力，而又无需访问源码，或理解内部工作机制的细节。</p><a id="more"></a><p>例程：例程的作用类似于函数，但含义更为丰富一些。例程是某个系统对外提供的功能接口或服务的集合。比如操作系统的API、服务等就是例程；Delphi或C++Builder提供的标准函数和库函数等也是例程。我们编写一个DLL的时候，里面的输出函数就是这个DLL的例程。</p><ul><li>任何开发语言都有自己的API</li><li>API的特征：输入和输出</li></ul><h3 id="Web-API的概念"><a href="#Web-API的概念" class="headerlink" title="Web API的概念"></a>Web API的概念</h3><p>浏览器提供的一套操作浏览器功能和页面元素的API(BOM和DOM)：此处的Web API特指浏览器提供的API(一组方法)</p><p>掌握常见的浏览器提供的API的调用方式：    <a href="https://developer.mozilla.org/zh-CN/docs/Web/API" target="_blank" rel="noopener">MDN-Web API</a></p><h3 id="JavaScript的组成"><a href="#JavaScript的组成" class="headerlink" title="JavaScript的组成"></a>JavaScript的组成</h3><p><img src="/2019/11/11/DOM%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/js%E7%BB%84%E6%88%90.png" alt="js组成"></p><h4 id="ECMAScript-JavaScript的核心"><a href="#ECMAScript-JavaScript的核心" class="headerlink" title="ECMAScript - JavaScript的核心"></a>ECMAScript - JavaScript的核心</h4><p>定义了javascript的语法规范</p><p>JavaScript的核心，描述了语言的基本语法和数据类型，ECMAScript是一套标准，定义了一种语言的标准与具体实现无关</p><h4 id="BOM-浏览器对象模型"><a href="#BOM-浏览器对象模型" class="headerlink" title="BOM - 浏览器对象模型"></a>BOM - 浏览器对象模型</h4><p>一套操作浏览器功能的API</p><p>通过BOM可以操作浏览器窗口，比如：弹出框、控制浏览器跳转、获取分辨率等</p><h4 id="DOM-文档对象模型"><a href="#DOM-文档对象模型" class="headerlink" title="DOM - 文档对象模型"></a>DOM - 文档对象模型</h4><p>一套操作页面元素的API</p><p>DOM可以把HTML看做是文档树，通过DOM提供的API可以对树上的节点进行操作</p><h3 id="DOM"><a href="#DOM" class="headerlink" title="DOM"></a>DOM</h3><h4 id="DOM的概念："><a href="#DOM的概念：" class="headerlink" title="DOM的概念："></a>DOM的概念：</h4><p>文档对象模型（Document Object Model,简称DOM），是W3C组织推荐 的处理可扩充标志语言的标准编程接口。在网页上，组织页面或文档的对象被组织在一个树形结构中，用来表示文档中对象的标准模型就称为DOM。</p><p>DOM又称文档树结构</p><p><img src="/2019/11/11/DOM%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/DOM%E6%A0%91%E7%BB%93%E6%9E%84.png" alt="DOM树结构"></p><ul><li>文档：一个网页可以看做是一个文档</li><li>节点：文档中所有的内容都是节点（标签、属性、文本）</li><li>元素：网页中的标签</li><li>属性：标签的属性</li></ul><h3 id="DOM经常进行的操作"><a href="#DOM经常进行的操作" class="headerlink" title="DOM经常进行的操作"></a>DOM经常进行的操作</h3><ol><li>获取页面元素</li><li>动态创建元素</li><li>对元素进行操作（设置其属性或调用其方法）</li><li>事件（什么时机做什么操作）</li></ol><h3 id="获取页面元素"><a href="#获取页面元素" class="headerlink" title="获取页面元素"></a>获取页面元素</h3><p>为什么：我们想要操作页面上的某部分，需要先获取到该部分对应的元素，然后才能进行后续操作。</p><h4 id="根据id获取元素"><a href="#根据id获取元素" class="headerlink" title="根据id获取元素"></a>根据id获取元素</h4><p>var idObj = document.getElementById(“元素的id名”)；</p><p>返回id值对应的元素（单个）</p><h4 id="根据标签名获取元素"><a href="#根据标签名获取元素" class="headerlink" title="根据标签名获取元素"></a>根据标签名获取元素</h4><p>var spans = document.getElementsByTagName(“span”);</p><p>返回一个包含所有span标签的伪数组</p><h4 id="根据name属性值获取"><a href="#根据name属性值获取" class="headerlink" title="根据name属性值获取"></a>根据name属性值获取</h4><p>var inputs= document.getElementsByName(‘hobby’);</p><p>返回一个name属性值为hobby的伪数组</p><h4 id="根据类名获取元素"><a href="#根据类名获取元素" class="headerlink" title="根据类名获取元素"></a>根据类名获取元素</h4><p>var mains = document.getElementsByClassName(“main”);</p><p>返回一个类名为main的伪数组</p><h4 id="根据选择器获取元素"><a href="#根据选择器获取元素" class="headerlink" title="根据选择器获取元素"></a>根据选择器获取元素</h4><p>var text = document.querySelector(‘#text’);    这是根据id选择器获取元素</p><p>返回单个元素</p><p>var boxes = document.querySelectorAll(‘.box’);   这是根据类选择器获取元素</p><p>返回一个伪数组</p><h3 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h3><p>事件：触发-响应机制</p><h4 id="事件三要素："><a href="#事件三要素：" class="headerlink" title="事件三要素："></a>事件三要素：</h4><ol><li>事件源：触发事件的元素</li><li>事件类型：事件触发的方式（如鼠标点击）</li><li>事件处理程序：事件触发后要执行的代码（函数）</li></ol><h4 id="事件的基本使用"><a href="#事件的基本使用" class="headerlink" title="事件的基本使用"></a>事件的基本使用</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> box = <span class="built_in">document</span>.getElementById(<span class="string">'box'</span>);</span><br><span class="line">box.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'代码会在box被点击后执行'</span>);  </span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="案例："><a href="#案例：" class="headerlink" title="案例："></a>案例：</h4><p>点击按钮弹出对话框</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//先有按钮，才能获取，获取之后才能注册点击事件</span></span><br><span class="line">&lt;input type=<span class="string">"button"</span> value=<span class="string">"按钮"</span> id=<span class="string">"btn"</span>&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="comment">//根据id属性的值从文档中获取这个元素</span></span><br><span class="line">    <span class="keyword">var</span> btnObj = <span class="built_in">document</span>.getElementById(<span class="string">"btn"</span>);</span><br><span class="line">    <span class="comment">//为当前这个按钮元素（对象），注册点击事件，添加事件处理函数（匿名函数）</span></span><br><span class="line">    btnObj.onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="comment">//这是响应的事情</span></span><br><span class="line">        alert(<span class="string">"哎呀，我好帅啊"</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><h3 id="属性操作"><a href="#属性操作" class="headerlink" title="属性操作"></a>属性操作</h3><h4 id="基本标签属性操作"><a href="#基本标签属性操作" class="headerlink" title="基本标签属性操作"></a>基本标签属性操作</h4><p>href、title、id、src、className、width、height</p><p>案例：点击图片修改图片的宽和高</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;img src=<span class="string">"images/1.jpg"</span> alt=<span class="string">""</span> id=<span class="string">"im"</span>/&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="comment">//点击图片,修改自身的宽和高</span></span><br><span class="line">  <span class="keyword">var</span> imgObj = <span class="built_in">document</span>.getElementById(<span class="string">"im"</span>);</span><br><span class="line">  imgObj.onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.width = <span class="string">"200"</span>;</span><br><span class="line">    <span class="keyword">this</span>.height = <span class="string">"300"</span>;</span><br><span class="line">  &#125;;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><h3 id="表单元素属性"><a href="#表单元素属性" class="headerlink" title="表单元素属性"></a>表单元素属性</h3><ul><li>value 用于大部分表单元素的内容获取(option除外)</li><li>type 可以获取input标签的类型(输入框或复选框等)</li><li>disabled 禁用属性</li><li>checked 复选框选中属性</li><li>selected 下拉菜单选中属性</li></ul><p>案例：检测密码是否是6-10位，如果不满足要求高亮显示文本框</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;input type=<span class="string">"text"</span> value=<span class="string">""</span> id=<span class="string">"txt"</span>/&gt;</span><br><span class="line">    </span><br><span class="line">&lt;script&gt;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">my$</span>(<span class="params">id</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">document</span>.getElementById(id);</span><br><span class="line">&#125;</span><br><span class="line">  <span class="comment">//获取文本框</span></span><br><span class="line">  my$(<span class="string">"txt"</span>).onblur=<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">//判断密码的长度</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">this</span>.value.length&gt;=<span class="number">6</span>&amp;&amp;<span class="keyword">this</span>.value.length&lt;=<span class="number">10</span>)&#123;</span><br><span class="line">      <span class="keyword">this</span>.style.backgroundColor=<span class="string">"red"</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.style.backgroundColor=<span class="string">"green"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><h4 id="自定义属性操作"><a href="#自定义属性操作" class="headerlink" title="自定义属性操作"></a>自定义属性操作</h4><ul><li>getAttribute() 获取标签行内属性</li><li>setAttribute() 设置标签行内属性</li><li>removeAttribute() 移除标签行内属性</li><li>与element.属性的区别: 上述三个方法用于获取任意的行内属性</li></ul><p>//list[i].score=(i+1)*10;//此方式,自定义属性在DOM对象上,不在标签中</p><p>案例：自定义属性的设置和获取</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">&lt;ul id=<span class="string">"uu"</span>&gt;</span><br><span class="line">  &lt;li&gt;小明&lt;<span class="regexp">/li&gt;</span></span><br><span class="line"><span class="regexp">  &lt;li&gt;小王&lt;/</span>li&gt;</span><br><span class="line">  &lt;li&gt;小苏&lt;<span class="regexp">/li&gt;</span></span><br><span class="line"><span class="regexp">  &lt;li&gt;小杰&lt;/</span>li&gt;</span><br><span class="line">  &lt;li&gt;小乔&lt;<span class="regexp">/li&gt;</span></span><br><span class="line"><span class="regexp">&lt;/u</span>l&gt;</span><br><span class="line">&lt;script src=<span class="string">"common.js"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">&lt;script&gt;</span><br><span class="line">   <span class="comment">//获取所有的li标签,然后为每个标签中动态的添加自定义属性和值</span></span><br><span class="line">  <span class="comment">//点击的时候获取该标签的自定义属性的值</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">//根据id获取ul标签,并且或者该标签中所有的li</span></span><br><span class="line">  <span class="keyword">var</span> list=my$(<span class="string">"uu"</span>).getElementsByTagName(<span class="string">"li"</span>);</span><br><span class="line">  <span class="comment">//循环遍历</span></span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;list.length;i++)&#123;</span><br><span class="line">    <span class="comment">//先为每个li添加自定义属性</span></span><br><span class="line">    list[i].setAttribute(<span class="string">"score"</span>,(i+<span class="number">1</span>)*<span class="number">10</span>);</span><br><span class="line">    <span class="comment">//点击每个li标签,显示对应的自定义属性值</span></span><br><span class="line">    list[i].onclick=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      alert(<span class="keyword">this</span>.getAttribute(<span class="string">"score"</span>));</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>body&gt;</span><br></pre></td></tr></table></figure><h4 id="样式操作"><a href="#样式操作" class="headerlink" title="样式操作"></a>样式操作</h4><p>使用style方式设置的样式显示在标签行内</p><p>注意：通过样式属性设置宽高、位置的属性类型是字符串，需要加上px</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> box = <span class="built_in">document</span>.getElementById(<span class="string">'box'</span>);</span><br><span class="line">box.style.width = <span class="string">'100px'</span>;</span><br><span class="line">box.style.height = <span class="string">'100px'</span>;</span><br><span class="line">box.style.backgroundColor = <span class="string">'red'</span>;</span><br></pre></td></tr></table></figure><h4 id="类名操作"><a href="#类名操作" class="headerlink" title="类名操作"></a>类名操作</h4><p>修改标签的className属性相当于直接修改标签的类名</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> box = <span class="built_in">document</span>.getElementById(<span class="string">'box'</span>);</span><br><span class="line">box.className = <span class="string">'clearfix'</span>;</span><br></pre></td></tr></table></figure><h3 id="innerText和textCount"><a href="#innerText和textCount" class="headerlink" title="innerText和textCount"></a>innerText和textCount</h3><ul><li>设置标签中文本内容，使用textCount属性，谷歌、火狐支持，IE8不支持</li><li>设置标签中文本内容，使用innerText属性，谷歌、火狐、IE8都支持</li></ul><p>如果这个属性在浏览器中不支持，那么这个属性的类型就是undefined</p><p>判断这个属性的类型是不是undefined，就知道浏览器是否支持</p><p>兼容代码如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line"><span class="comment">//设置任意的标签中间的任意文本内容</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">setInnerText</span>(<span class="params">element,text</span>) </span>&#123;</span><br><span class="line">    <span class="comment">//判断浏览器是否支持这个属性</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">typeof</span> element.textContent ==<span class="string">"undefined"</span>)&#123;<span class="comment">//不支持</span></span><br><span class="line">      element.innerText=text;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;<span class="comment">//支持这个属性</span></span><br><span class="line">      element.textContent=text;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取任意标签中间的文本内容</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">getInnerText</span>(<span class="params">element</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">typeof</span> element.textContent==<span class="string">"undefined"</span>)&#123;</span><br><span class="line">     <span class="keyword">return</span> element.innerText;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">      <span class="keyword">return</span> element.textContent;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//测试</span></span><br><span class="line"></span><br><span class="line">  my$(<span class="string">"btn"</span>).onclick=<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">//console.log(getInnerText(my$("dv")));</span></span><br><span class="line">    setInnerText(my$(<span class="string">"dv"</span>),<span class="string">"哈哈,我又变帅了"</span>);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><h3 id="innerText和innerHTML"><a href="#innerText和innerHTML" class="headerlink" title="innerText和innerHTML"></a>innerText和innerHTML</h3><p>设置：</p><ul><li>如果使用innerText主要是设置文本的,设置标签内容,是没有标签的效果的</li><li>innerHTML可以设置文本内容，主要是用来在标签中设置新的html标签，是有标签效果的</li></ul><p>获取：</p><ul><li>innerText可以获取标签中间的文本内容，但是标签中如果还有标签，那么最里面的标签的文本内容也能获取—–获取不到标签</li><li>innerHTML可以真正获取标签中的所有内容</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">&lt;input type=<span class="string">"button"</span> value=<span class="string">"显示效果"</span> id=<span class="string">"btn"</span>/&gt;</span><br><span class="line">&lt;input type=<span class="string">"button"</span> value=<span class="string">"显示效果获取"</span> id=<span class="string">"btn2"</span>/&gt;</span><br><span class="line">&lt;div id=<span class="string">"dv"</span>&gt;</span><br><span class="line">  这是div</span><br><span class="line">&lt;p&gt;这是一个p&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>div&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">my$</span>(<span class="params">id</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">document</span>.getElementById(id);</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line">  my$(<span class="string">"btn"</span>).onclick=<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// my$("dv").innerText="哈哈";//设置文本</span></span><br><span class="line">    <span class="comment">//  my$("dv").innerText="&lt;p&gt;这是一个p&lt;/p&gt;";//设置html标签的代码</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// my$("dv").innerHTML="哈哈";</span></span><br><span class="line">    my$(<span class="string">"dv"</span>).innerHTML=<span class="string">"&lt;p&gt;这是一个p&lt;/p&gt;"</span>;<span class="comment">//设置Html标签的</span></span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//获取</span></span><br><span class="line">  my$(<span class="string">"btn2"</span>).onclick=<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">//可以获取标签中的文本内容</span></span><br><span class="line">    <span class="comment">//console.log(my$("dv").innerText);</span></span><br><span class="line">    <span class="built_in">console</span>.log(my$(<span class="string">"dv"</span>).innerHTML);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>body&gt;</span><br></pre></td></tr></table></figure><h3 id="节点的相关概念"><a href="#节点的相关概念" class="headerlink" title="节点的相关概念"></a>节点的相关概念</h3><p>文档：document</p><p>元素（element）：页面中所有的标签，元素（element）= 标签 = 对象</p><p>节点（node）：页面中所有的内容，包括标签，属性，文本（文字、换行、空格）</p><p>根元素：html标签</p><!-- more --><p>节点：能够获取任意一个标签中的元素</p><h4 id="节点的属性"><a href="#节点的属性" class="headerlink" title="节点的属性"></a>节点的属性</h4><p>节点的属性:可以用标签—-元素.出来，属性节点.出来，文本节点.点出来</p><ol><li>nodeType: 节点的类型：1—标签；2—-属性；3—-文本</li><li>nodeName：节点的名字：标签节点—大写的标签名字；属性节点—小写的标签名字；文本节点—#text</li><li>nodeValue:节点的值：标签节点—null，属性节点—属性值，文本节点—文本内容</li></ol><h4 id="12行代码–获取元素和节点"><a href="#12行代码–获取元素和节点" class="headerlink" title="12行代码–获取元素和节点"></a>12行代码–获取元素和节点</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> ulObj=<span class="built_in">document</span>.getElementById(<span class="string">"uu"</span>);</span><br><span class="line">  <span class="comment">//父级节点</span></span><br><span class="line">  <span class="built_in">console</span>.log(ulObj.parentNode);</span><br><span class="line">  <span class="comment">//父级元素</span></span><br><span class="line">  <span class="built_in">console</span>.log(ulObj.parentElement);</span><br><span class="line">  <span class="comment">//子节点</span></span><br><span class="line">  <span class="built_in">console</span>.log(ulObj.childNodes);</span><br><span class="line">  <span class="comment">//子元素</span></span><br><span class="line">  <span class="built_in">console</span>.log(ulObj.children);</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"=============================================="</span>);</span><br><span class="line">  <span class="comment">//第一个子节点</span></span><br><span class="line">  <span class="built_in">console</span>.log(ulObj.firstChild);<span class="comment">//IE8中是第一个子元素</span></span><br><span class="line">  <span class="comment">//第一个子元素</span></span><br><span class="line">  <span class="built_in">console</span>.log(ulObj.firstElementChild);<span class="comment">//IE8中不支持</span></span><br><span class="line">  <span class="comment">//最后一个子节点</span></span><br><span class="line">  <span class="built_in">console</span>.log(ulObj.lastChild);<span class="comment">//IE8中是第一个子元素</span></span><br><span class="line">  <span class="comment">//最后一个子元素</span></span><br><span class="line">  <span class="built_in">console</span>.log(ulObj.lastElementChild);<span class="comment">//IE8中不支持</span></span><br><span class="line">  <span class="comment">//某个元素的前一个兄弟节点</span></span><br><span class="line">  <span class="built_in">console</span>.log(my$(<span class="string">"three"</span>).previousSibling);<span class="comment">//IE8中是第一个子元素</span></span><br><span class="line">  <span class="comment">//某个元素的前一个兄弟元素</span></span><br><span class="line">  <span class="built_in">console</span>.log(my$(<span class="string">"three"</span>).previousElementSibling);<span class="comment">//IE8中不支持</span></span><br><span class="line">  <span class="comment">//某个元素的后一个兄弟节点</span></span><br><span class="line">  <span class="built_in">console</span>.log(my$(<span class="string">"three"</span>).nextSibling);<span class="comment">//IE8中是第一个子元素</span></span><br><span class="line">  <span class="comment">//某个元素的后一个兄弟元素</span></span><br><span class="line">  <span class="built_in">console</span>.log(my$(<span class="string">"three"</span>).nextElementSibling);<span class="comment">//IE8中不支持</span></span><br></pre></td></tr></table></figure><p><strong>总结：</strong></p><ul><li>凡是获取节点的代码在谷歌和火狐得到的都是—-相关的节点</li><li>凡是获取元素的代码在谷歌和火狐得到的都是—-相关的元素</li><li>除了父级节点和子级节点之外，凡是获取节点的代码在IE8中都是获取元素，不支持其他浏览器中获取元素的代码（结果是undefined）。</li></ul><p><strong>节点的兼容代码</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line"> </span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取父级元素中的第一个子元素</span></span><br><span class="line"><span class="comment"> * @param element 父级元素</span></span><br><span class="line"><span class="comment"> * @returns &#123;*&#125; 父级元素中的子级元素</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getFirstElement</span>(<span class="params">element</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (element.firstElementChild) &#123;</span><br><span class="line">        <span class="keyword">return</span> element.firstElementChild;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">var</span> node = element.firstChild;</span><br><span class="line">        <span class="keyword">while</span> (node &amp;&amp; node.nodeType != <span class="number">1</span>) &#123;</span><br><span class="line">            node = node.nextSibling;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> node;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取父级元素中的最后一个子元素</span></span><br><span class="line"><span class="comment"> * @param element 父级元素</span></span><br><span class="line"><span class="comment"> * @returns &#123;*&#125; 最后一个子元素</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getLastElement</span>(<span class="params">element</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (element.lastElementChild) &#123;</span><br><span class="line">        <span class="keyword">return</span> element.lastElementChild;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">var</span> node = element.lastChild;</span><br><span class="line">        <span class="keyword">while</span> (node &amp;&amp; node.nodeType != <span class="number">1</span>) &#123;</span><br><span class="line">            node = node.previousSibling;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> node;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取某个元素的前一个兄弟元素</span></span><br><span class="line"><span class="comment"> * @param element 某个元素</span></span><br><span class="line"><span class="comment"> * @returns &#123;*&#125; 前一个兄弟元素</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getPreviousElement</span>(<span class="params">element</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (element.previousElementSibling) &#123;</span><br><span class="line">        <span class="keyword">return</span> element.previousElementSibling</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">var</span> node = element.previousSibling;</span><br><span class="line">        <span class="keyword">while</span> (node &amp;&amp; node.nodeType != <span class="number">1</span>) &#123;</span><br><span class="line">            node = node.previousSibling;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> node;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取某个元素的后一个兄弟元素</span></span><br><span class="line"><span class="comment"> * @param element 某个元素</span></span><br><span class="line"><span class="comment"> * @returns &#123;*&#125; 后一个兄弟元素</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getNextElement</span>(<span class="params">element</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (element.nextElementSibling) &#123;</span><br><span class="line">        <span class="keyword">return</span> element.nextElementSibling</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">var</span> node = element.nextSibling;</span><br><span class="line">        <span class="keyword">while</span> (node &amp;&amp; node.nodeType != <span class="number">1</span>) &#123;</span><br><span class="line">            node = node.nextSibling;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> node;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取某个元素的所有兄弟元素</span></span><br><span class="line"><span class="comment"> * @param element 某个元素</span></span><br><span class="line"><span class="comment"> * @returns &#123;Array&#125; 兄弟元素</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getSiblings</span>(<span class="params">element</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!element)<span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">var</span> elements = [];</span><br><span class="line">    <span class="keyword">var</span> ele = element.previousSibling;</span><br><span class="line">    <span class="keyword">while</span> (ele) &#123;</span><br><span class="line">        <span class="keyword">if</span> (ele.nodeType === <span class="number">1</span>) &#123;</span><br><span class="line">            elements.push(ele);</span><br><span class="line">        &#125;</span><br><span class="line">        ele = ele.previousSibling;</span><br><span class="line">    &#125;</span><br><span class="line">    ele = element.nextSibling;</span><br><span class="line">    <span class="keyword">while</span> (ele) &#123;</span><br><span class="line">        <span class="keyword">if</span> (ele.nodeType === <span class="number">1</span>) &#123;</span><br><span class="line">            elements.push(ele);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        ele = ele.nextSibling;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> elements;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="创建元素"><a href="#创建元素" class="headerlink" title="创建元素"></a>创建元素</h3><p>创建元素：是为了提高用户体验</p><!-- more --><p><strong>元素创建的三种方式</strong></p><ol><li>document.write(“标签代码及内容”);</li><li>对象.innerHTML=”标签及代码”;</li><li>document.createElement(“标签及内容”);</li></ol><h4 id="第一种方式创建元素"><a href="#第一种方式创建元素" class="headerlink" title="第一种方式创建元素"></a>第一种方式创建元素</h4><p>document.write(“”);</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//document.write("标签代码及内容");</span></span><br><span class="line"> <span class="built_in">document</span>.getElementById(<span class="string">"btn"</span>).onclick=<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">   <span class="built_in">document</span>.write(<span class="string">"&lt;p&gt;这是一个p&lt;/p&gt;"</span>);</span><br><span class="line"> &#125;;</span><br></pre></td></tr></table></figure><p><strong>缺陷</strong></p><p>如果是在页面加载完毕之后使用这种方式创建元素，那么页面上已经存在的元素会被覆盖掉</p><h4 id="第二种方式创建元素"><a href="#第二种方式创建元素" class="headerlink" title="第二种方式创建元素"></a>第二种方式创建元素</h4><p>对象.innerHTML = “标签代码及内容”;</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="comment">//点击按钮,在div中创建一个p标签</span></span><br><span class="line">  <span class="comment">//第二种方式创建元素: 对象.innerHTML="标签代码及内容";</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">document</span>.getElementById(<span class="string">"btn"</span>).onclick=<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">document</span>.getElementById(<span class="string">"btn"</span>).innerHTML=<span class="string">"&lt;p&gt;窗前明月光,疑是地上霜,举头望明月,低头思故乡&lt;/p&gt;"</span>;</span><br><span class="line">  &#125;;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><h4 id="第三种放肆创建元素"><a href="#第三种放肆创建元素" class="headerlink" title="第三种放肆创建元素"></a>第三种放肆创建元素</h4><p>1.创建元素—document.createElment(“标签代码及内容”);</p><p>2.把元素追加到父级元素中，父级标签.appendChild(创建的元素);</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建元素</span></span><br><span class="line"> <span class="comment">//document.createElement("标签名字");对象</span></span><br><span class="line"> <span class="comment">//把元素追加到父级元素中</span></span><br><span class="line"> <span class="comment">//点击按钮,在div中创建一个p</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">document</span>.getElementById(<span class="string">"btn"</span>).onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">   <span class="comment">//创建元素的</span></span><br><span class="line">   <span class="keyword">var</span> pObj = <span class="built_in">document</span>.createElement(<span class="string">"p"</span>);</span><br><span class="line">   pObj.innerText = <span class="string">"这是一个p"</span>;</span><br><span class="line">   <span class="comment">//把创建后的子元素追加到父级元素中</span></span><br><span class="line">    <span class="built_in">document</span>.getElementById(<span class="string">"dv"</span>).appendChild(pObj);</span><br><span class="line"> &#125;;</span><br></pre></td></tr></table></figure><h4 id="只创建一个元素"><a href="#只创建一个元素" class="headerlink" title="只创建一个元素"></a>只创建一个元素</h4><p>有则删除，无则创建</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//先判断有没有,有就删除,然后再创建</span></span><br><span class="line">  my$(<span class="string">"btn"</span>).onclick=<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">//判断,div中有没有这个按钮,有就删除</span></span><br><span class="line">    <span class="comment">//判断这个按钮的子元素是否存在</span></span><br><span class="line">   <span class="keyword">if</span>(my$(<span class="string">"btn2"</span>))&#123;<span class="comment">//如果为true就有</span></span><br><span class="line">     my$(<span class="string">"dv"</span>).removeChild(my$(<span class="string">"btn2"</span>));</span><br><span class="line">   &#125;</span><br><span class="line">    <span class="keyword">var</span> obj=<span class="built_in">document</span>.createElement(<span class="string">"input"</span>);</span><br><span class="line">    obj.type=<span class="string">"button"</span>;</span><br><span class="line">    obj.value=<span class="string">"按钮"</span>;</span><br><span class="line">   obj.id=<span class="string">"btn2"</span>;</span><br><span class="line">   my$(<span class="string">"dv"</span>).appendChild(obj);</span><br><span class="line"> &#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  my$(<span class="string">"btn"</span>).onclick=<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">//判断,div中有没有这个按钮,有就删除</span></span><br><span class="line">    <span class="comment">//判断这个按钮的子元素是否存在</span></span><br><span class="line">    <span class="keyword">if</span>(!my$(<span class="string">"btn2"</span>))&#123;</span><br><span class="line">      <span class="keyword">var</span> obj=<span class="built_in">document</span>.createElement(<span class="string">"input"</span>);</span><br><span class="line">      obj.type=<span class="string">"button"</span>;</span><br><span class="line">      obj.value=<span class="string">"按钮"</span>;</span><br><span class="line">      obj.id=<span class="string">"btn2"</span>;</span><br><span class="line">      my$(<span class="string">"dv"</span>).appendChild(obj);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  &#125;;</span><br></pre></td></tr></table></figure><h3 id="事件详解"><a href="#事件详解" class="headerlink" title="事件详解"></a>事件详解</h3><p>绑定事件的方法：addEventListener();  attachEvent();</p><p>区别：</p><ol><li>方法名不一样</li><li>参数个数不一样：addEventListener()三个参数，attachEvent两个参数</li><li>addEventListener–谷歌、火狐、IE11支持，IE8不支持；attachEvent–谷歌火狐 IE11不支持，IE8支持</li><li>this不同，addEventListener中的this是当前绑定事件的对象，attachEvent中的this是window</li><li>addEventListener中事件的类型（事件的名字），没有on；attachEvent中的事件的类型（事件的名字）有on</li></ol><h4 id="兼容代码"><a href="#兼容代码" class="headerlink" title="兼容代码"></a>兼容代码</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">  <span class="comment">//为任意元素.绑定任意的事件, 任意的元素,事件的类型,事件处理函数</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">addEventListener</span>(<span class="params">element,type,fn</span>) </span>&#123;</span><br><span class="line">    <span class="comment">//判断浏览器是否支持这个方法</span></span><br><span class="line">    <span class="keyword">if</span>(element.addEventListener)&#123;</span><br><span class="line">      element.addEventListener(type,fn,<span class="literal">false</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(element.attachEvent)&#123;</span><br><span class="line">      element.attachEvent(<span class="string">"on"</span>+type,fn);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">      element[<span class="string">"on"</span>+type]=fn;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//解绑事件的兼容</span></span><br><span class="line">  <span class="comment">//为任意的一个元素,解绑对应的事件</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">removeEventListener</span>(<span class="params">element,type,fnName</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(element.removeEventListener)&#123;</span><br><span class="line">      element.removeEventListener(type,fnName,<span class="literal">false</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(element.detachEvent)&#123;</span><br><span class="line">      element.detachEvent(<span class="string">"on"</span>+type,fnName);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">      element[<span class="string">"on"</span>+type]=<span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h4 id="事件的三个阶段"><a href="#事件的三个阶段" class="headerlink" title="事件的三个阶段"></a>事件的三个阶段</h4><ol><li><p>事件捕获阶段—1</p></li><li><p>事件目标阶段—2</p></li><li><p>事件冒泡阶段—3—-默认冒泡阶段，从里向外</p><p>事件对象.eventPhase属性可以查看事件触发时所处的阶段</p></li></ol><h3 id="阻止事件冒泡"><a href="#阻止事件冒泡" class="headerlink" title="阻止事件冒泡"></a>阻止事件冒泡</h3><ul><li>标准方式 event.stopPropagation();</li><li>IE低版本 event.cancelBubble = true; 标准中已废弃</li></ul><h3 id="事件对象的属性和方法"><a href="#事件对象的属性和方法" class="headerlink" title="事件对象的属性和方法"></a>事件对象的属性和方法</h3><ul><li>event.type 获取事件类型</li><li>clientX/clientY     所有浏览器都支持，窗口位置</li><li>pageX/pageY       IE8以前不支持，页面位置</li><li>event.target || event.srcElement 用于获取触发事件的元素</li><li>event.preventDefault() 取消默认行为</li></ul><h3 id="BOM"><a href="#BOM" class="headerlink" title="BOM"></a>BOM</h3><p>BOM(Browser Object Model) 是指浏览器对象模型，浏览器对象模型提供了独立于内容的、可以与浏览器窗口进行互动的对象结构。BOM由多个对象组成，其中代表浏览器窗口的Window对象是BOM的顶层对象，其他对象都是该对象的子对象。</p><h4 id="BOM的顶级对象window"><a href="#BOM的顶级对象window" class="headerlink" title="BOM的顶级对象window"></a>BOM的顶级对象window</h4><p>window是浏览器的顶级对象，当调用window下的属性和方法时，可以省略window；document从属于window<br>注意：window下一个特殊的属性 window.name，值为空</p><h4 id="页面加载的事件"><a href="#页面加载的事件" class="headerlink" title="页面加载的事件"></a>页面加载的事件</h4><ul><li><strong style="color:red">onload—页面加载完成之后执行</strong></li><li>onunload—页面关闭后执行</li><li>onbeforeload—页面关闭之前执行</li></ul><h4 id="定时器"><a href="#定时器" class="headerlink" title="定时器"></a>定时器</h4><p><strong>setTimeout()和clearTimeout()</strong></p><p>在指定的毫秒数到达之后执行指定的函数，只执行一次</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建一个定时器，1000毫秒后执行，返回定时器的标示</span></span><br><span class="line"><span class="keyword">var</span> timerId = setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'Hello World'</span>);</span><br><span class="line">&#125;, <span class="number">1000</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 取消定时器的执行</span></span><br><span class="line">clearTimeout(timerId);</span><br></pre></td></tr></table></figure><p><strong>setInterval()和clearInterval()</strong></p><p>定时调用的函数，可以按照给定的时间(单位毫秒)周期调用函数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建一个定时器，每隔1秒调用一次</span></span><br><span class="line"><span class="keyword">var</span> timerId = setInterval(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> date = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line">  <span class="built_in">console</span>.log(date.toLocaleTimeString());</span><br><span class="line">&#125;, <span class="number">1000</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 取消定时器的执行</span></span><br><span class="line">clearInterval(timerId);</span><br></pre></td></tr></table></figure><h3 id="location对象"><a href="#location对象" class="headerlink" title="location对象"></a>location对象</h3><p>location对象是window对象下的一个属性，可以获取或者设置浏览器地址栏的URL，可以省略window对象</p><p><strong>URL（Uniform Resource Locator,统一资源定位符）的组成</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//地址栏上#及后面的内容</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">window</span>.location.hash);</span><br><span class="line"><span class="comment">//主机名及端口号</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">window</span>.location.host);</span><br><span class="line"><span class="comment">//主机名</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">window</span>.location.hostname);</span><br><span class="line"><span class="comment">//文件的路径---相对路径</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">window</span>.location.pathname);</span><br><span class="line"><span class="comment">//端口号</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">window</span>.location.port);</span><br><span class="line"><span class="comment">//协议</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">window</span>.location.protocol);</span><br><span class="line"><span class="comment">//搜索的内容</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">window</span>.location.search);</span><br></pre></td></tr></table></figure><p>location的一些属性和方法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">onload=<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">     <span class="built_in">document</span>.getElementById(<span class="string">"btn"</span>).onclick=<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">       <span class="comment">//设置跳转的页面的地址</span></span><br><span class="line">      <span class="comment">//location.href="http://www.jd.com";//属性</span></span><br><span class="line">      <span class="comment">//location.assign("http://www.jd.com");//方法</span></span><br><span class="line">       <span class="comment">//location.reload();//重新加载--刷新</span></span><br><span class="line">       <span class="comment">//location.replace("http://www.jd.com");//没有历史记录</span></span><br><span class="line">     &#125;;</span><br><span class="line">   &#125;;</span><br></pre></td></tr></table></figure><h3 id="history对象"><a href="#history对象" class="headerlink" title="history对象"></a>history对象</h3><ul><li>back()</li><li>forward()</li><li>go()</li></ul><h3 id="navigator对象"><a href="#navigator对象" class="headerlink" title="navigator对象"></a>navigator对象</h3><ul><li>userAgent</li></ul><p>通过userAgent可以判断用户浏览器的类型</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">console.log(window.navigator.userAgent);</span><br></pre></td></tr></table></figure><ul><li>platform</li></ul><p>通过platform可以判断浏览器所在的系统平台类型.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(windodw.navigator.platform);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> JavaScript学习 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>点击图片放大</title>
      <link href="/2019/11/09/%E7%82%B9%E5%87%BB%E5%9B%BE%E7%89%87%E6%94%BE%E5%A4%A7/"/>
      <url>/2019/11/09/%E7%82%B9%E5%87%BB%E5%9B%BE%E7%89%87%E6%94%BE%E5%A4%A7/</url>
      
        <content type="html"><![CDATA[<h4 id="怎么添加文章点击图片放大功能"><a href="#怎么添加文章点击图片放大功能" class="headerlink" title="怎么添加文章点击图片放大功能"></a>怎么添加文章点击图片放大功能</h4><p>更改<code>next/_config.yml</code><br><code>fancybox: true</code></p>]]></content>
      
      
      <categories>
          
          <category> 博客搭建 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 点击图片放大 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>更换hexo主题</title>
      <link href="/2019/11/08/%E6%9B%B4%E6%8D%A2hexo%E4%B8%BB%E9%A2%98/"/>
      <url>/2019/11/08/%E6%9B%B4%E6%8D%A2hexo%E4%B8%BB%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<p>一开始搭建hexo博客的时候是跟着b站上面某个大神一点一点来做的，在选择主题的时候，我没有选择推荐的next主题，而是选择了一个小众的antiquity主题，古风类型的，用了两天觉得还不错，整体的画风都挺棒，我也很喜欢，但是后面增加功能的时候有点麻烦。<a id="more"></a>想实现的功能很难找到现成的解决方法，自己本身又刚刚接触，具体的语法啥的不太懂，想完善博客就很费劲，想来想去又更换了next主题，这个用的多，教程也多，后期想实现什么功能、更换啥样式也应该比较容易。</p><p>下面附上更换hexo主题的方法：</p><h4 id="下载next主题文件"><a href="#下载next主题文件" class="headerlink" title="下载next主题文件"></a>下载next主题文件</h4><p>首先切换到本地的blog目录，右击鼠标打开git bash here 然后，输入下面的命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git clone https://github.com/theme-next/hexo-theme-next themes/next</span><br></pre></td></tr></table></figure><h4 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h4><p>上述操作就把next主题下载到了本地，然后修改配置文件：找到根目录下的<code>_config.yml</code>文件，将themes值修改为next。如下所示</p><p><img src="/2019/11/08/%E6%9B%B4%E6%8D%A2hexo%E4%B8%BB%E9%A2%98/pasted-0.png" alt="修改主题配置"></p><h4 id="本地调试，远程部署"><a href="#本地调试，远程部署" class="headerlink" title="本地调试，远程部署"></a>本地调试，远程部署</h4><p>在git bash中输入下面的命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo g </span><br><span class="line">hexo s</span><br></pre></td></tr></table></figure><p>hexo g 为重新生成文件,输入hexo s 命令表示在本地测试。打开localhost:4000查看更换后的主题，无误后输入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo d</span><br></pre></td></tr></table></figure><p>部署到github上，完成主题的更换操作。</p>]]></content>
      
      
      <categories>
          
          <category> hexo博客搭建 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 主题更换 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>js-学习案例：栏目切换</title>
      <link href="/2019/11/07/js-%E5%AD%A6%E4%B9%A0%E6%A1%88%E4%BE%8B%EF%BC%9A%E6%A0%8F%E7%9B%AE%E5%88%87%E6%8D%A2/"/>
      <url>/2019/11/07/js-%E5%AD%A6%E4%B9%A0%E6%A1%88%E4%BE%8B%EF%BC%9A%E6%A0%8F%E7%9B%AE%E5%88%87%E6%8D%A2/</url>
      
        <content type="html"><![CDATA[<h2 id="tags"><a href="#tags" class="headerlink" title="tags:"></a>tags:</h2><p>开始记录学习的经过，今天做了一个tab栏目切换的小功能，整了很久才做出来，最后还想实现背景切换，但是没能做出来，今天先这样吧</p><a id="more"></a><p>仿照爱词霸的搜索，用js实现切换<br><img src="/2019/11/07/js-%E5%AD%A6%E4%B9%A0%E6%A1%88%E4%BE%8B%EF%BC%9A%E6%A0%8F%E7%9B%AE%E5%88%87%E6%8D%A2/pasted-0.png" alt="结果"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;搜索框切换功能&lt;/title&gt;</span><br><span class="line">    &lt;style&gt;</span><br><span class="line">        body &#123;</span><br><span class="line">            background-image: url(&quot;banner-1x.png&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        * &#123;</span><br><span class="line">            margin: 0;</span><br><span class="line">            padding: 0;</span><br><span class="line">            box-sizing: border-box;</span><br><span class="line">        &#125;</span><br><span class="line">        .search &#123;</span><br><span class="line">            margin: 100px auto;</span><br><span class="line">            width: 680px;</span><br><span class="line">            position: relative;</span><br><span class="line">        &#125;</span><br><span class="line">        .hd span &#123;</span><br><span class="line">            display: inline-block;</span><br><span class="line">            width: 88px;</span><br><span class="line">            height: 36px;</span><br><span class="line">            background: rgba(0,0,0,.3);</span><br><span class="line">            font-size: 16px;</span><br><span class="line">            font-weight: 700;</span><br><span class="line">            cursor: pointer;</span><br><span class="line">            text-align: center;</span><br><span class="line">            line-height: 40px;</span><br><span class="line">        &#125;</span><br><span class="line">        .hd span.current&#123;</span><br><span class="line">            background-color: #fff;</span><br><span class="line">        &#125;</span><br><span class="line">        input &#123;</span><br><span class="line">            width: 600px;</span><br><span class="line">            height: 56px;</span><br><span class="line">            outline: none;</span><br><span class="line">            padding-left: 20px;</span><br><span class="line">            color: gray;</span><br><span class="line">            border: none;</span><br><span class="line">            display: none;</span><br><span class="line">            font-size: 18px;</span><br><span class="line">        &#125;</span><br><span class="line">        input.current &#123;</span><br><span class="line">            display: block;</span><br><span class="line">        &#125;</span><br><span class="line">        .sea-click &#123;</span><br><span class="line">            width: 80px;</span><br><span class="line">            height: 56px;</span><br><span class="line">            text-align: center;</span><br><span class="line">            line-height: 56px;</span><br><span class="line">            position: absolute;</span><br><span class="line">            right: 0;</span><br><span class="line">            bottom:0;</span><br><span class="line">            background-color: #383838;</span><br><span class="line">            color: #fff;</span><br><span class="line">            cursor: pointer;</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div class=&quot;search&quot; id=&quot;search&quot;&gt;</span><br><span class="line">    &lt;div class=&quot;hd&quot;&gt;</span><br><span class="line">        &lt;span class=&quot;current&quot;&gt;查词&lt;/span&gt;</span><br><span class="line">        &lt;span&gt;翻译&lt;/span&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;div class=&quot;bd&quot;&gt;</span><br><span class="line">        &lt;input type=&quot;text&quot; value=&quot;请输入你要查询的单词&quot; id=&quot;search_btn&quot;  class=&quot;current&quot;/&gt;</span><br><span class="line">        &lt;input type=&quot;text&quot; value=&quot;请输入你要查询的短语或句子&quot; id=&quot;search_btn1&quot;  /&gt;</span><br><span class="line">        &lt;div class=&quot;sea-click&quot;&gt;搜索&lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    //先获取最外层的div</span><br><span class="line">    var search = document.getElementById(&quot;search&quot;);</span><br><span class="line">    //然后获取里面的第一个div</span><br><span class="line">    var hd = search.getElementsByTagName(&quot;div&quot;)[0];</span><br><span class="line">    //获取里面的第二个div</span><br><span class="line">    var bd = search.getElementsByTagName(&quot;div&quot;)[1];</span><br><span class="line">    //获取第一个div中所有的span标签</span><br><span class="line">    var spans = hd.getElementsByTagName(&quot;span&quot;);</span><br><span class="line">    //获取下方搜索框中的input标签</span><br><span class="line">    var inputs = bd.getElementsByTagName(&quot;input&quot;);</span><br><span class="line"></span><br><span class="line">    //循环遍历所有的span标签，并注册点击事件</span><br><span class="line">    for (var i = 0; i &lt; spans.length; i++) &#123;</span><br><span class="line">        //首先将span中的索引值存起来</span><br><span class="line">        spans[i].setAttribute(&quot;index&quot;,i);</span><br><span class="line">        //为每一个span注册点击事件</span><br><span class="line">        spans[i].onclick = function () &#123;</span><br><span class="line">            //清除所有的span的类样式</span><br><span class="line">            for (var j = 0; j &lt; spans.length; j++) &#123;</span><br><span class="line">                spans[j].removeAttribute(&quot;class&quot;);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            //给当前的span对象设置类样式</span><br><span class="line">            this.className=&quot;current&quot;;</span><br><span class="line">            //获取当前span对象的索引值</span><br><span class="line">            var num = this.getAttribute(&quot;index&quot;);</span><br><span class="line">            //清除所有的input的类样式</span><br><span class="line">            for (var k = 0; k &lt; inputs.length; k++) &#123;</span><br><span class="line">                inputs[k].removeAttribute(&quot;class&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">            //当前span对应的input标签设置类样式</span><br><span class="line">            inputs[num].className = &quot;current&quot;;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    for (var i = 0; i &lt; inputs.length; i++) &#123;</span><br><span class="line">        //注册获取焦点的点击事件</span><br><span class="line">        inputs[i].onfocus = function () &#123;</span><br><span class="line">            //判断当前对象的value值</span><br><span class="line">            if (this.value == &quot;请输入你要查询的单词&quot; || &quot;请输入你要查询的短语或句子&quot;)&#123;</span><br><span class="line">                this.value = &quot;&quot;;</span><br><span class="line">                this.style.color=&quot;black&quot;;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        //鼠标离开后的事件</span><br><span class="line">        inputs[i].onblur = function () &#123;</span><br><span class="line">            //判断id值，设置value值</span><br><span class="line">            if (this.id == &quot;search_btn&quot;)&#123;</span><br><span class="line">                this.value = &quot;请输入你要查询的单词&quot;;</span><br><span class="line">                this.style.color=&quot;gray&quot;;</span><br><span class="line"></span><br><span class="line">            &#125;else &#123;</span><br><span class="line">                this.value = &quot;请输入你要查询的短语或句子&quot;;</span><br><span class="line">                this.style.color=&quot;gray&quot;;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>哎，整了一晚上，一开始就被布局给拦住了，css很多竟然又忘了。。爱词霸中查词和翻译那块是梯形，我也找到了一些做梯形的方法，可是在设置样式的时候总是出现问题，最后也放弃了继续深究，，只用普通的矩形来替代，先这样吧，整了一晚上才怎出个这么个玩意儿。。</p><p>但是不管怎么说也算是大概整明白排他功能。刚开始内容比较基础，但是觉得也可能比较重要，就先记录下来吧。</p>]]></content>
      
      
      <categories>
          
          <category> js学习案例 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js排他功能应用 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>博客首页文章截断</title>
      <link href="/2019/11/06/%E5%AE%A2%E9%A6%96%E9%A1%B5%E6%96%87%E7%AB%A0%E6%88%AA%E6%96%AD/"/>
      <url>/2019/11/06/%E5%AE%A2%E9%A6%96%E9%A1%B5%E6%96%87%E7%AB%A0%E6%88%AA%E6%96%AD/</url>
      
        <content type="html"><![CDATA[<p>在文章中加入 <code>&lt;!-- more --&gt;</code> 就会自动截断文章内容，后面的文章内容不再自动显示。</p><a id="more"></a><p>也有需要配置config.yml文件的</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># Automatically Excerpt. Not recommend.</span><br><span class="line"># Please use &lt;!-- more --&gt; in the post to control excerpt accurately.</span><br><span class="line">auto_excerpt:</span><br><span class="line">  enable: false</span><br><span class="line">  length: 150</span><br></pre></td></tr></table></figure><p>将false设置为true，然后自己在文章中的合适的位置设置<code>&lt;!-- more --&gt;</code></p><p>参考文章：<br><a href="https://blog.csdn.net/lewky_liu/article/details/81277337" target="_blank" rel="noopener">https://blog.csdn.net/lewky_liu/article/details/81277337</a><br><a href="https://blog.csdn.net/qq_32337109/article/details/78755729" target="_blank" rel="noopener">https://blog.csdn.net/qq_32337109/article/details/78755729</a></p>]]></content>
      
      
      <categories>
          
          <category> hexo博客搭建 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 文章截断 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo博客之插入图片</title>
      <link href="/2019/11/06/hexo%E5%8D%9A%E5%AE%A2%E4%B8%AD%E6%8F%92%E5%85%A5%E5%9B%BE%E7%89%87/"/>
      <url>/2019/11/06/hexo%E5%8D%9A%E5%AE%A2%E4%B8%AD%E6%8F%92%E5%85%A5%E5%9B%BE%E7%89%87/</url>
      
        <content type="html"><![CDATA[<p>在博客中插入图片是一个不可或缺的功能，下面是我搭建博客过程中实现插入图片的方法。</p><a id="more"></a><h4 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h4><p>首先修改根目录下的config.yml文件中的post_asset_folder将false为true。<br>如下图所示：<br><img src="/2019/11/06/hexo%E5%8D%9A%E5%AE%A2%E4%B8%AD%E6%8F%92%E5%85%A5%E5%9B%BE%E7%89%87/pasted-0.png" alt="插入图片"></p><h4 id="插件安装与配置"><a href="#插件安装与配置" class="headerlink" title="插件安装与配置"></a>插件安装与配置</h4><p>先安装一个图片转换的插件,打开本地博客根目录，在git bash here 中输入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-admin-image --save</span><br></pre></td></tr></table></figure><p><strong style="color:red">敲黑板，划重点</strong></p><p>这个插件的内容需要修改，不然可能导致图片显示不出来，最开始没有注意到，因此图片一直都显示不出来，后面才找到这个解决办法。</p><p>打开/node_modules/hexo-asset-image/index.js，将内容更换为下面的代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line">&apos;use strict&apos;;</span><br><span class="line">var cheerio = require(&apos;cheerio&apos;);</span><br><span class="line"></span><br><span class="line">// http://stackoverflow.com/questions/14480345/how-to-get-the-nth-occurrence-in-a-string</span><br><span class="line">function getPosition(str, m, i) &#123;</span><br><span class="line">  return str.split(m, i).join(m).length;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var version = String(hexo.version).split(&apos;.&apos;);</span><br><span class="line">hexo.extend.filter.register(&apos;after_post_render&apos;, function(data)&#123;</span><br><span class="line">  var config = hexo.config;</span><br><span class="line">  if(config.post_asset_folder)&#123;</span><br><span class="line">    var link = data.permalink;</span><br><span class="line">if(version.length &gt; 0 &amp;&amp; Number(version[0]) == 3)</span><br><span class="line">   var beginPos = getPosition(link, &apos;/&apos;, 1) + 1;</span><br><span class="line">else</span><br><span class="line">   var beginPos = getPosition(link, &apos;/&apos;, 3) + 1;</span><br><span class="line">// In hexo 3.1.1, the permalink of &quot;about&quot; page is like &quot;.../about/index.html&quot;.</span><br><span class="line">var endPos = link.lastIndexOf(&apos;/&apos;) + 1;</span><br><span class="line">    link = link.substring(beginPos, endPos);</span><br><span class="line"></span><br><span class="line">    var toprocess = [&apos;excerpt&apos;, &apos;more&apos;, &apos;content&apos;];</span><br><span class="line">    for(var i = 0; i &lt; toprocess.length; i++)&#123;</span><br><span class="line">      var key = toprocess[i];</span><br><span class="line"> </span><br><span class="line">      var $ = cheerio.load(data[key], &#123;</span><br><span class="line">        ignoreWhitespace: false,</span><br><span class="line">        xmlMode: false,</span><br><span class="line">        lowerCaseTags: false,</span><br><span class="line">        decodeEntities: false</span><br><span class="line">      &#125;);</span><br><span class="line"></span><br><span class="line">      $(&apos;img&apos;).each(function()&#123;</span><br><span class="line">if ($(this).attr(&apos;src&apos;))&#123;</span><br><span class="line">// For windows style path, we replace &apos;\&apos; to &apos;/&apos;.</span><br><span class="line">var src = $(this).attr(&apos;src&apos;).replace(&apos;\\&apos;, &apos;/&apos;);</span><br><span class="line">if(!/http[s]*.*|\/\/.*/.test(src) &amp;&amp;</span><br><span class="line">   !/^\s*\//.test(src)) &#123;</span><br><span class="line">  // For &quot;about&quot; page, the first part of &quot;src&quot; can&apos;t be removed.</span><br><span class="line">  // In addition, to support multi-level local directory.</span><br><span class="line">  var linkArray = link.split(&apos;/&apos;).filter(function(elem)&#123;</span><br><span class="line">return elem != &apos;&apos;;</span><br><span class="line">  &#125;);</span><br><span class="line">  var srcArray = src.split(&apos;/&apos;).filter(function(elem)&#123;</span><br><span class="line">return elem != &apos;&apos; &amp;&amp; elem != &apos;.&apos;;</span><br><span class="line">  &#125;);</span><br><span class="line">  if(srcArray.length &gt; 1)</span><br><span class="line">srcArray.shift();</span><br><span class="line">  src = srcArray.join(&apos;/&apos;);</span><br><span class="line">  $(this).attr(&apos;src&apos;, config.root + link + src);</span><br><span class="line">  console.info&amp;&amp;console.info(&quot;update link as:--&gt;&quot;+config.root + link + src);</span><br><span class="line">&#125;</span><br><span class="line">&#125;else&#123;</span><br><span class="line">console.info&amp;&amp;console.info(&quot;no src attr, skipped...&quot;);</span><br><span class="line">console.info&amp;&amp;console.info($(this));</span><br><span class="line">&#125;</span><br><span class="line">      &#125;);</span><br><span class="line">      data[key] = $.html();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="插入图片"><a href="#插入图片" class="headerlink" title="插入图片"></a>插入图片</h4><p>在博客根目录下，git bash here 中输入 <code>hexo new &quot;文章名&quot;</code> 然后在source/post目录下会生成一个 文章名.md 文件和一个与文章同名的文件夹，可以直接将想要上传的图片放到该文件夹里面，然后在.md文件中可以直接引用，如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">![图片的替换文字][文件夹名/xxx.jpg]</span><br></pre></td></tr></table></figure><p>因为博客名与文件名一直，直接引用相对路径就可以了。</p><p>然后</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">  hexo g -d</span><br></pre></td></tr></table></figure><p>就部署到github上面了。</p><h4 id="另一种方法-hexo-admin需要配置好"><a href="#另一种方法-hexo-admin需要配置好" class="headerlink" title="另一种方法(hexo-admin需要配置好)"></a>另一种方法(hexo-admin需要配置好)</h4><p>在hexo-admin中插入图片：</p><p>hexo-admin中可以直接选择赋值粘贴图片在编辑区域，会自动下载到source/images中并重命名。但是在windows系统中，粘贴会导致裂图，只需把前后两条斜杠删去在最前面的斜杠添加两个..即可。</p><p><img src="/2019/11/06/hexo%E5%8D%9A%E5%AE%A2%E4%B8%AD%E6%8F%92%E5%85%A5%E5%9B%BE%E7%89%87/pasted-1.png" alt="hexo-admin中插入图片"></p><p>然后部署即可。</p>]]></content>
      
      
      <categories>
          
          <category> hexo博客搭建 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博客插入图片 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>怎样使用hexo-admin插件</title>
      <link href="/2019/11/03/%E6%80%8E%E6%A0%B7%E4%BD%BF%E7%94%A8hexo-admin%E6%8F%92%E4%BB%B6/"/>
      <url>/2019/11/03/%E6%80%8E%E6%A0%B7%E4%BD%BF%E7%94%A8hexo-admin%E6%8F%92%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<p>首先在博客根目录下输入</p><a id="more"></a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">hexo server -d 切换到后台管理页面 localhost：4000/admin/</span><br><span class="line">就可以进行可视化编辑文章</span><br><span class="line"></span><br><span class="line">编辑完之后，仍然需要</span><br><span class="line">hexo g 重新生成文件</span><br><span class="line">hexo s 本地查看</span><br><span class="line">hexo d 部署</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> hexo博客搭建 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo-admin插件的使用 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>啊，我的博客-----</title>
      <link href="/2019/11/03/%E5%95%8A%EF%BC%8C%E6%88%91%E7%9A%84%E5%8D%9A%E5%AE%A2-1/"/>
      <url>/2019/11/03/%E5%95%8A%EF%BC%8C%E6%88%91%E7%9A%84%E5%8D%9A%E5%AE%A2-1/</url>
      
        <content type="html"><![CDATA[<p>文笔不好，那就随便说说吧，反正也没人看到……</p><a id="more"></a><p>昨天考完了教资，从外面的回来的路上我就一直在想，明天我就一定要开始自己动手去做一个自己的博客，不管做的是好是坏，得动手，不能一直光想而不去做。。当然这个道理，我始终明白，但就是觉得学的东西太少（确实也学的太少），虽然知道网上有各种各样的教程，但就是迟迟没有动手。</p><p>在前两年的大学生活中，学了一些编程语言，如c#，Java，PHP等，当然都没有很明白，然后时间也就白白浪费了。现在大三上已经过去一半，大四就要去找实习岗位，可是啥都不会，学编程学了一年多，一直在门口徘徊。。。有时候一想到这都大三了就觉得急躁。。。。</p><p>前面说，大学前两年也接触了一些编程语言，甚至也决定了要去学习Java还整了一套网课，可是刚把Java基础语法看完，就发现头发少了不少。。。。加上本来就对抽象的东西不甚理解，逐渐的放弃了学后端的想法，觉得前端东西–所见即所得，而且确实比较容易入门，就逐渐想做前端了（虽然现在发现做啥要想做好都不容易…… 就这么滴吧）</p><p>然后，因为学习前端，在网上也看到了许多漂亮的网站，查资料的时候，也看到了许多很好的博客，就渐渐想去做一个自己的博客，虽然当时很菜基本是做不出来的，但是想就比较容易了，于是就一直在想……直到今天，才开始动手。。。</p><p>其实，在上学期结束的时候，就有以为朋友带着我用phpstudy+wordpress在本地搭建了一个博客，但是那个太简约了，而且当时对他的操作很迷，就听他讲也是云里雾里，而且最后做出来的就是一个搭建，没有期待的那种效果（太简约了，而且他教了几次我也不是很会写点东西和上传……），本来想着暑假在家自己在试试，上网上找点教程啥的，但是很不幸，回家一个月基本啥也没干，就把那三部大秦帝国看完了，，，，</p><p>前面墨迹着这么多，主要是为了练习打字……</p><p>现在说一说这个博客咋做的吧，，，好吧具体的步骤记得不清楚了，，，但是基本的步骤还是有印象的：首先，这个博客是基于hexo和node.js在github上搭建的。所以，得有个github账号吧，然后为了能将本地库上传到github上还需要下载一个git（就分布式版本控制系统，，目前还不是很理解），然后下载安装node.js，然后在本地的合适的位置新建要创建的博客目录，然后可以用DOS命令也可以用git bash安装hexo，可以上官网 <a href="http://hexo.io/" target="_blank" rel="noopener">http://hexo.io/</a>   ,那里有详细的安装过程，当然我是在B站找的视频，一步一步跟着做的。到这一步就本地博客就搭建好了，然后需要初始化，更换主题啥的。哦，对了，本地库要和远程的github建立关联（具体怎么关联，每次都是百度，这次是之前有关联过，就直接跳过了），然后可以把本地的库部署到github上，那么部署之前呢，需要在github上新建一个这样  <code>yourgithubname.github.io</code> 格式的仓库，我的是 <code>qllhuo.github.io</code> 然后每次上传文章基本上三行命令，如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cd 到你的本地blog根目录</span><br><span class="line">hexo g 重新生成文件 （generate）</span><br><span class="line">  hexo s 在本地服务器查看（server）localhost:4000</span><br><span class="line">  hexo d 文件生成后立即部署到远程服务器 -deploy qlhuo.github.io</span><br></pre></td></tr></table></figure><p>哦，忘了说怎样写文章和上传文章了，有若干种方法，在此之前我是直接在本地相应的目录下写md文件，然后根据上面的三行代码直接上传文件。比较麻烦。然后刚刚找到了一个后台管理插件 hexo-admin，如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cd yourblog</span><br><span class="line">npm install --save hexo-admin</span><br><span class="line">hexo server -d</span><br><span class="line">open http://localhost:4000/admin/</span><br></pre></td></tr></table></figure><p>原文链接：<a href="https://blog.kinpzz.com/2016/12/31/hexo-admin-backend-management/" target="_blank" rel="noopener">https://blog.kinpzz.com/2016/12/31/hexo-admin-backend-management/</a></p><p>到这应该就差不多了，博客的基本框架有了，选的主题也比较美观吧！然而，还是有很多不足的地方，慢慢改吧，今天算是开一个好头吧！</p>]]></content>
      
      
      <categories>
          
          <category> hexo博客搭建 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 我的第一篇博客 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
