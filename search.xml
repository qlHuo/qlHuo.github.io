<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>酒</title>
    <url>/2019/11/20/%E9%85%92/</url>
    <content><![CDATA[<p>酒和欢乐总是联系在一起——无酒不欢</p>
<p>酒和苦恼也常联系在一起——借酒消愁</p>
<p>欢乐和苦恼必然联系在一起——每一个欢乐背后都隐藏着当这个快乐消失后的苦恼，每一个苦恼背后都隐藏着当这个苦恼失去后的快乐。</p>
<p>这话是许嵩说的但是我记不住，可能没那么快乐也没那么苦恼吧！</p>
<a id="more"></a>

<p><strong>是酒不是水，莫要当酒鬼</strong></p>
<p>大概是最近一年慢慢喝起了白酒，自从这个学期更甚——几乎每个星期都要和朋友喝上一点，感觉也还不错。隐约记得是因为啤酒不好喝，还有白酒喝着可能更有感觉。起初喝的是江小白，主要是因为他的情怀——总是有很多让人或许叫产生共鸣的话，哦，对了还有他的瓶装设计，一瓶二两，我和朋友一人一两就着周黑鸭慢慢的啜（chuo）。我总是对他讲，以后退休了，每天啜二两白酒的生活也着实让人羡慕呐。然鹅，现在才20岁却在想几十年以后的事情，未免显得太过幼稚或者叫想的太多。其实，想一想也还不错，当做是越过现实幻想吧。</p>
<p>喝酒的时候我学着去品，慢慢的喝，确实有一股清醇，当下肚的时候确有一股暖意，特别是在寒冷的哈尔滨，喝上一口，暖和。</p>
<p>今天买了一瓶一斤的红星二锅头，我俩尽然喝了大半瓶，其实觉得也没有多少，他喝两杯半我喝了两杯（记得当初是我邀他一起喝的，现在居然这么能喝，一口下去半杯没了，我只是啜了很少一部分）。不过这个酒可能确实不一样，刚入口的时候是没有酒味的，入口之后渐渐显现酒味，朋友说真不愧是绵柔啊。我能喝出不同却不能很好理解其中的韵味，虽说每次是在“品”，总是觉得太过肤浅，可能是人生阅历还不太够又或许不想去理解其中的味道吧。</p>
<p><img src="/%E9%85%92/IMG_20191120_180124.jpg" alt="酒水"></p>
<p>然而，酒就是酒，不是水，少喝为上，达到微醺的效果最好。其实每次只要喝一点我就会有点晕乎乎的感觉，我渐渐的喜欢上了这种感觉。不愿当个酒鬼，也不会当个酒鬼，当经历什么事情之后自然会醉。</p>
]]></content>
      <categories>
        <category>杂感</category>
      </categories>
  </entry>
  <entry>
    <title>js-轮播图</title>
    <url>/2019/11/18/js-%E8%BD%AE%E6%92%AD%E5%9B%BE/</url>
    <content><![CDATA[<p>javascript实现轮播图效果—</p>
<p>今天整了一下午，仍然是没有完全理解，先上传经常看看。。</p>
<a id="more"></a>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">"en"</span>&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">  &lt;meta charset=<span class="string">"UTF-8"</span>&gt;</span><br><span class="line">  &lt;title&gt;<span class="xml"><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span></span><br><span class="line">  &lt;style type=<span class="string">"text/css"</span>&gt;</span><br><span class="line">    * &#123;</span><br><span class="line">      padding: <span class="number">0</span>;</span><br><span class="line">      margin: <span class="number">0</span>;</span><br><span class="line">      list-style: none;</span><br><span class="line">      border: <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .all &#123;</span><br><span class="line">      width: <span class="number">500</span>px;</span><br><span class="line">      height: <span class="number">200</span>px;</span><br><span class="line">      padding: <span class="number">7</span>px;</span><br><span class="line">      border: 1px solid #ccc;</span><br><span class="line">      margin: <span class="number">100</span>px auto;</span><br><span class="line">      position: relative;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .screen &#123;</span><br><span class="line">      width: <span class="number">500</span>px;</span><br><span class="line">      height: <span class="number">200</span>px;</span><br><span class="line">      overflow: hidden;</span><br><span class="line">      position: relative;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .screen li &#123;</span><br><span class="line">      width: <span class="number">500</span>px;</span><br><span class="line">      height: <span class="number">200</span>px;</span><br><span class="line">      overflow: hidden;</span><br><span class="line">      float: left;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .screen ul &#123;</span><br><span class="line">      position: absolute;</span><br><span class="line">      left: <span class="number">0</span>;</span><br><span class="line">      top: <span class="number">0</span>px;</span><br><span class="line">      width: <span class="number">3000</span>px;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .all ol &#123;</span><br><span class="line">      position: absolute;</span><br><span class="line">      right: <span class="number">10</span>px;</span><br><span class="line">      bottom: <span class="number">10</span>px;</span><br><span class="line">      line-height: <span class="number">20</span>px;</span><br><span class="line">      text-align: center;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .all ol li &#123;</span><br><span class="line">      float: left;</span><br><span class="line">      width: <span class="number">20</span>px;</span><br><span class="line">      height: <span class="number">20</span>px;</span><br><span class="line">      background: #fff;</span><br><span class="line">      border: 1px solid #ccc;</span><br><span class="line">      margin-left: <span class="number">10</span>px;</span><br><span class="line">      cursor: pointer;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .all ol li.current &#123;</span><br><span class="line">      background: #DB192A;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    #arr &#123;</span><br><span class="line">      display: none;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    #arr span &#123;</span><br><span class="line">      width: <span class="number">40</span>px;</span><br><span class="line">      height: <span class="number">40</span>px;</span><br><span class="line">      position: absolute;</span><br><span class="line">      left: <span class="number">5</span>px;</span><br><span class="line">      top: <span class="number">50</span>%;</span><br><span class="line">      margin-top: <span class="number">-20</span>px;</span><br><span class="line">      background: #000;</span><br><span class="line">      cursor: pointer;</span><br><span class="line">      line-height: <span class="number">40</span>px;</span><br><span class="line">      text-align: center;</span><br><span class="line">      font-weight: bold;</span><br><span class="line">      font-family: <span class="string">'黑体'</span>;</span><br><span class="line">      font-size: <span class="number">30</span>px;</span><br><span class="line">      color: #fff;</span><br><span class="line">      opacity: <span class="number">0.3</span>;</span><br><span class="line">      border: 1px solid #fff;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    #arr #right &#123;</span><br><span class="line">      right: <span class="number">5</span>px;</span><br><span class="line">      left: auto;</span><br><span class="line">    &#125;</span><br><span class="line">  &lt;<span class="regexp">/style&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"all"</span> id=<span class="string">'box'</span>&gt;</span><br><span class="line">  &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"screen"</span>&gt;<span class="xml"><span class="comment">&lt;!--相框--&gt;</span></span></span><br><span class="line">    &lt;ul&gt;</span><br><span class="line">      &lt;li&gt;&lt;img src="images/1.jpg" width="500" height="200"/&gt;&lt;/li&gt;</span><br><span class="line">      &lt;li&gt;&lt;img src="images/2.jpg" width="500" height="200"/&gt;&lt;/li&gt;</span><br><span class="line">      &lt;li&gt;&lt;img src="images/3.jpg" width="500" height="200"/&gt;&lt;/li&gt;</span><br><span class="line">      &lt;li&gt;&lt;img src="images/4.jpg" width="500" height="200"/&gt;&lt;/li&gt;</span><br><span class="line">      &lt;li&gt;&lt;img src="images/5.jpg" width="500" height="200"/&gt;&lt;/li&gt;</span><br><span class="line">    &lt;/ul&gt;</span><br><span class="line">    &lt;ol&gt;</span><br><span class="line">    &lt;/ol&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">  &lt;div id="arr"&gt;&lt;span id="left"&gt;&amp;lt;&lt;/span&gt;&lt;span id="right"&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;script src="common.js"&gt;&lt;/script&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">  // 获取box</span><br><span class="line">  var box = my$("box");</span><br><span class="line">  //获取相框</span><br><span class="line">  var screen = box.children[0];</span><br><span class="line">  //获取相框的宽度</span><br><span class="line">  var imgWidth = screen.offsetWidth;</span><br><span class="line">  //获取ul</span><br><span class="line">  var ulObj = screen.children[0];</span><br><span class="line">  //获取ul下的所有的li</span><br><span class="line">  var list = ulObj.children;</span><br><span class="line">  //获取ol</span><br><span class="line">  var olObj = screen.children[1];</span><br><span class="line">  //获取焦点的div</span><br><span class="line">  var arr = my$("arr");</span><br><span class="line"></span><br><span class="line">  //设置全局变量,控制ul移动的位置</span><br><span class="line">  var pic = 0;</span><br><span class="line"></span><br><span class="line">  //创建小按钮，根据ul中li的个数</span><br><span class="line">  for (var i = 0; i &lt; list.length; i++) &#123;</span><br><span class="line">    //创建li标签，加入到ol中</span><br><span class="line">    var liObj = document.createElement("li");</span><br><span class="line">    olObj.appendChild(liObj);</span><br><span class="line">    //为li设置值</span><br><span class="line">    liObj.innerHTML = (i+1);</span><br><span class="line"></span><br><span class="line">    //在每个ol标签中的li标签中添加一个自定义属性</span><br><span class="line">    liObj.setAttribute("index",i);</span><br><span class="line"></span><br><span class="line">    //注册鼠标进入事件</span><br><span class="line">    liObj.onmouseover = function () &#123;</span><br><span class="line">      //先清除所有ol中的li的背景颜色</span><br><span class="line">      for (var j = 0; j &lt; olObj.children.length; j++) &#123;</span><br><span class="line">        olObj.children[j].removeAttribute("class");</span><br><span class="line">      &#125;</span><br><span class="line">      //设置当前鼠标进入li的背景颜色</span><br><span class="line">      this.className = "current";</span><br><span class="line">      //获取鼠标进入的li的当前的索引值</span><br><span class="line">      pic = this.getAttribute("index");</span><br><span class="line">      //移动ul</span><br><span class="line">      animate(ulObj,-pic*imgWidth);</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">    // 设置ol中第一个li有背景颜色</span><br><span class="line">    olObj.children[0].className="current";</span><br><span class="line"></span><br><span class="line">    //克隆ul中的第一个li加入到ul最后</span><br><span class="line">    ulObj.appendChild(ulObj.children[0].cloneNode(true));</span><br><span class="line"></span><br><span class="line">    //自动播放</span><br><span class="line">    var timeId = setInterval(clickHandle,1000);</span><br><span class="line"></span><br><span class="line">    //鼠标进入到box的div显示左右焦点</span><br><span class="line">    box.onmouseover = function () &#123;</span><br><span class="line">      arr.style.display = "block";</span><br><span class="line">      //鼠标进入，清除之前的定时器</span><br><span class="line">      clearInterval(timeId);</span><br><span class="line">    &#125;;</span><br><span class="line">    box.onmouseout = function () &#123;</span><br><span class="line">      arr.style.display = "none";</span><br><span class="line">      //鼠标离开自动播放</span><br><span class="line">      timeId = setInterval(clickHandle,1000);</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    //右边按钮</span><br><span class="line">    my$("right").onclick = clickHandle;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    function clickHandle() &#123;</span><br><span class="line">      //如果pic的值是5，恰巧是ul中li个数-1的值，此时页面中显示第六张图片，而用户会认为这是第一个图，所以如果用户再次点击按钮，用户就会看到第二个图片</span><br><span class="line">      if(pic == list.length - 1)&#123;</span><br><span class="line">        //先设置pic=0</span><br><span class="line">        pic = 0;</span><br><span class="line">        //把ul的位置还原成开始的默认位置</span><br><span class="line">        ulObj.style.left = 0+"px";</span><br><span class="line">      &#125;</span><br><span class="line">      //立即设置pic加1，那么此时用户就会看到第二个图片了</span><br><span class="line">      pic++;</span><br><span class="line">      //pic从0的值加1之后，pic的值是1，然后 ul移动出去一个图片</span><br><span class="line">      animate(ulObj, -pic*imgWidth);</span><br><span class="line">      //如果pic==5说明，此时显示第六章图片（内容是第一张图片，第一个小按钮有颜色）</span><br><span class="line">      if(pic == list.length-1)&#123;</span><br><span class="line">        //第五个颜色清除</span><br><span class="line">        olObj.children[olObj.children.length-1].className="";</span><br><span class="line">        //设置第一个按钮的颜色</span><br><span class="line">        olObj.children[0].className="current";</span><br><span class="line">      &#125;else &#123;</span><br><span class="line">        //清除所有的小按钮的背景颜色</span><br><span class="line">        for (var j = 0; j &lt; olObj.children.length; j++) &#123;</span><br><span class="line">          olObj.children[j].removeAttribute("class");</span><br><span class="line">        &#125;</span><br><span class="line">        olObj.children[pic].className = "current";</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    //左边按钮</span><br><span class="line">    my$("left").onclick = function () &#123;</span><br><span class="line">      if (pic == 0)&#123;</span><br><span class="line">        pic = 5;</span><br><span class="line">        ulObj.style.left = -pic * imgWidth + "px";</span><br><span class="line">      &#125;</span><br><span class="line">      pic--;</span><br><span class="line">      animate(ulObj,-pic*imgWidth);</span><br><span class="line">      //设置小按钮的颜色---所有的小按钮的颜色全部删除</span><br><span class="line">      for (var j = 0; j &lt; olObj.children.length; j++) &#123;</span><br><span class="line">        olObj.children[j].removeAttribute("class");</span><br><span class="line">      &#125;</span><br><span class="line">      //当前的pic索引值对应的按钮设置颜色</span><br><span class="line">      olObj.children[pic].className = "current";</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">  //设置任意的一个元素,移动到指定的目标位置</span><br><span class="line">  function animate(element, target) &#123;</span><br><span class="line">    clearInterval(element.timeId);</span><br><span class="line">    //定时器的id值存储到对象的一个属性中</span><br><span class="line">    element.timeId = setInterval(function () &#123;</span><br><span class="line">      //获取元素的当前的位置,数字类型</span><br><span class="line">      var current = element.offsetLeft;</span><br><span class="line">      //每次移动的距离</span><br><span class="line">      var step = 10;</span><br><span class="line">      step = current &lt; target ? step : -step;</span><br><span class="line">      //当前移动到位置</span><br><span class="line">      current += step;</span><br><span class="line">      if (Math.abs(current - target) &gt; Math.abs(step)) &#123;</span><br><span class="line">        element.style.left = current + "px";</span><br><span class="line">      &#125; else &#123;</span><br><span class="line">        //清理定时器</span><br><span class="line">        clearInterval(element.timeId);</span><br><span class="line">        //直接到达目标</span><br><span class="line">        element.style.left = target + "px";</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;, 10);</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>js学习案例</category>
      </categories>
  </entry>
  <entry>
    <title>宇宙</title>
    <url>/2019/11/15/%E5%AE%87%E5%AE%99/</url>
    <content><![CDATA[<p>最近在看一个名叫《穿越时空-宇宙探秘》纪录片，主要是讲述了关于宇宙和生命的起源与发展，有一些感触，稍稍做一些记录吧。</p>
<a id="more"></a>

<p><strong>人类渺小，宇宙无穷</strong></p>
<p>人类渺小，宇宙无穷这样的话在生活中并不经常听说，但是每一次看到有关宇宙的书籍或记录片甚至在抬头仰望星空的时候，我们都会感受到自己的渺小。就现在的科学研究来看，宇宙起源于130多亿年前的宇宙大爆炸，而地球则产生于40多亿年前，那么人类呢，产生于几百万年前，我们能说出具体的时间，但是我们可能并不是很能明白其中的关系。</p>
<p>在纪录片中，他们把从宇宙大爆炸到现在做成了一个年历，1月1日0时宇宙产生，12月31日24时是现在的时刻。在这个年历中，地球产生于8月下旬，而所有的人类文明产生于最后一个小时的最后一分钟，这不得不让人感到震撼–相较于广袤的宇宙，人类真是太渺小了。</p>
<p>苏子在《赤壁赋》中写道：寄蜉蝣于天地，渺沧海之一粟；哀吾生之须臾，羡长江之无穷。其实，我们也像是天地间的蜉蝣、沧海中的一粒小粟，我们的生命在长江面前都显得那么短暂更何况广阔无垠的宇宙呢？但同时人类又是伟大的，在短短几百万年间，人类进化成为这个星球上最智能的生物，创造出了璀璨的文明，甚至开始走向宇宙深处，探寻宇宙的奥秘。</p>
<p>伟大思想能够带领人们去穿越宇宙，苏子说：盖将自其变者而观之，则天地曾不能以一瞬；自其不变者而观之，则物与我皆无尽也，而又何羡乎？从人短短的百年生命中来看，固然只是宇宙变化间的一瞬间，然而，从某种程度上来说，只要存在便是永恒，不必担忧生命的短暂，而应当享受生命的美好，在走过地方的留下自己的足迹就好了。</p>
<p><strong>生命中总有那么一天我们发现自己不是宇宙的中心</strong></p>
<p>生命中总有那么一天我们发现自己不是宇宙的中心，甚至处于从属地位。在中世纪罗马天主教皇禁锢着人们的思想，他们认为地球是宇宙的中心，其他的一切天体包括太阳、月亮都围绕着地球转，他们不容许听到与他们不同的观点。直到哥白尼提出了日心说，他认为并不是太阳绕着地球转而是地球绕着太阳转，这种观点违背了天主教会的观念，但是却得到了一个叫布鲁诺的人的认可。布鲁诺是一个极具反叛精神的人，他一生都在为反抗教会的压迫作斗争，他宣扬日心说，反对教会的主张，一生虽然颠沛流离、遭受迫害，但从未改变他对真理的向往。尽管哥白尼和布鲁诺的日心说在现在来看是错误的，但是他们追求自由主义、追求真理的精神间接促进了人类的思想解放和文明的进步。</p>
<p>能够认识到自己不是周围世界的中心是难能可贵的，每个人的成长也都要经历这个阶段。小的时候觉得我们就是这个世界的中心，其他一切都要从属于我们，然而随着年龄的增长，我们渐渐发现这只是美好的幻想，地球不是因为我才转的，我们也不能按照自己的意愿改变别人的想法。抛弃自我中心的观念是一个人由幼稚走向成熟标志，不要当个巨婴。</p>
<p><strong>一个偶然的事件可能带来巨大的改变</strong></p>
<p>一只蝴蝶在南美的热带雨林中煽动翅膀，数周后可能会在美国的德克萨斯州引起一场龙卷风，这就是我们经常说的蝴蝶效应。一块小陨石被另一块陨石碰撞之后偏离了他原来的轨道，在随后的的演进过程中，这块被撞的小陨石逐渐演进形成了地球最初的样子。北极熊体内一个细胞细微变化可能最终导致其后代皮毛颜色的改变，甚至由此产生一个新的熊的种类，或许又给生物圈带来其他的影响。</p>
<p>生活中我们也许会遇到各种各样的事情，而正是因为这些小事情导致我们整个人生走向的改变，或好或坏。前段时间江苏一段高速公路坍塌导致三死两伤，这确实是一个极其偶然的事件，但是却改变了他们的人生。当然对于这种非人力所能为之的事件我觉得无需杞人忧天。不能把控的事就顺其自然。</p>
<hr>
<p>第一次写这种文章，思路不够清楚，写完之后发现内容很空洞，但是第一步迈出去了，继续练习就好吧，加油~</p>
]]></content>
      <categories>
        <category>杂感</category>
      </categories>
  </entry>
  <entry>
    <title>hexo主题优化</title>
    <url>/2019/11/13/hexo%E4%B8%BB%E9%A2%98%E4%BC%98%E5%8C%96/</url>
    <content><![CDATA[<p>本次增加博客评论功能和页面访问量统计功能</p>
<a id="more"></a>

<h3 id="评论功能的实现"><a href="#评论功能的实现" class="headerlink" title="评论功能的实现"></a>评论功能的实现</h3><p>在刚刚搭建好博客之后就准备增加评论功能，也找了一些资料，其中有基于Leancloud系统的Valine评论系统和基于github开发的Gitment评论系统。对于前者，看到很多评论说很不错的，但是我注册的时候发现需要提交身份证号，想一想还是算了吧（即使我的身份信息很不值钱）。。后者呢，我一开始用的那个博客主题集成了这个功能，但是我在配置的时候没有配置好，印象不太好，而且好像只能关联github账号，也就放弃了。</p>
<p>后来偶然发现了一个叫做来必力的评论系统，感觉还不错，然后就装了，真的还不错。</p>
<p><strong>安装过程如下</strong></p>
<ol>
<li><p>打开<a href="https://www.livere.com/" target="_blank" rel="noopener">来必力</a>官网，注册账号（只需要邮箱验证，不需要身份证。。）</p>
</li>
<li><p>点击安装</p>
<p><img src="/2019/11/13/hexo%E4%B8%BB%E9%A2%98%E4%BC%98%E5%8C%96/TIM%E6%88%AA%E5%9B%BE20191113225944.png" alt="安装来必力"></p>
</li>
<li><p>选择city免费版</p>
<p><img src="/2019/11/13/hexo%E4%B8%BB%E9%A2%98%E4%BC%98%E5%8C%96/TIM%E6%88%AA%E5%9B%BE20191113230124.png" alt="安装city免费版"></p>
</li>
<li><p>复制data-uid里面的代码（双引号里面的代码），将其粘贴到主题配置文件的<code>livere_uid</code> 下面：</p>
<p><img src="/2019/11/13/hexo%E4%B8%BB%E9%A2%98%E4%BC%98%E5%8C%96/InkedTIM%E6%88%AA%E5%9B%BE20191113230519_LI.jpg" alt="配置代码"></p>
</li>
<li><p>然后测试，部署就可以了。就这么简单。。。</p>
<p><img src="/2019/11/13/hexo%E4%B8%BB%E9%A2%98%E4%BC%98%E5%8C%96/hexo%E4%B8%BB%E9%A2%98%E4%BC%98%E5%8C%96%5CTIM%E6%88%AA%E5%9B%BE20191113231231.png" alt="结果"></p>
</li>
<li><p>这个来必力评论系统的后台管理也非常方便，能够进行评论管理，评论提醒等。</p>
</li>
</ol>
<h3 id="页面访问量的统计"><a href="#页面访问量的统计" class="headerlink" title="页面访问量的统计"></a>页面访问量的统计</h3><p>这个我用的是不蒜子进行访客统计量的设置，我用的是next主题，应该是自带有不蒜子功能，所以直接在主题配置文件下找到busuanzi_count 将其下面的enable的值改成true就可以了，就能在页面底部实现访客统计以及在文章页面实现阅读量的统计。。</p>
<p><img src="/2019/11/13/hexo%E4%B8%BB%E9%A2%98%E4%BC%98%E5%8C%96/TIM%E6%88%AA%E5%9B%BE20191113231911.png" alt="修改配置"></p>
<p>参考链接：</p>
<p><a href="http://wangwlj.com/2017/12/18/blog_comment/" target="_blank" rel="noopener">http://wangwlj.com/2017/12/18/blog_comment/</a></p>
<p><a href="https://www.jianshu.com/p/c311d31265e0" target="_blank" rel="noopener">https://www.jianshu.com/p/c311d31265e0</a></p>
]]></content>
      <categories>
        <category>hexo博客搭建</category>
      </categories>
  </entry>
  <entry>
    <title>关于IE浏览器测试html代码的一些问题</title>
    <url>/2019/11/12/IE%E6%B5%8F%E8%A7%88%E5%99%A8%E6%B5%8B%E8%AF%95html%E4%BB%A3%E7%A0%81/</url>
    <content><![CDATA[<p>测试节点的兼容代码，在谷歌和火狐上面都能正常显示，然而使用IE浏览器测试的时候，IE提示说无法访问此页面，确保web地址的正确：</p>
<a id="more"></a>

<p><img src="/2019/11/12/IE%E6%B5%8F%E8%A7%88%E5%99%A8%E6%B5%8B%E8%AF%95html%E4%BB%A3%E7%A0%81/TIM%E5%9B%BE%E7%89%8720191112152038.png" alt="无法访问"></p>
<p>上网查了一下，才知道可能是因为挂了代理导致本地的服务器无法启动，需要在IE浏览器中找到设置选项—-Internet选项—-局域网设置–在对于本地地址不使用代理服务器前面勾选，点击确定即可。</p>
<p><img src="/2019/11/12/IE%E6%B5%8F%E8%A7%88%E5%99%A8%E6%B5%8B%E8%AF%95html%E4%BB%A3%E7%A0%81/TIM%E6%88%AA%E5%9B%BE20191112153259.png" alt="代理服务器设置"></p>
<p>但是，设置完成之后好像还是不行，提示未找到文件。</p>
<p><img src="/2019/11/12/IE%E6%B5%8F%E8%A7%88%E5%99%A8%E6%B5%8B%E8%AF%95html%E4%BB%A3%E7%A0%81/TIM%E6%88%AA%E5%9B%BE20191112153913.png" alt="未找到文件"></p>
<p>这就很挠头了，同样的代码在谷歌和火狐里面运行的好好的，在ie里面就是各种问题，然后找了各种方案。一开始以为是webStrom的原因，网上也有通过配置webstrom内置服务器和端口的方式解决问题，但是搁我这就不行。</p>
<p>后来发现，将文件名设置成英文可以正常在IE中打开。。。但中文就是乱码，提示找不到文件。</p>
<p>最后我把在谷歌上面能正常访问的地址复制到IE上面，能够正常显示。这就应该是IE浏览器的问题了，真是很想吐槽IE。。</p>
<p><strong>IE浏览器测试的解决办法：</strong></p>
<ul>
<li>手动输入要打开的文件地址</li>
<li>把文件名换成英文，不要用中文</li>
<li>找到源文件选择打开方式—IE浏览器</li>
<li>将谷歌或火狐的地址复制到IE上面</li>
</ul>
<p>在测试IE的时候总是会有“是否阻止脚本运行的弹窗”，在head标签中插入下面的代码即可：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!-- saved from url=(0014)about:internet --&gt;</span><br></pre></td></tr></table></figure>

<p>下面是一篇关于URL编码的文章，虽然没看太明白先放这里吧：</p>
<p><a href="http://www.ruanyifeng.com/blog/2010/02/url_encoding.htmlhttp://www.ruanyifeng.com/blog/2010/02/url_encoding.html" target="_blank" rel="noopener">http://www.ruanyifeng.com/blog/2010/02/url_encoding.htmlhttp://www.ruanyifeng.com/blog/2010/02/url_encoding.html</a></p>
]]></content>
      <categories>
        <category>JavaScript学习</category>
      </categories>
      <tags>
        <tag>IE测试的问题</tag>
      </tags>
  </entry>
  <entry>
    <title>DOM学习笔记</title>
    <url>/2019/11/11/DOM%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h2 id="DOM学习笔记"><a href="#DOM学习笔记" class="headerlink" title="DOM学习笔记"></a>DOM学习笔记</h2><h3 id="API的概念"><a href="#API的概念" class="headerlink" title="API的概念"></a>API的概念</h3><p>API（Application Programming Interface，应用程序编程接口）是一些预先定义好的函数，目的是提供应用程序与开发人员基于某软件或硬件得以访问一组例程的能力，而又无需访问源码，或理解内部工作机制的细节。</p>
<a id="more"></a>

<p>例程：例程的作用类似于函数，但含义更为丰富一些。例程是某个系统对外提供的功能接口或服务的集合。比如操作系统的API、服务等就是例程；Delphi或C++Builder提供的标准函数和库函数等也是例程。我们编写一个DLL的时候，里面的输出函数就是这个DLL的例程。</p>
<ul>
<li>任何开发语言都有自己的API</li>
<li>API的特征：输入和输出</li>
</ul>
<h3 id="Web-API的概念"><a href="#Web-API的概念" class="headerlink" title="Web API的概念"></a>Web API的概念</h3><p>浏览器提供的一套操作浏览器功能和页面元素的API(BOM和DOM)：此处的Web API特指浏览器提供的API(一组方法)</p>
<p>掌握常见的浏览器提供的API的调用方式：    <a href="https://developer.mozilla.org/zh-CN/docs/Web/API" target="_blank" rel="noopener">MDN-Web API</a></p>
<h3 id="JavaScript的组成"><a href="#JavaScript的组成" class="headerlink" title="JavaScript的组成"></a>JavaScript的组成</h3><p><img src="/2019/11/11/DOM%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/js%E7%BB%84%E6%88%90.png" alt="js组成"></p>
<h4 id="ECMAScript-JavaScript的核心"><a href="#ECMAScript-JavaScript的核心" class="headerlink" title="ECMAScript - JavaScript的核心"></a>ECMAScript - JavaScript的核心</h4><p>定义了javascript的语法规范</p>
<p>JavaScript的核心，描述了语言的基本语法和数据类型，ECMAScript是一套标准，定义了一种语言的标准与具体实现无关</p>
<h4 id="BOM-浏览器对象模型"><a href="#BOM-浏览器对象模型" class="headerlink" title="BOM - 浏览器对象模型"></a>BOM - 浏览器对象模型</h4><p>一套操作浏览器功能的API</p>
<p>通过BOM可以操作浏览器窗口，比如：弹出框、控制浏览器跳转、获取分辨率等</p>
<h4 id="DOM-文档对象模型"><a href="#DOM-文档对象模型" class="headerlink" title="DOM - 文档对象模型"></a>DOM - 文档对象模型</h4><p>一套操作页面元素的API</p>
<p>DOM可以把HTML看做是文档树，通过DOM提供的API可以对树上的节点进行操作</p>
<h3 id="DOM"><a href="#DOM" class="headerlink" title="DOM"></a>DOM</h3><h4 id="DOM的概念："><a href="#DOM的概念：" class="headerlink" title="DOM的概念："></a>DOM的概念：</h4><p>文档对象模型（Document Object Model,简称DOM），是W3C组织推荐 的处理可扩充标志语言的标准编程接口。在网页上，组织页面或文档的对象被组织在一个树形结构中，用来表示文档中对象的标准模型就称为DOM。</p>
<p>DOM又称文档树结构</p>
<p><img src="/2019/11/11/DOM%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/DOM%E6%A0%91%E7%BB%93%E6%9E%84.png" alt="DOM树结构"></p>
<ul>
<li>文档：一个网页可以看做是一个文档</li>
<li>节点：文档中所有的内容都是节点（标签、属性、文本）</li>
<li>元素：网页中的标签</li>
<li>属性：标签的属性</li>
</ul>
<h3 id="DOM经常进行的操作"><a href="#DOM经常进行的操作" class="headerlink" title="DOM经常进行的操作"></a>DOM经常进行的操作</h3><ol>
<li>获取页面元素</li>
<li>动态创建元素</li>
<li>对元素进行操作（设置其属性或调用其方法）</li>
<li>事件（什么时机做什么操作）</li>
</ol>
<h3 id="获取页面元素"><a href="#获取页面元素" class="headerlink" title="获取页面元素"></a>获取页面元素</h3><p>为什么：我们想要操作页面上的某部分，需要先获取到该部分对应的元素，然后才能进行后续操作。</p>
<h4 id="根据id获取元素"><a href="#根据id获取元素" class="headerlink" title="根据id获取元素"></a>根据id获取元素</h4><p>var idObj = document.getElementById(“元素的id名”)；</p>
<p>返回id值对应的元素（单个）</p>
<h4 id="根据标签名获取元素"><a href="#根据标签名获取元素" class="headerlink" title="根据标签名获取元素"></a>根据标签名获取元素</h4><p>var spans = document.getElementsByTagName(“span”);</p>
<p>返回一个包含所有span标签的伪数组</p>
<h4 id="根据name属性值获取"><a href="#根据name属性值获取" class="headerlink" title="根据name属性值获取"></a>根据name属性值获取</h4><p>var inputs= document.getElementsByName(‘hobby’);</p>
<p>返回一个name属性值为hobby的伪数组</p>
<h4 id="根据类名获取元素"><a href="#根据类名获取元素" class="headerlink" title="根据类名获取元素"></a>根据类名获取元素</h4><p>var mains = document.getElementsByClassName(“main”);</p>
<p>返回一个类名为main的伪数组</p>
<h4 id="根据选择器获取元素"><a href="#根据选择器获取元素" class="headerlink" title="根据选择器获取元素"></a>根据选择器获取元素</h4><p>var text = document.querySelector(‘#text’);    这是根据id选择器获取元素</p>
<p>返回单个元素</p>
<p>var boxes = document.querySelectorAll(‘.box’);   这是根据类选择器获取元素</p>
<p>返回一个伪数组</p>
<h3 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h3><p>事件：触发-响应机制</p>
<h4 id="事件三要素："><a href="#事件三要素：" class="headerlink" title="事件三要素："></a>事件三要素：</h4><ol>
<li>事件源：触发事件的元素</li>
<li>事件类型：事件触发的方式（如鼠标点击）</li>
<li>事件处理程序：事件触发后要执行的代码（函数）</li>
</ol>
<h4 id="事件的基本使用"><a href="#事件的基本使用" class="headerlink" title="事件的基本使用"></a>事件的基本使用</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> box = <span class="built_in">document</span>.getElementById(<span class="string">'box'</span>);</span><br><span class="line">box.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'代码会在box被点击后执行'</span>);  </span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h4 id="案例："><a href="#案例：" class="headerlink" title="案例："></a>案例：</h4><p>点击按钮弹出对话框</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//先有按钮，才能获取，获取之后才能注册点击事件</span></span><br><span class="line">&lt;input type=<span class="string">"button"</span> value=<span class="string">"按钮"</span> id=<span class="string">"btn"</span>&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="comment">//根据id属性的值从文档中获取这个元素</span></span><br><span class="line">    <span class="keyword">var</span> btnObj = <span class="built_in">document</span>.getElementById(<span class="string">"btn"</span>);</span><br><span class="line">    <span class="comment">//为当前这个按钮元素（对象），注册点击事件，添加事件处理函数（匿名函数）</span></span><br><span class="line">    btnObj.onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="comment">//这是响应的事情</span></span><br><span class="line">        alert(<span class="string">"哎呀，我好帅啊"</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="属性操作"><a href="#属性操作" class="headerlink" title="属性操作"></a>属性操作</h3><h4 id="基本标签属性操作"><a href="#基本标签属性操作" class="headerlink" title="基本标签属性操作"></a>基本标签属性操作</h4><p>href、title、id、src、className、width、height</p>
<p>案例：点击图片修改图片的宽和高</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;img src=<span class="string">"images/1.jpg"</span> alt=<span class="string">""</span> id=<span class="string">"im"</span>/&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="comment">//点击图片,修改自身的宽和高</span></span><br><span class="line">  <span class="keyword">var</span> imgObj = <span class="built_in">document</span>.getElementById(<span class="string">"im"</span>);</span><br><span class="line">  imgObj.onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.width = <span class="string">"200"</span>;</span><br><span class="line">    <span class="keyword">this</span>.height = <span class="string">"300"</span>;</span><br><span class="line">  &#125;;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="表单元素属性"><a href="#表单元素属性" class="headerlink" title="表单元素属性"></a>表单元素属性</h3><ul>
<li>value 用于大部分表单元素的内容获取(option除外)</li>
<li>type 可以获取input标签的类型(输入框或复选框等)</li>
<li>disabled 禁用属性</li>
<li>checked 复选框选中属性</li>
<li>selected 下拉菜单选中属性</li>
</ul>
<p>案例：检测密码是否是6-10位，如果不满足要求高亮显示文本框</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;input type=<span class="string">"text"</span> value=<span class="string">""</span> id=<span class="string">"txt"</span>/&gt;</span><br><span class="line">    </span><br><span class="line">&lt;script&gt;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">my$</span>(<span class="params">id</span>)</span>&#123;</span><br><span class="line">    	<span class="keyword">return</span> <span class="built_in">document</span>.getElementById(id);</span><br><span class="line">	&#125;</span><br><span class="line">  <span class="comment">//获取文本框</span></span><br><span class="line">  my$(<span class="string">"txt"</span>).onblur=<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">//判断密码的长度</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">this</span>.value.length&gt;=<span class="number">6</span>&amp;&amp;<span class="keyword">this</span>.value.length&lt;=<span class="number">10</span>)&#123;</span><br><span class="line">      <span class="keyword">this</span>.style.backgroundColor=<span class="string">"red"</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.style.backgroundColor=<span class="string">"green"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="自定义属性操作"><a href="#自定义属性操作" class="headerlink" title="自定义属性操作"></a>自定义属性操作</h4><ul>
<li>getAttribute() 获取标签行内属性</li>
<li>setAttribute() 设置标签行内属性</li>
<li>removeAttribute() 移除标签行内属性</li>
<li>与element.属性的区别: 上述三个方法用于获取任意的行内属性</li>
</ul>
<p>//list[i].score=(i+1)*10;//此方式,自定义属性在DOM对象上,不在标签中</p>
<p>案例：自定义属性的设置和获取</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">&lt;ul id=<span class="string">"uu"</span>&gt;</span><br><span class="line">  &lt;li&gt;小明&lt;<span class="regexp">/li&gt;</span></span><br><span class="line"><span class="regexp">  &lt;li&gt;小王&lt;/</span>li&gt;</span><br><span class="line">  &lt;li&gt;小苏&lt;<span class="regexp">/li&gt;</span></span><br><span class="line"><span class="regexp">  &lt;li&gt;小杰&lt;/</span>li&gt;</span><br><span class="line">  &lt;li&gt;小乔&lt;<span class="regexp">/li&gt;</span></span><br><span class="line"><span class="regexp">&lt;/u</span>l&gt;</span><br><span class="line">&lt;script src=<span class="string">"common.js"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">&lt;script&gt;</span><br><span class="line">   <span class="comment">//获取所有的li标签,然后为每个标签中动态的添加自定义属性和值</span></span><br><span class="line">  <span class="comment">//点击的时候获取该标签的自定义属性的值</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">//根据id获取ul标签,并且或者该标签中所有的li</span></span><br><span class="line">  <span class="keyword">var</span> list=my$(<span class="string">"uu"</span>).getElementsByTagName(<span class="string">"li"</span>);</span><br><span class="line">  <span class="comment">//循环遍历</span></span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;list.length;i++)&#123;</span><br><span class="line">    <span class="comment">//先为每个li添加自定义属性</span></span><br><span class="line">    list[i].setAttribute(<span class="string">"score"</span>,(i+<span class="number">1</span>)*<span class="number">10</span>);</span><br><span class="line">    <span class="comment">//点击每个li标签,显示对应的自定义属性值</span></span><br><span class="line">    list[i].onclick=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      alert(<span class="keyword">this</span>.getAttribute(<span class="string">"score"</span>));</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>body&gt;</span><br></pre></td></tr></table></figure>

<h4 id="样式操作"><a href="#样式操作" class="headerlink" title="样式操作"></a>样式操作</h4><p>使用style方式设置的样式显示在标签行内</p>
<p>注意：通过样式属性设置宽高、位置的属性类型是字符串，需要加上px</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> box = <span class="built_in">document</span>.getElementById(<span class="string">'box'</span>);</span><br><span class="line">box.style.width = <span class="string">'100px'</span>;</span><br><span class="line">box.style.height = <span class="string">'100px'</span>;</span><br><span class="line">box.style.backgroundColor = <span class="string">'red'</span>;</span><br></pre></td></tr></table></figure>

<h4 id="类名操作"><a href="#类名操作" class="headerlink" title="类名操作"></a>类名操作</h4><p>修改标签的className属性相当于直接修改标签的类名</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> box = <span class="built_in">document</span>.getElementById(<span class="string">'box'</span>);</span><br><span class="line">box.className = <span class="string">'clearfix'</span>;</span><br></pre></td></tr></table></figure>

<h3 id="innerText和textCount"><a href="#innerText和textCount" class="headerlink" title="innerText和textCount"></a>innerText和textCount</h3><ul>
<li>设置标签中文本内容，使用textCount属性，谷歌、火狐支持，IE8不支持</li>
<li>设置标签中文本内容，使用innerText属性，谷歌、火狐、IE8都支持</li>
</ul>
<p>如果这个属性在浏览器中不支持，那么这个属性的类型就是undefined</p>
<p>判断这个属性的类型是不是undefined，就知道浏览器是否支持</p>
<p>兼容代码如下：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">	<span class="comment">//设置任意的标签中间的任意文本内容</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">setInnerText</span>(<span class="params">element,text</span>) </span>&#123;</span><br><span class="line">    <span class="comment">//判断浏览器是否支持这个属性</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">typeof</span> element.textContent ==<span class="string">"undefined"</span>)&#123;<span class="comment">//不支持</span></span><br><span class="line">      element.innerText=text;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;<span class="comment">//支持这个属性</span></span><br><span class="line">      element.textContent=text;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取任意标签中间的文本内容</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">getInnerText</span>(<span class="params">element</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">typeof</span> element.textContent==<span class="string">"undefined"</span>)&#123;</span><br><span class="line">     <span class="keyword">return</span> element.innerText;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">      <span class="keyword">return</span> element.textContent;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//测试</span></span><br><span class="line"></span><br><span class="line">  my$(<span class="string">"btn"</span>).onclick=<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">//console.log(getInnerText(my$("dv")));</span></span><br><span class="line">    setInnerText(my$(<span class="string">"dv"</span>),<span class="string">"哈哈,我又变帅了"</span>);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="innerText和innerHTML"><a href="#innerText和innerHTML" class="headerlink" title="innerText和innerHTML"></a>innerText和innerHTML</h3><p>设置：</p>
<ul>
<li>如果使用innerText主要是设置文本的,设置标签内容,是没有标签的效果的</li>
<li>innerHTML可以设置文本内容，主要是用来在标签中设置新的html标签，是有标签效果的</li>
</ul>
<p>获取：</p>
<ul>
<li>innerText可以获取标签中间的文本内容，但是标签中如果还有标签，那么最里面的标签的文本内容也能获取—–获取不到标签</li>
<li>innerHTML可以真正获取标签中的所有内容</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">&lt;input type=<span class="string">"button"</span> value=<span class="string">"显示效果"</span> id=<span class="string">"btn"</span>/&gt;</span><br><span class="line">&lt;input type=<span class="string">"button"</span> value=<span class="string">"显示效果获取"</span> id=<span class="string">"btn2"</span>/&gt;</span><br><span class="line">&lt;div id=<span class="string">"dv"</span>&gt;</span><br><span class="line">  	这是div</span><br><span class="line">	&lt;p&gt;这是一个p&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>div&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">my$</span>(<span class="params">id</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">document</span>.getElementById(id);</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line">  my$(<span class="string">"btn"</span>).onclick=<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// my$("dv").innerText="哈哈";//设置文本</span></span><br><span class="line">    <span class="comment">//  my$("dv").innerText="&lt;p&gt;这是一个p&lt;/p&gt;";//设置html标签的代码</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// my$("dv").innerHTML="哈哈";</span></span><br><span class="line">    my$(<span class="string">"dv"</span>).innerHTML=<span class="string">"&lt;p&gt;这是一个p&lt;/p&gt;"</span>;<span class="comment">//设置Html标签的</span></span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//获取</span></span><br><span class="line">  my$(<span class="string">"btn2"</span>).onclick=<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">//可以获取标签中的文本内容</span></span><br><span class="line">    <span class="comment">//console.log(my$("dv").innerText);</span></span><br><span class="line">    <span class="built_in">console</span>.log(my$(<span class="string">"dv"</span>).innerHTML);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>body&gt;</span><br></pre></td></tr></table></figure>

<h3 id="节点的相关概念"><a href="#节点的相关概念" class="headerlink" title="节点的相关概念"></a>节点的相关概念</h3><p>文档：document</p>
<p>元素（element）：页面中所有的标签，元素（element）= 标签 = 对象</p>
<p>节点（node）：页面中所有的内容，包括标签，属性，文本（文字、换行、空格）</p>
<p>根元素：html标签</p>
<!-- more -->

<p>节点：能够获取任意一个标签中的元素</p>
<h4 id="节点的属性"><a href="#节点的属性" class="headerlink" title="节点的属性"></a>节点的属性</h4><p>节点的属性:可以用标签—-元素.出来，属性节点.出来，文本节点.点出来</p>
<ol>
<li>nodeType: 节点的类型：1—标签；2—-属性；3—-文本</li>
<li>nodeName：节点的名字：标签节点—大写的标签名字；属性节点—小写的标签名字；文本节点—#text</li>
<li>nodeValue:节点的值：标签节点—null，属性节点—属性值，文本节点—文本内容</li>
</ol>
<h4 id="12行代码–获取元素和节点"><a href="#12行代码–获取元素和节点" class="headerlink" title="12行代码–获取元素和节点"></a>12行代码–获取元素和节点</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> ulObj=<span class="built_in">document</span>.getElementById(<span class="string">"uu"</span>);</span><br><span class="line">  <span class="comment">//父级节点</span></span><br><span class="line">  <span class="built_in">console</span>.log(ulObj.parentNode);</span><br><span class="line">  <span class="comment">//父级元素</span></span><br><span class="line">  <span class="built_in">console</span>.log(ulObj.parentElement);</span><br><span class="line">  <span class="comment">//子节点</span></span><br><span class="line">  <span class="built_in">console</span>.log(ulObj.childNodes);</span><br><span class="line">  <span class="comment">//子元素</span></span><br><span class="line">  <span class="built_in">console</span>.log(ulObj.children);</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"=============================================="</span>);</span><br><span class="line">  <span class="comment">//第一个子节点</span></span><br><span class="line">  <span class="built_in">console</span>.log(ulObj.firstChild);<span class="comment">//IE8中是第一个子元素</span></span><br><span class="line">  <span class="comment">//第一个子元素</span></span><br><span class="line">  <span class="built_in">console</span>.log(ulObj.firstElementChild);<span class="comment">//IE8中不支持</span></span><br><span class="line">  <span class="comment">//最后一个子节点</span></span><br><span class="line">  <span class="built_in">console</span>.log(ulObj.lastChild);<span class="comment">//IE8中是第一个子元素</span></span><br><span class="line">  <span class="comment">//最后一个子元素</span></span><br><span class="line">  <span class="built_in">console</span>.log(ulObj.lastElementChild);<span class="comment">//IE8中不支持</span></span><br><span class="line">  <span class="comment">//某个元素的前一个兄弟节点</span></span><br><span class="line">  <span class="built_in">console</span>.log(my$(<span class="string">"three"</span>).previousSibling);<span class="comment">//IE8中是第一个子元素</span></span><br><span class="line">  <span class="comment">//某个元素的前一个兄弟元素</span></span><br><span class="line">  <span class="built_in">console</span>.log(my$(<span class="string">"three"</span>).previousElementSibling);<span class="comment">//IE8中不支持</span></span><br><span class="line">  <span class="comment">//某个元素的后一个兄弟节点</span></span><br><span class="line">  <span class="built_in">console</span>.log(my$(<span class="string">"three"</span>).nextSibling);<span class="comment">//IE8中是第一个子元素</span></span><br><span class="line">  <span class="comment">//某个元素的后一个兄弟元素</span></span><br><span class="line">  <span class="built_in">console</span>.log(my$(<span class="string">"three"</span>).nextElementSibling);<span class="comment">//IE8中不支持</span></span><br></pre></td></tr></table></figure>

<p><strong>总结：</strong></p>
<ul>
<li>凡是获取节点的代码在谷歌和火狐得到的都是—-相关的节点</li>
<li>凡是获取元素的代码在谷歌和火狐得到的都是—-相关的元素</li>
<li>除了父级节点和子级节点之外，凡是获取节点的代码在IE8中都是获取元素，不支持其他浏览器中获取元素的代码（结果是undefined）。</li>
</ul>
<p><strong>节点的兼容代码</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"> </span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取父级元素中的第一个子元素</span></span><br><span class="line"><span class="comment"> * @param element 父级元素</span></span><br><span class="line"><span class="comment"> * @returns &#123;*&#125; 父级元素中的子级元素</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getFirstElement</span>(<span class="params">element</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (element.firstElementChild) &#123;</span><br><span class="line">        <span class="keyword">return</span> element.firstElementChild;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">var</span> node = element.firstChild;</span><br><span class="line">        <span class="keyword">while</span> (node &amp;&amp; node.nodeType != <span class="number">1</span>) &#123;</span><br><span class="line">            node = node.nextSibling;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> node;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取父级元素中的最后一个子元素</span></span><br><span class="line"><span class="comment"> * @param element 父级元素</span></span><br><span class="line"><span class="comment"> * @returns &#123;*&#125; 最后一个子元素</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getLastElement</span>(<span class="params">element</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (element.lastElementChild) &#123;</span><br><span class="line">        <span class="keyword">return</span> element.lastElementChild;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">var</span> node = element.lastChild;</span><br><span class="line">        <span class="keyword">while</span> (node &amp;&amp; node.nodeType != <span class="number">1</span>) &#123;</span><br><span class="line">            node = node.previousSibling;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> node;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取某个元素的前一个兄弟元素</span></span><br><span class="line"><span class="comment"> * @param element 某个元素</span></span><br><span class="line"><span class="comment"> * @returns &#123;*&#125; 前一个兄弟元素</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getPreviousElement</span>(<span class="params">element</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (element.previousElementSibling) &#123;</span><br><span class="line">        <span class="keyword">return</span> element.previousElementSibling</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">var</span> node = element.previousSibling;</span><br><span class="line">        <span class="keyword">while</span> (node &amp;&amp; node.nodeType != <span class="number">1</span>) &#123;</span><br><span class="line">            node = node.previousSibling;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> node;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取某个元素的后一个兄弟元素</span></span><br><span class="line"><span class="comment"> * @param element 某个元素</span></span><br><span class="line"><span class="comment"> * @returns &#123;*&#125; 后一个兄弟元素</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getNextElement</span>(<span class="params">element</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (element.nextElementSibling) &#123;</span><br><span class="line">        <span class="keyword">return</span> element.nextElementSibling</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">var</span> node = element.nextSibling;</span><br><span class="line">        <span class="keyword">while</span> (node &amp;&amp; node.nodeType != <span class="number">1</span>) &#123;</span><br><span class="line">            node = node.nextSibling;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> node;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取某个元素的所有兄弟元素</span></span><br><span class="line"><span class="comment"> * @param element 某个元素</span></span><br><span class="line"><span class="comment"> * @returns &#123;Array&#125; 兄弟元素</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getSiblings</span>(<span class="params">element</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!element)<span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">var</span> elements = [];</span><br><span class="line">    <span class="keyword">var</span> ele = element.previousSibling;</span><br><span class="line">    <span class="keyword">while</span> (ele) &#123;</span><br><span class="line">        <span class="keyword">if</span> (ele.nodeType === <span class="number">1</span>) &#123;</span><br><span class="line">            elements.push(ele);</span><br><span class="line">        &#125;</span><br><span class="line">        ele = ele.previousSibling;</span><br><span class="line">    &#125;</span><br><span class="line">    ele = element.nextSibling;</span><br><span class="line">    <span class="keyword">while</span> (ele) &#123;</span><br><span class="line">        <span class="keyword">if</span> (ele.nodeType === <span class="number">1</span>) &#123;</span><br><span class="line">            elements.push(ele);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        ele = ele.nextSibling;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> elements;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="创建元素"><a href="#创建元素" class="headerlink" title="创建元素"></a>创建元素</h3><p>创建元素：是为了提高用户体验</p>
<!-- more -->

<p><strong>元素创建的三种方式</strong></p>
<ol>
<li>document.write(“标签代码及内容”);</li>
<li>对象.innerHTML=”标签及代码”;</li>
<li>document.createElement(“标签及内容”);</li>
</ol>
<h4 id="第一种方式创建元素"><a href="#第一种方式创建元素" class="headerlink" title="第一种方式创建元素"></a>第一种方式创建元素</h4><p>document.write(“”);</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//document.write("标签代码及内容");</span></span><br><span class="line"> <span class="built_in">document</span>.getElementById(<span class="string">"btn"</span>).onclick=<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">   <span class="built_in">document</span>.write(<span class="string">"&lt;p&gt;这是一个p&lt;/p&gt;"</span>);</span><br><span class="line"> &#125;;</span><br></pre></td></tr></table></figure>

<p><strong>缺陷</strong></p>
<p>如果是在页面加载完毕之后使用这种方式创建元素，那么页面上已经存在的元素会被覆盖掉</p>
<h4 id="第二种方式创建元素"><a href="#第二种方式创建元素" class="headerlink" title="第二种方式创建元素"></a>第二种方式创建元素</h4><p>对象.innerHTML = “标签代码及内容”;</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="comment">//点击按钮,在div中创建一个p标签</span></span><br><span class="line">  <span class="comment">//第二种方式创建元素: 对象.innerHTML="标签代码及内容";</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">document</span>.getElementById(<span class="string">"btn"</span>).onclick=<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">document</span>.getElementById(<span class="string">"btn"</span>).innerHTML=<span class="string">"&lt;p&gt;窗前明月光,疑是地上霜,举头望明月,低头思故乡&lt;/p&gt;"</span>;</span><br><span class="line">  &#125;;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="第三种放肆创建元素"><a href="#第三种放肆创建元素" class="headerlink" title="第三种放肆创建元素"></a>第三种放肆创建元素</h4><p>1.创建元素—document.createElment(“标签代码及内容”);</p>
<p>2.把元素追加到父级元素中，父级标签.appendChild(创建的元素);</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//创建元素</span></span><br><span class="line"> <span class="comment">//document.createElement("标签名字");对象</span></span><br><span class="line"> <span class="comment">//把元素追加到父级元素中</span></span><br><span class="line"> <span class="comment">//点击按钮,在div中创建一个p</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">document</span>.getElementById(<span class="string">"btn"</span>).onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">   <span class="comment">//创建元素的</span></span><br><span class="line">   <span class="keyword">var</span> pObj = <span class="built_in">document</span>.createElement(<span class="string">"p"</span>);</span><br><span class="line">   pObj.innerText = <span class="string">"这是一个p"</span>;</span><br><span class="line">   <span class="comment">//把创建后的子元素追加到父级元素中</span></span><br><span class="line">    <span class="built_in">document</span>.getElementById(<span class="string">"dv"</span>).appendChild(pObj);</span><br><span class="line"> &#125;;</span><br></pre></td></tr></table></figure>

<h4 id="只创建一个元素"><a href="#只创建一个元素" class="headerlink" title="只创建一个元素"></a>只创建一个元素</h4><p>有则删除，无则创建</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//先判断有没有,有就删除,然后再创建</span></span><br><span class="line">  my$(<span class="string">"btn"</span>).onclick=<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">//判断,div中有没有这个按钮,有就删除</span></span><br><span class="line">    <span class="comment">//判断这个按钮的子元素是否存在</span></span><br><span class="line">   <span class="keyword">if</span>(my$(<span class="string">"btn2"</span>))&#123;<span class="comment">//如果为true就有</span></span><br><span class="line">     my$(<span class="string">"dv"</span>).removeChild(my$(<span class="string">"btn2"</span>));</span><br><span class="line">   &#125;</span><br><span class="line">    <span class="keyword">var</span> obj=<span class="built_in">document</span>.createElement(<span class="string">"input"</span>);</span><br><span class="line">    obj.type=<span class="string">"button"</span>;</span><br><span class="line">    obj.value=<span class="string">"按钮"</span>;</span><br><span class="line">   	obj.id=<span class="string">"btn2"</span>;</span><br><span class="line">   	my$(<span class="string">"dv"</span>).appendChild(obj);</span><br><span class="line"> &#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  my$(<span class="string">"btn"</span>).onclick=<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">//判断,div中有没有这个按钮,有就删除</span></span><br><span class="line">    <span class="comment">//判断这个按钮的子元素是否存在</span></span><br><span class="line">    <span class="keyword">if</span>(!my$(<span class="string">"btn2"</span>))&#123;</span><br><span class="line">      <span class="keyword">var</span> obj=<span class="built_in">document</span>.createElement(<span class="string">"input"</span>);</span><br><span class="line">      obj.type=<span class="string">"button"</span>;</span><br><span class="line">      obj.value=<span class="string">"按钮"</span>;</span><br><span class="line">      obj.id=<span class="string">"btn2"</span>;</span><br><span class="line">      my$(<span class="string">"dv"</span>).appendChild(obj);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  &#125;;</span><br></pre></td></tr></table></figure>



<h3 id="事件详解"><a href="#事件详解" class="headerlink" title="事件详解"></a>事件详解</h3><p>绑定事件的方法：addEventListener();  attachEvent();</p>
<p>区别：</p>
<ol>
<li>方法名不一样</li>
<li>参数个数不一样：addEventListener()三个参数，attachEvent两个参数</li>
<li>addEventListener–谷歌、火狐、IE11支持，IE8不支持；attachEvent–谷歌火狐 IE11不支持，IE8支持</li>
<li>this不同，addEventListener中的this是当前绑定事件的对象，attachEvent中的this是window</li>
<li>addEventListener中事件的类型（事件的名字），没有on；attachEvent中的事件的类型（事件的名字）有on</li>
</ol>
<h4 id="兼容代码"><a href="#兼容代码" class="headerlink" title="兼容代码"></a>兼容代码</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">  <span class="comment">//为任意元素.绑定任意的事件, 任意的元素,事件的类型,事件处理函数</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">addEventListener</span>(<span class="params">element,type,fn</span>) </span>&#123;</span><br><span class="line">    <span class="comment">//判断浏览器是否支持这个方法</span></span><br><span class="line">    <span class="keyword">if</span>(element.addEventListener)&#123;</span><br><span class="line">      element.addEventListener(type,fn,<span class="literal">false</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(element.attachEvent)&#123;</span><br><span class="line">      element.attachEvent(<span class="string">"on"</span>+type,fn);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">      element[<span class="string">"on"</span>+type]=fn;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//解绑事件的兼容</span></span><br><span class="line">  <span class="comment">//为任意的一个元素,解绑对应的事件</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">removeEventListener</span>(<span class="params">element,type,fnName</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(element.removeEventListener)&#123;</span><br><span class="line">      element.removeEventListener(type,fnName,<span class="literal">false</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(element.detachEvent)&#123;</span><br><span class="line">      element.detachEvent(<span class="string">"on"</span>+type,fnName);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">      element[<span class="string">"on"</span>+type]=<span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<h4 id="事件的三个阶段"><a href="#事件的三个阶段" class="headerlink" title="事件的三个阶段"></a>事件的三个阶段</h4><ol>
<li><p>事件捕获阶段—1</p>
</li>
<li><p>事件目标阶段—2</p>
</li>
<li><p>事件冒泡阶段—3—-默认冒泡阶段，从里向外</p>
<p>事件对象.eventPhase属性可以查看事件触发时所处的阶段</p>
</li>
</ol>
<h3 id="阻止事件冒泡"><a href="#阻止事件冒泡" class="headerlink" title="阻止事件冒泡"></a>阻止事件冒泡</h3><ul>
<li>标准方式 event.stopPropagation();</li>
<li>IE低版本 event.cancelBubble = true; 标准中已废弃</li>
</ul>
<h3 id="事件对象的属性和方法"><a href="#事件对象的属性和方法" class="headerlink" title="事件对象的属性和方法"></a>事件对象的属性和方法</h3><ul>
<li>event.type 获取事件类型</li>
<li>clientX/clientY     所有浏览器都支持，窗口位置</li>
<li>pageX/pageY       IE8以前不支持，页面位置</li>
<li>event.target || event.srcElement 用于获取触发事件的元素</li>
<li>event.preventDefault() 取消默认行为</li>
</ul>
<h3 id="BOM"><a href="#BOM" class="headerlink" title="BOM"></a>BOM</h3><p>BOM(Browser Object Model) 是指浏览器对象模型，浏览器对象模型提供了独立于内容的、可以与浏览器窗口进行互动的对象结构。BOM由多个对象组成，其中代表浏览器窗口的Window对象是BOM的顶层对象，其他对象都是该对象的子对象。</p>
<h4 id="BOM的顶级对象window"><a href="#BOM的顶级对象window" class="headerlink" title="BOM的顶级对象window"></a>BOM的顶级对象window</h4><p>window是浏览器的顶级对象，当调用window下的属性和方法时，可以省略window；document从属于window<br>注意：window下一个特殊的属性 window.name，值为空</p>
<h4 id="页面加载的事件"><a href="#页面加载的事件" class="headerlink" title="页面加载的事件"></a>页面加载的事件</h4><ul>
<li><strong style="color:red">onload—页面加载完成之后执行</strong></li>
<li>onunload—页面关闭后执行</li>
<li>onbeforeload—页面关闭之前执行</li>
</ul>
<h4 id="定时器"><a href="#定时器" class="headerlink" title="定时器"></a>定时器</h4><p><strong>setTimeout()和clearTimeout()</strong></p>
<p>在指定的毫秒数到达之后执行指定的函数，只执行一次</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 创建一个定时器，1000毫秒后执行，返回定时器的标示</span></span><br><span class="line"><span class="keyword">var</span> timerId = setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'Hello World'</span>);</span><br><span class="line">&#125;, <span class="number">1000</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 取消定时器的执行</span></span><br><span class="line">clearTimeout(timerId);</span><br></pre></td></tr></table></figure>

<p><strong>setInterval()和clearInterval()</strong></p>
<p>定时调用的函数，可以按照给定的时间(单位毫秒)周期调用函数</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 创建一个定时器，每隔1秒调用一次</span></span><br><span class="line"><span class="keyword">var</span> timerId = setInterval(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> date = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line">  <span class="built_in">console</span>.log(date.toLocaleTimeString());</span><br><span class="line">&#125;, <span class="number">1000</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 取消定时器的执行</span></span><br><span class="line">clearInterval(timerId);</span><br></pre></td></tr></table></figure>

<h3 id="location对象"><a href="#location对象" class="headerlink" title="location对象"></a>location对象</h3><p>location对象是window对象下的一个属性，可以获取或者设置浏览器地址栏的URL，可以省略window对象</p>
<p><strong>URL（Uniform Resource Locator,统一资源定位符）的组成</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//地址栏上#及后面的内容</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">window</span>.location.hash);</span><br><span class="line"><span class="comment">//主机名及端口号</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">window</span>.location.host);</span><br><span class="line"><span class="comment">//主机名</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">window</span>.location.hostname);</span><br><span class="line"><span class="comment">//文件的路径---相对路径</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">window</span>.location.pathname);</span><br><span class="line"><span class="comment">//端口号</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">window</span>.location.port);</span><br><span class="line"><span class="comment">//协议</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">window</span>.location.protocol);</span><br><span class="line"><span class="comment">//搜索的内容</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">window</span>.location.search);</span><br></pre></td></tr></table></figure>



<p>location的一些属性和方法：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">onload=<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">     <span class="built_in">document</span>.getElementById(<span class="string">"btn"</span>).onclick=<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">       <span class="comment">//设置跳转的页面的地址</span></span><br><span class="line">      <span class="comment">//location.href="http://www.jd.com";//属性</span></span><br><span class="line">      <span class="comment">//location.assign("http://www.jd.com");//方法</span></span><br><span class="line">       <span class="comment">//location.reload();//重新加载--刷新</span></span><br><span class="line">       <span class="comment">//location.replace("http://www.jd.com");//没有历史记录</span></span><br><span class="line">     &#125;;</span><br><span class="line">   &#125;;</span><br></pre></td></tr></table></figure>

<h3 id="history对象"><a href="#history对象" class="headerlink" title="history对象"></a>history对象</h3><ul>
<li>back()</li>
<li>forward()</li>
<li>go()</li>
</ul>
<h3 id="navigator对象"><a href="#navigator对象" class="headerlink" title="navigator对象"></a>navigator对象</h3><ul>
<li>userAgent</li>
</ul>
<p>通过userAgent可以判断用户浏览器的类型</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">console.log(window.navigator.userAgent);</span><br></pre></td></tr></table></figure>

<ul>
<li>platform</li>
</ul>
<p>通过platform可以判断浏览器所在的系统平台类型.</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(windodw.navigator.platform);</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>JavaScript学习</category>
      </categories>
  </entry>
  <entry>
    <title>点击图片放大</title>
    <url>/2019/11/09/%E7%82%B9%E5%87%BB%E5%9B%BE%E7%89%87%E6%94%BE%E5%A4%A7/</url>
    <content><![CDATA[<h4 id="怎么添加文章点击图片放大功能"><a href="#怎么添加文章点击图片放大功能" class="headerlink" title="怎么添加文章点击图片放大功能"></a>怎么添加文章点击图片放大功能</h4><p>更改<code>next/_config.yml</code><br><code>fancybox: true</code></p>]]></content>
      <categories>
        <category>博客搭建</category>
      </categories>
      <tags>
        <tag>点击图片放大</tag>
      </tags>
  </entry>
  <entry>
    <title>更换hexo主题</title>
    <url>/2019/11/08/%E6%9B%B4%E6%8D%A2hexo%E4%B8%BB%E9%A2%98/</url>
    <content><![CDATA[<p>一开始搭建hexo博客的时候是跟着b站上面某个大神一点一点来做的，在选择主题的时候，我没有选择推荐的next主题，而是选择了一个小众的antiquity主题，古风类型的，用了两天觉得还不错，整体的画风都挺棒，我也很喜欢，但是后面增加功能的时候有点麻烦。<a id="more"></a>想实现的功能很难找到现成的解决方法，自己本身又刚刚接触，具体的语法啥的不太懂，想完善博客就很费劲，想来想去又更换了next主题，这个用的多，教程也多，后期想实现什么功能、更换啥样式也应该比较容易。</p>
<p>下面附上更换hexo主题的方法：</p>
<h4 id="下载next主题文件"><a href="#下载next主题文件" class="headerlink" title="下载next主题文件"></a>下载next主题文件</h4><p>首先切换到本地的blog目录，右击鼠标打开git bash here 然后，输入下面的命令：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git clone https://github.com/theme-next/hexo-theme-next themes/next</span><br></pre></td></tr></table></figure>

<h4 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h4><p>上述操作就把next主题下载到了本地，然后修改配置文件：找到根目录下的<code>_config.yml</code>文件，将themes值修改为next。如下所示</p>
<p><img src="/2019/11/08/%E6%9B%B4%E6%8D%A2hexo%E4%B8%BB%E9%A2%98/pasted-0.png" alt="修改主题配置"></p>
<h4 id="本地调试，远程部署"><a href="#本地调试，远程部署" class="headerlink" title="本地调试，远程部署"></a>本地调试，远程部署</h4><p>在git bash中输入下面的命令</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo g </span><br><span class="line">hexo s</span><br></pre></td></tr></table></figure>
<p>hexo g 为重新生成文件,输入hexo s 命令表示在本地测试。打开localhost:4000查看更换后的主题，无误后输入</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo d</span><br></pre></td></tr></table></figure>
<p>部署到github上，完成主题的更换操作。</p>
]]></content>
      <categories>
        <category>hexo博客搭建</category>
      </categories>
      <tags>
        <tag>主题更换</tag>
      </tags>
  </entry>
  <entry>
    <title>js-学习案例：栏目切换</title>
    <url>/2019/11/07/js-%E5%AD%A6%E4%B9%A0%E6%A1%88%E4%BE%8B%EF%BC%9A%E6%A0%8F%E7%9B%AE%E5%88%87%E6%8D%A2/</url>
    <content><![CDATA[<h2 id="tags"><a href="#tags" class="headerlink" title="tags:"></a>tags:</h2><p>开始记录学习的经过，今天做了一个tab栏目切换的小功能，整了很久才做出来，最后还想实现背景切换，但是没能做出来，今天先这样吧</p>
<a id="more"></a>

<p>仿照爱词霸的搜索，用js实现切换<br><img src="/2019/11/07/js-%E5%AD%A6%E4%B9%A0%E6%A1%88%E4%BE%8B%EF%BC%9A%E6%A0%8F%E7%9B%AE%E5%88%87%E6%8D%A2/pasted-0.png" alt="结果"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;搜索框切换功能&lt;/title&gt;</span><br><span class="line">    &lt;style&gt;</span><br><span class="line">        body &#123;</span><br><span class="line">            background-image: url(&quot;banner-1x.png&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        * &#123;</span><br><span class="line">            margin: 0;</span><br><span class="line">            padding: 0;</span><br><span class="line">            box-sizing: border-box;</span><br><span class="line">        &#125;</span><br><span class="line">        .search &#123;</span><br><span class="line">            margin: 100px auto;</span><br><span class="line">            width: 680px;</span><br><span class="line">            position: relative;</span><br><span class="line">        &#125;</span><br><span class="line">        .hd span &#123;</span><br><span class="line">            display: inline-block;</span><br><span class="line">            width: 88px;</span><br><span class="line">            height: 36px;</span><br><span class="line">            background: rgba(0,0,0,.3);</span><br><span class="line">            font-size: 16px;</span><br><span class="line">            font-weight: 700;</span><br><span class="line">            cursor: pointer;</span><br><span class="line">            text-align: center;</span><br><span class="line">            line-height: 40px;</span><br><span class="line">        &#125;</span><br><span class="line">        .hd span.current&#123;</span><br><span class="line">            background-color: #fff;</span><br><span class="line">        &#125;</span><br><span class="line">        input &#123;</span><br><span class="line">            width: 600px;</span><br><span class="line">            height: 56px;</span><br><span class="line">            outline: none;</span><br><span class="line">            padding-left: 20px;</span><br><span class="line">            color: gray;</span><br><span class="line">            border: none;</span><br><span class="line">            display: none;</span><br><span class="line">            font-size: 18px;</span><br><span class="line">        &#125;</span><br><span class="line">        input.current &#123;</span><br><span class="line">            display: block;</span><br><span class="line">        &#125;</span><br><span class="line">        .sea-click &#123;</span><br><span class="line">            width: 80px;</span><br><span class="line">            height: 56px;</span><br><span class="line">            text-align: center;</span><br><span class="line">            line-height: 56px;</span><br><span class="line">            position: absolute;</span><br><span class="line">            right: 0;</span><br><span class="line">            bottom:0;</span><br><span class="line">            background-color: #383838;</span><br><span class="line">            color: #fff;</span><br><span class="line">            cursor: pointer;</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div class=&quot;search&quot; id=&quot;search&quot;&gt;</span><br><span class="line">    &lt;div class=&quot;hd&quot;&gt;</span><br><span class="line">        &lt;span class=&quot;current&quot;&gt;查词&lt;/span&gt;</span><br><span class="line">        &lt;span&gt;翻译&lt;/span&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;div class=&quot;bd&quot;&gt;</span><br><span class="line">        &lt;input type=&quot;text&quot; value=&quot;请输入你要查询的单词&quot; id=&quot;search_btn&quot;  class=&quot;current&quot;/&gt;</span><br><span class="line">        &lt;input type=&quot;text&quot; value=&quot;请输入你要查询的短语或句子&quot; id=&quot;search_btn1&quot;  /&gt;</span><br><span class="line">        &lt;div class=&quot;sea-click&quot;&gt;搜索&lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    //先获取最外层的div</span><br><span class="line">    var search = document.getElementById(&quot;search&quot;);</span><br><span class="line">    //然后获取里面的第一个div</span><br><span class="line">    var hd = search.getElementsByTagName(&quot;div&quot;)[0];</span><br><span class="line">    //获取里面的第二个div</span><br><span class="line">    var bd = search.getElementsByTagName(&quot;div&quot;)[1];</span><br><span class="line">    //获取第一个div中所有的span标签</span><br><span class="line">    var spans = hd.getElementsByTagName(&quot;span&quot;);</span><br><span class="line">    //获取下方搜索框中的input标签</span><br><span class="line">    var inputs = bd.getElementsByTagName(&quot;input&quot;);</span><br><span class="line"></span><br><span class="line">    //循环遍历所有的span标签，并注册点击事件</span><br><span class="line">    for (var i = 0; i &lt; spans.length; i++) &#123;</span><br><span class="line">        //首先将span中的索引值存起来</span><br><span class="line">        spans[i].setAttribute(&quot;index&quot;,i);</span><br><span class="line">        //为每一个span注册点击事件</span><br><span class="line">        spans[i].onclick = function () &#123;</span><br><span class="line">            //清除所有的span的类样式</span><br><span class="line">            for (var j = 0; j &lt; spans.length; j++) &#123;</span><br><span class="line">                spans[j].removeAttribute(&quot;class&quot;);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            //给当前的span对象设置类样式</span><br><span class="line">            this.className=&quot;current&quot;;</span><br><span class="line">            //获取当前span对象的索引值</span><br><span class="line">            var num = this.getAttribute(&quot;index&quot;);</span><br><span class="line">            //清除所有的input的类样式</span><br><span class="line">            for (var k = 0; k &lt; inputs.length; k++) &#123;</span><br><span class="line">                inputs[k].removeAttribute(&quot;class&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">            //当前span对应的input标签设置类样式</span><br><span class="line">            inputs[num].className = &quot;current&quot;;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    for (var i = 0; i &lt; inputs.length; i++) &#123;</span><br><span class="line">        //注册获取焦点的点击事件</span><br><span class="line">        inputs[i].onfocus = function () &#123;</span><br><span class="line">            //判断当前对象的value值</span><br><span class="line">            if (this.value == &quot;请输入你要查询的单词&quot; || &quot;请输入你要查询的短语或句子&quot;)&#123;</span><br><span class="line">                this.value = &quot;&quot;;</span><br><span class="line">                this.style.color=&quot;black&quot;;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        //鼠标离开后的事件</span><br><span class="line">        inputs[i].onblur = function () &#123;</span><br><span class="line">            //判断id值，设置value值</span><br><span class="line">            if (this.id == &quot;search_btn&quot;)&#123;</span><br><span class="line">                this.value = &quot;请输入你要查询的单词&quot;;</span><br><span class="line">                this.style.color=&quot;gray&quot;;</span><br><span class="line"></span><br><span class="line">            &#125;else &#123;</span><br><span class="line">                this.value = &quot;请输入你要查询的短语或句子&quot;;</span><br><span class="line">                this.style.color=&quot;gray&quot;;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>
<p>哎，整了一晚上，一开始就被布局给拦住了，css很多竟然又忘了。。爱词霸中查词和翻译那块是梯形，我也找到了一些做梯形的方法，可是在设置样式的时候总是出现问题，最后也放弃了继续深究，，只用普通的矩形来替代，先这样吧，整了一晚上才怎出个这么个玩意儿。。</p>
<p>但是不管怎么说也算是大概整明白排他功能。刚开始内容比较基础，但是觉得也可能比较重要，就先记录下来吧。</p>
]]></content>
      <categories>
        <category>js学习案例</category>
      </categories>
      <tags>
        <tag>js排他功能应用</tag>
      </tags>
  </entry>
  <entry>
    <title>博客首页文章截断</title>
    <url>/2019/11/06/%E5%AE%A2%E9%A6%96%E9%A1%B5%E6%96%87%E7%AB%A0%E6%88%AA%E6%96%AD/</url>
    <content><![CDATA[<p>在文章中加入 <code>&lt;!-- more --&gt;</code> 就会自动截断文章内容，后面的文章内容不再自动显示。</p>
<a id="more"></a>

<p>也有需要配置config.yml文件的</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># Automatically Excerpt. Not recommend.</span><br><span class="line"># Please use &lt;!-- more --&gt; in the post to control excerpt accurately.</span><br><span class="line">auto_excerpt:</span><br><span class="line">  enable: false</span><br><span class="line">  length: 150</span><br></pre></td></tr></table></figure>
<p>将false设置为true，然后自己在文章中的合适的位置设置<code>&lt;!-- more --&gt;</code></p>
<p>参考文章：<br><a href="https://blog.csdn.net/lewky_liu/article/details/81277337" target="_blank" rel="noopener">https://blog.csdn.net/lewky_liu/article/details/81277337</a><br><a href="https://blog.csdn.net/qq_32337109/article/details/78755729" target="_blank" rel="noopener">https://blog.csdn.net/qq_32337109/article/details/78755729</a></p>
]]></content>
      <categories>
        <category>hexo博客搭建</category>
      </categories>
      <tags>
        <tag>文章截断</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo博客之插入图片</title>
    <url>/2019/11/06/hexo%E5%8D%9A%E5%AE%A2%E4%B8%AD%E6%8F%92%E5%85%A5%E5%9B%BE%E7%89%87/</url>
    <content><![CDATA[<p>在博客中插入图片是一个不可或缺的功能，下面是我搭建博客过程中实现插入图片的方法。</p>
<a id="more"></a>

<h4 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h4><p>首先修改根目录下的config.yml文件中的post_asset_folder将false为true。<br>如下图所示：<br><img src="/2019/11/06/hexo%E5%8D%9A%E5%AE%A2%E4%B8%AD%E6%8F%92%E5%85%A5%E5%9B%BE%E7%89%87/pasted-0.png" alt="插入图片"></p>
<h4 id="插件安装与配置"><a href="#插件安装与配置" class="headerlink" title="插件安装与配置"></a>插件安装与配置</h4><p>先安装一个图片转换的插件,打开本地博客根目录，在git bash here 中输入</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install hexo-admin-image --save</span><br></pre></td></tr></table></figure>
<p><strong style="color:red">敲黑板，划重点</strong></p>
<p>这个插件的内容需要修改，不然可能导致图片显示不出来，最开始没有注意到，因此图片一直都显示不出来，后面才找到这个解决办法。</p>
<p>打开/node_modules/hexo-asset-image/index.js，将内容更换为下面的代码：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&apos;use strict&apos;;</span><br><span class="line">var cheerio = require(&apos;cheerio&apos;);</span><br><span class="line"></span><br><span class="line">// http://stackoverflow.com/questions/14480345/how-to-get-the-nth-occurrence-in-a-string</span><br><span class="line">function getPosition(str, m, i) &#123;</span><br><span class="line">  return str.split(m, i).join(m).length;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var version = String(hexo.version).split(&apos;.&apos;);</span><br><span class="line">hexo.extend.filter.register(&apos;after_post_render&apos;, function(data)&#123;</span><br><span class="line">  var config = hexo.config;</span><br><span class="line">  if(config.post_asset_folder)&#123;</span><br><span class="line">    	var link = data.permalink;</span><br><span class="line">	if(version.length &gt; 0 &amp;&amp; Number(version[0]) == 3)</span><br><span class="line">	   var beginPos = getPosition(link, &apos;/&apos;, 1) + 1;</span><br><span class="line">	else</span><br><span class="line">	   var beginPos = getPosition(link, &apos;/&apos;, 3) + 1;</span><br><span class="line">	// In hexo 3.1.1, the permalink of &quot;about&quot; page is like &quot;.../about/index.html&quot;.</span><br><span class="line">	var endPos = link.lastIndexOf(&apos;/&apos;) + 1;</span><br><span class="line">    link = link.substring(beginPos, endPos);</span><br><span class="line"></span><br><span class="line">    var toprocess = [&apos;excerpt&apos;, &apos;more&apos;, &apos;content&apos;];</span><br><span class="line">    for(var i = 0; i &lt; toprocess.length; i++)&#123;</span><br><span class="line">      var key = toprocess[i];</span><br><span class="line"> </span><br><span class="line">      var $ = cheerio.load(data[key], &#123;</span><br><span class="line">        ignoreWhitespace: false,</span><br><span class="line">        xmlMode: false,</span><br><span class="line">        lowerCaseTags: false,</span><br><span class="line">        decodeEntities: false</span><br><span class="line">      &#125;);</span><br><span class="line"></span><br><span class="line">      $(&apos;img&apos;).each(function()&#123;</span><br><span class="line">		if ($(this).attr(&apos;src&apos;))&#123;</span><br><span class="line">			// For windows style path, we replace &apos;\&apos; to &apos;/&apos;.</span><br><span class="line">			var src = $(this).attr(&apos;src&apos;).replace(&apos;\\&apos;, &apos;/&apos;);</span><br><span class="line">			if(!/http[s]*.*|\/\/.*/.test(src) &amp;&amp;</span><br><span class="line">			   !/^\s*\//.test(src)) &#123;</span><br><span class="line">			  // For &quot;about&quot; page, the first part of &quot;src&quot; can&apos;t be removed.</span><br><span class="line">			  // In addition, to support multi-level local directory.</span><br><span class="line">			  var linkArray = link.split(&apos;/&apos;).filter(function(elem)&#123;</span><br><span class="line">				return elem != &apos;&apos;;</span><br><span class="line">			  &#125;);</span><br><span class="line">			  var srcArray = src.split(&apos;/&apos;).filter(function(elem)&#123;</span><br><span class="line">				return elem != &apos;&apos; &amp;&amp; elem != &apos;.&apos;;</span><br><span class="line">			  &#125;);</span><br><span class="line">			  if(srcArray.length &gt; 1)</span><br><span class="line">				srcArray.shift();</span><br><span class="line">			  src = srcArray.join(&apos;/&apos;);</span><br><span class="line">			  $(this).attr(&apos;src&apos;, config.root + link + src);</span><br><span class="line">			  console.info&amp;&amp;console.info(&quot;update link as:--&gt;&quot;+config.root + link + src);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;else&#123;</span><br><span class="line">			console.info&amp;&amp;console.info(&quot;no src attr, skipped...&quot;);</span><br><span class="line">			console.info&amp;&amp;console.info($(this));</span><br><span class="line">		&#125;</span><br><span class="line">      &#125;);</span><br><span class="line">      data[key] = $.html();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h4 id="插入图片"><a href="#插入图片" class="headerlink" title="插入图片"></a>插入图片</h4><p>在博客根目录下，git bash here 中输入 <code>hexo new &quot;文章名&quot;</code> 然后在source/post目录下会生成一个 文章名.md 文件和一个与文章同名的文件夹，可以直接将想要上传的图片放到该文件夹里面，然后在.md文件中可以直接引用，如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">![图片的替换文字][文件夹名/xxx.jpg]</span><br></pre></td></tr></table></figure>
<p>因为博客名与文件名一直，直接引用相对路径就可以了。</p>
<p>然后</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">  hexo g -d</span><br></pre></td></tr></table></figure>
<p>就部署到github上面了。</p>
<h4 id="另一种方法-hexo-admin需要配置好"><a href="#另一种方法-hexo-admin需要配置好" class="headerlink" title="另一种方法(hexo-admin需要配置好)"></a>另一种方法(hexo-admin需要配置好)</h4><p>在hexo-admin中插入图片：</p>
<p>hexo-admin中可以直接选择赋值粘贴图片在编辑区域，会自动下载到source/images中并重命名。但是在windows系统中，粘贴会导致裂图，只需把前后两条斜杠删去在最前面的斜杠添加两个..即可。</p>
<p><img src="/2019/11/06/hexo%E5%8D%9A%E5%AE%A2%E4%B8%AD%E6%8F%92%E5%85%A5%E5%9B%BE%E7%89%87/pasted-1.png" alt="hexo-admin中插入图片"></p>
<p>然后部署即可。</p>
]]></content>
      <categories>
        <category>hexo博客搭建</category>
      </categories>
      <tags>
        <tag>博客插入图片</tag>
      </tags>
  </entry>
  <entry>
    <title>怎样使用hexo-admin插件</title>
    <url>/2019/11/03/%E6%80%8E%E6%A0%B7%E4%BD%BF%E7%94%A8hexo-admin%E6%8F%92%E4%BB%B6/</url>
    <content><![CDATA[<p>首先在博客根目录下输入</p>
<a id="more"></a>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo server -d 切换到后台管理页面 localhost：4000/admin/</span><br><span class="line">就可以进行可视化编辑文章</span><br><span class="line"></span><br><span class="line">编辑完之后，仍然需要</span><br><span class="line">hexo g 重新生成文件</span><br><span class="line">hexo s 本地查看</span><br><span class="line">hexo d 部署</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>hexo博客搭建</category>
      </categories>
      <tags>
        <tag>hexo-admin插件的使用</tag>
      </tags>
  </entry>
  <entry>
    <title>啊，我的博客-----</title>
    <url>/2019/11/03/%E5%95%8A%EF%BC%8C%E6%88%91%E7%9A%84%E5%8D%9A%E5%AE%A2-1/</url>
    <content><![CDATA[<p>文笔不好，那就随便说说吧，反正也没人看到……</p>
<a id="more"></a>

<p>昨天考完了教资，从外面的回来的路上我就一直在想，明天我就一定要开始自己动手去做一个自己的博客，不管做的是好是坏，得动手，不能一直光想而不去做。。当然这个道理，我始终明白，但就是觉得学的东西太少（确实也学的太少），虽然知道网上有各种各样的教程，但就是迟迟没有动手。</p>
<p>在前两年的大学生活中，学了一些编程语言，如c#，Java，PHP等，当然都没有很明白，然后时间也就白白浪费了。现在大三上已经过去一半，大四就要去找实习岗位，可是啥都不会，学编程学了一年多，一直在门口徘徊。。。有时候一想到这都大三了就觉得急躁。。。。</p>
<p>前面说，大学前两年也接触了一些编程语言，甚至也决定了要去学习Java还整了一套网课，可是刚把Java基础语法看完，就发现头发少了不少。。。。加上本来就对抽象的东西不甚理解，逐渐的放弃了学后端的想法，觉得前端东西–所见即所得，而且确实比较容易入门，就逐渐想做前端了（虽然现在发现做啥要想做好都不容易…… 就这么滴吧）</p>
<p>然后，因为学习前端，在网上也看到了许多漂亮的网站，查资料的时候，也看到了许多很好的博客，就渐渐想去做一个自己的博客，虽然当时很菜基本是做不出来的，但是想就比较容易了，于是就一直在想……直到今天，才开始动手。。。</p>
<p>其实，在上学期结束的时候，就有以为朋友带着我用phpstudy+wordpress在本地搭建了一个博客，但是那个太简约了，而且当时对他的操作很迷，就听他讲也是云里雾里，而且最后做出来的就是一个搭建，没有期待的那种效果（太简约了，而且他教了几次我也不是很会写点东西和上传……），本来想着暑假在家自己在试试，上网上找点教程啥的，但是很不幸，回家一个月基本啥也没干，就把那三部大秦帝国看完了，，，，</p>
<p>前面墨迹着这么多，主要是为了练习打字……</p>
<p>现在说一说这个博客咋做的吧，，，好吧具体的步骤记得不清楚了，，，但是基本的步骤还是有印象的：首先，这个博客是基于hexo和node.js在github上搭建的。所以，得有个github账号吧，然后为了能将本地库上传到github上还需要下载一个git（就分布式版本控制系统，，目前还不是很理解），然后下载安装node.js，然后在本地的合适的位置新建要创建的博客目录，然后可以用DOS命令也可以用git bash安装hexo，可以上官网 <a href="http://hexo.io/" target="_blank" rel="noopener">http://hexo.io/</a>   ,那里有详细的安装过程，当然我是在B站找的视频，一步一步跟着做的。到这一步就本地博客就搭建好了，然后需要初始化，更换主题啥的。哦，对了，本地库要和远程的github建立关联（具体怎么关联，每次都是百度，这次是之前有关联过，就直接跳过了），然后可以把本地的库部署到github上，那么部署之前呢，需要在github上新建一个这样  <code>yourgithubname.github.io</code> 格式的仓库，我的是 <code>qllhuo.github.io</code> 然后每次上传文章基本上三行命令，如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd 到你的本地blog根目录</span><br><span class="line">hexo g 重新生成文件 （generate）</span><br><span class="line">  hexo s 在本地服务器查看（server）localhost:4000</span><br><span class="line">  hexo d 文件生成后立即部署到远程服务器 -deploy qlhuo.github.io</span><br></pre></td></tr></table></figure>

<p>哦，忘了说怎样写文章和上传文章了，有若干种方法，在此之前我是直接在本地相应的目录下写md文件，然后根据上面的三行代码直接上传文件。比较麻烦。然后刚刚找到了一个后台管理插件 hexo-admin，如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd yourblog</span><br><span class="line">npm install --save hexo-admin</span><br><span class="line">hexo server -d</span><br><span class="line">open http://localhost:4000/admin/</span><br></pre></td></tr></table></figure>

<p>原文链接：<a href="https://blog.kinpzz.com/2016/12/31/hexo-admin-backend-management/" target="_blank" rel="noopener">https://blog.kinpzz.com/2016/12/31/hexo-admin-backend-management/</a></p>
<p>到这应该就差不多了，博客的基本框架有了，选的主题也比较美观吧！然而，还是有很多不足的地方，慢慢改吧，今天算是开一个好头吧！</p>
]]></content>
      <categories>
        <category>hexo博客搭建</category>
      </categories>
      <tags>
        <tag>我的第一篇博客</tag>
      </tags>
  </entry>
</search>
